<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects" kind="class" language="Python" prot="public">
    <compoundname>lsst::ip::isr::defects::Defects</compoundname>
    <basecompoundref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib" prot="public" virt="non-virtual">lsst.ip.isr.calibType.IsrCalib</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ad3fd0e847836dd1b8af1863dbdf9e71e" prot="private" static="yes" mutable="no">
        <type>string</type>
        <definition>string lsst::ip::isr.defects.Defects::_OBSTYPE</definition>
        <argsstring></argsstring>
        <name>_OBSTYPE</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._OBSTYPE</qualifiedname>
        <initializer>=  &quot;defects&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="79" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ab5cee916a68296083e736b4a6dc69383" prot="private" static="yes" mutable="no">
        <type>string</type>
        <definition>string lsst::ip::isr.defects.Defects::_SCHEMA</definition>
        <argsstring></argsstring>
        <name>_SCHEMA</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._SCHEMA</qualifiedname>
        <initializer>=  &apos;&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="80" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a14fef9387893fb352b85da94d9f9e0a4" prot="private" static="yes" mutable="no">
        <type>float</type>
        <definition>float lsst::ip::isr.defects.Defects::_VERSION</definition>
        <argsstring></argsstring>
        <name>_VERSION</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._VERSION</qualifiedname>
        <initializer>=  2.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="81" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a2578fb2dfc21410276efccb86725bfae" prot="private" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.defects.Defects::_defects</definition>
        <argsstring></argsstring>
        <name>_defects</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._defects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="84" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a12bb052d334969bc97f87f5a923cbd24" prot="private" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.defects.Defects::_bulk_update</definition>
        <argsstring></argsstring>
        <name>_bulk_update</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._bulk_update</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="87" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1af3b5327efb12965f4451ad002e29a97b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__init__</definition>
        <argsstring>(self, defectList=None, metadata=None, *normalize_on_init=True, **kwargs)</argsstring>
        <name>__init__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__init__</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a8b0c7d628ed5e5b429f66ec5b2b4f25b">__init__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>defectList</type>
          <defname>defectList</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>metadata</type>
          <defname>metadata</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>*</type>
          <declname>normalize_on_init</declname>
          <defval><ref refid="namespacelsst_1_1meas_1_1base_1_1plugins_1a36f6bbecdc4948ed7e8229829af57b3b" kindref="member" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/meas_base/g91d91042f5+ca8b3fd1b0/doc/meas_base.tag">True</ref></defval>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="83" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="83" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a2e3b7b8f0690235854bdf90343876dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__len__</definition>
        <argsstring>(self)</argsstring>
        <name>__len__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__len__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="130" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa5ef71cdee1f98d17f461ade7388fbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__getitem__</definition>
        <argsstring>(self, index)</argsstring>
        <name>__getitem__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__getitem__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>index</type>
          <defname>index</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="133" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ab6e5c85f1b52701c51ed19ccb9d8d006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__setitem__</definition>
        <argsstring>(self, index, value)</argsstring>
        <name>__setitem__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__setitem__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>index</type>
          <defname>index</defname>
        </param>
        <param>
          <type>value</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Can be given a `~lsst.meas.algorithms.Defect` or a `lsst.geom.BoxI`
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="136" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a529aca40edfb2803bde3569f228fc564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__iter__</definition>
        <argsstring>(self)</argsstring>
        <name>__iter__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__iter__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="142" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aff0afd041f1c5a510d533ce782ad56a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__delitem__</definition>
        <argsstring>(self, index)</argsstring>
        <name>__delitem__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__delitem__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>index</type>
          <defname>index</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="145" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ad2153dda3b548da431fc4a75b3b25994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__eq__</definition>
        <argsstring>(self, other)</argsstring>
        <name>__eq__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__eq__</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a04d9cc62ad2ccb747e13ed5a5a728b8b">__eq__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>other</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Compare if two `Defects` are equal.

Two `Defects` are equal if their bounding boxes are equal and in
the same order.  Metadata content is ignored.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="148" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="148" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a6057ae519b20e8423adff0ebdfc41f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.__str__</definition>
        <argsstring>(self)</argsstring>
        <name>__str__</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.__str__</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a0a4c5fe4f28180e3d63b49553d7a99af">__str__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="170" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aff3e0b6fe1ea821425ad12154d6cf2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.bulk_update</definition>
        <argsstring>(self)</argsstring>
        <name>bulk_update</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.bulk_update</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Temporarily suspend normalization of the defect list.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="209" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="209" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1af00e5051e7b268b90838cadd467010b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.append</definition>
        <argsstring>(self, value)</argsstring>
        <name>append</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.append</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>value</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="219" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a3749c1cbe8b060b05c3d2e62107c85cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.insert</definition>
        <argsstring>(self, index, value)</argsstring>
        <name>insert</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.insert</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>index</type>
          <defname>index</defname>
        </param>
        <param>
          <type>value</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="223" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a6c463c94abcf7595c495ed7e8a0de7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.copy</definition>
        <argsstring>(self)</argsstring>
        <name>copy</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.copy</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Copy the defects to a new list, creating new defects from the
bounding boxes.

Returns
-------
new : `Defects`
    New list with new `Defect` entries.

Notes
-----
This is not a shallow copy in that new `Defect` instances are
created from the original bounding boxes.  It&apos;s also not a deep
copy since the bounding boxes are not recreated.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="227" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="227" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a505f582c6033ccb919df1c05ab2dbb78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.transpose</definition>
        <argsstring>(self)</argsstring>
        <name>transpose</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.transpose</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Make a transposed copy of this defect list.

Returns
-------
retDefectList : `Defects`
    Transposed list of defects.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="244" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="244" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a1cd39fe836483c58f720b96e9aba9740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.maskPixels</definition>
        <argsstring>(self, maskedImage, maskName=&quot;BAD&quot;)</argsstring>
        <name>maskPixels</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.maskPixels</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>maskedImage</type>
          <defname>maskedImage</defname>
        </param>
        <param>
          <type>maskName</type>
          <defname>maskName</defname>
          <defval>&quot;BAD&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set mask plane based on these defects.

Parameters
----------
maskedImage : `lsst.afw.image.MaskedImage`
    Image to process.  Only the mask plane is updated.
maskName : str, optional
    Mask plane name to use.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="261" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="261" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a0bcbbdc645ffa726852ac99578374f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.toFitsRegionTable</definition>
        <argsstring>(self)</argsstring>
        <name>toFitsRegionTable</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.toFitsRegionTable</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Convert defect list to `~lsst.afw.table.BaseCatalog` using the
FITS region standard.

Returns
-------
table : `lsst.afw.table.BaseCatalog`
    Defects in tabular form.

Notes
-----
The table created uses the
`FITS regions &lt;https://fits.gsfc.nasa.gov/registry/region.html&gt;`_
definition tabular format.  The ``X`` and ``Y`` coordinates are
converted to FITS Physical coordinates that have origin pixel (1, 1)
rather than the (0, 0) used in LSST software.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="278" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="278" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa6380f0000eab0dde1ef6999b51ac4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.fromDict</definition>
        <argsstring>(cls, dictionary)</argsstring>
        <name>fromDict</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.fromDict</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a817599a7eef2221ba3908296dab05347">fromDict</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>dictionary</type>
          <defname>dictionary</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct a calibration from a dictionary of properties.

Must be implemented by the specific calibration subclasses.

Parameters
----------
dictionary : `dict`
    Dictionary of properties.

Returns
-------
calib : `lsst.ip.isr.CalibType`
    Constructed calibration.

Raises
------
RuntimeError
    Raised if the supplied dictionary is for a different
    calibration.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="333" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="333" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1acb09e5498f75a4b373501b095e8ad044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.toDict</definition>
        <argsstring>(self)</argsstring>
        <name>toDict</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.toDict</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1aab4a381103b94dbea2acb727184db72f">toDict</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Return a dictionary containing the calibration properties.

The dictionary should be able to be round-tripped through
`fromDict`.

Returns
-------
dictionary : `dict`
    Dictionary of properties.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="374" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="374" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a589aa3c22a9e50b73564c10e460f8afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.toTable</definition>
        <argsstring>(self)</argsstring>
        <name>toTable</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.toTable</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a247f0c08c122d6c0da72f764b5e4c466">toTable</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Convert defects to a simple table form that we use to write
to text files.

Returns
-------
table : `lsst.afw.table.BaseCatalog`
    Defects in simple tabular form.

Notes
-----
These defect tables are used as the human readable definitions
of defects in calibration data definition repositories.  The format
is to use four columns defined as follows:

x0 : `int`
    X coordinate of bottom left corner of box.
y0 : `int`
    Y coordinate of bottom left corner of box.
width : `int`
    X extent of the box.
height : `int`
    Y extent of the box.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="412" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="412" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a8b85ede5ec52b0e945cb11477d235d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.fromTable</definition>
        <argsstring>(cls, tableList, normalize_on_init=True)</argsstring>
        <name>fromTable</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.fromTable</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1403d6fec5026193600341be1a426533">fromTable</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>tableList</type>
          <defname>tableList</defname>
        </param>
        <param>
          <type>normalize_on_init</type>
          <defname>normalize_on_init</defname>
          <defval><ref refid="namespacelsst_1_1meas_1_1base_1_1plugins_1a36f6bbecdc4948ed7e8229829af57b3b" kindref="member" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/meas_base/g91d91042f5+ca8b3fd1b0/doc/meas_base.tag">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct a `Defects` from the contents of a
`~lsst.afw.table.BaseCatalog`.

Parameters
----------
table : `lsst.afw.table.BaseCatalog`
    Table with one row per defect.
normalize_on_init : `bool`, optional
    If `True`, normalization is applied to the defects listed in the
    table to remove duplicates, eliminate overlaps, etc. Otherwise
    the defects in the returned object exactly match those in the
    table.

Returns
-------
defects : `Defects`
    A `Defects` list.

Notes
-----
Two table formats are recognized.  The first is the
`FITS regions &lt;https://fits.gsfc.nasa.gov/registry/region.html&gt;`_
definition tabular format written by `toFitsRegionTable` where the
pixel origin is corrected from FITS 1-based to a 0-based origin.
The second is the legacy defects format using columns ``x0``, ``y0``
(bottom left hand pixel of box in 0-based coordinates), ``width``
and ``height``.

The FITS standard regions can only read BOX, POINT, or ROTBOX with
a zero degree rotation.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="493" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="493" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a093b18d842374ce8f5295bdd804ec278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.readLsstDefectsFile</definition>
        <argsstring>(cls, filename, normalize_on_init=False)</argsstring>
        <name>readLsstDefectsFile</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.readLsstDefectsFile</qualifiedname>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>filename</type>
          <defname>filename</defname>
        </param>
        <param>
          <type>normalize_on_init</type>
          <defname>normalize_on_init</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read defects information from a legacy LSST format text file.

Parameters
----------
filename : `str`
    Name of text file containing the defect information.

normalize_on_init : `bool`, optional
    If `True`, normalization is applied to the defects listed in the
    table to remove duplicates, eliminate overlaps, etc. Otherwise
    the defects in the returned object exactly match those in the
    table.

Returns
-------
defects : `Defects`
    The defects.

Notes
-----
These defect text files are used as the human readable definitions
of defects in calibration data definition repositories.  The format
is to use four columns defined as follows:

x0 : `int`
    X coordinate of bottom left corner of box.
y0 : `int`
    Y coordinate of bottom left corner of box.
width : `int`
    X extent of the box.
height : `int`
    Y extent of the box.

Files of this format were used historically to represent defects
in simple text form.  Use `Defects.readText` and `Defects.writeText`
to use the more modern format.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="591" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="591" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa5d86d1612e92f555a2f9d842cdf5711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.fromFootprintList</definition>
        <argsstring>(cls, fpList)</argsstring>
        <name>fromFootprintList</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.fromFootprintList</qualifiedname>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>fpList</type>
          <defname>fpList</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Compute a defect list from a footprint list, optionally growing
the footprints.

Parameters
----------
fpList : `list` of `lsst.afw.detection.Footprint`
    Footprint list to process.

Returns
-------
defects : `Defects`
    List of defects.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="642" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="642" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a398cd788cf2b2d09efeb2e4de2fb2981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects.fromMask</definition>
        <argsstring>(cls, maskedImage, maskName)</argsstring>
        <name>fromMask</name>
        <qualifiedname>lsst::ip::isr.defects.Defects.fromMask</qualifiedname>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>maskedImage</type>
          <defname>maskedImage</defname>
        </param>
        <param>
          <type>maskName</type>
          <defname>maskName</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Compute a defect list from a specified mask plane.

Parameters
----------
maskedImage : `lsst.afw.image.MaskedImage`
    Image to process.
maskName : `str` or `list`
    Mask plane name, or list of names to convert.

Returns
-------
defects : `Defects`
    Defect list constructed from masked pixels.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="662" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="662" bodyend="682"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa4e88ec7ada16d341de7b2d1b0295e77" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects._check_value</definition>
        <argsstring>(self, value)</argsstring>
        <name>_check_value</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._check_value</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>value</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Check that the supplied value is a `~lsst.meas.algorithms.Defect`
or can be converted to one.

Parameters
----------
value : `object`
    Value to check.

Returns
-------
new : `~lsst.meas.algorithms.Defect`
    Either the supplied value or a new object derived from it.

Raises
------
ValueError
    Raised if the supplied value can not be converted to
    `~lsst.meas.algorithms.Defect`
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="98" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="98" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa35111d5f81ef06cdc6f51c9bfbf13f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects._normalize</definition>
        <argsstring>(self)</argsstring>
        <name>_normalize</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._normalize</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Recalculate defect bounding boxes for efficiency.

Notes
-----
Ideally, this would generate the provably-minimal set of bounding
boxes necessary to represent the defects. At present, however, that
doesn&apos;t happen: see DM-24781. In the cases of substantial overlaps or
duplication, though, this will produce a much reduced set.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="174" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="174" bodyend="207"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a6c02f063099c68c114f4fda8d7ba14d7" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.defects.Defects._get_values</definition>
        <argsstring>(values, n=1)</argsstring>
        <name>_get_values</name>
        <qualifiedname>lsst::ip::isr.defects.Defects._get_values</qualifiedname>
        <param>
          <type>values</type>
          <defname>values</defname>
        </param>
        <param>
          <type>n</type>
          <defname>n</defname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Retrieve N values from the supplied values.

Parameters
----------
values : `numbers.Number` or `list` or `np.array`
    Input values.
n : `int`
    Number of values to retrieve.

Returns
-------
vals : `list` or `np.array` or `numbers.Number`
    Single value from supplied list if ``n`` is 1, or `list`
    containing first ``n`` values from supplied values.

Notes
-----
Some supplied tables have vectors in some columns that can also
be scalars.  This method can be used to get the first number as
a scalar or the first N items from a vector as a vector.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/defects.py" line="462" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="462" bodyend="491"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Calibration handler for collections of `lsst.meas.algorithms.Defect`.

Parameters
----------
defectList : iterable, optional
    Collections of defects to apply to the image. Can be an iterable of
    `lsst.meas.algorithms.Defect` or `lsst.geom.BoxI`.
metadata : `lsst.daf.base.PropertyList`, optional
    Metadata to associate with the defects.  Will be copied and
    overwrite existing metadata, if any. If not supplied the existing
    metadata will be reset.
normalize_on_init : `bool`
    If True, normalization is applied to the defects in ``defectList`` to
    remove duplicates, eliminate overlaps, etc.

Notes
-----
Defects are stored within this collection in a &quot;reduced&quot; or &quot;normalized&quot;
form: rather than simply storing the bounding boxes which are added to the
collection, we eliminate overlaps and duplicates. This normalization
procedure may introduce overhead when adding many new defects; it may be
temporarily disabled using the `Defects.bulk_update` context manager if
necessary.

The attributes stored in this calibration are:

_defects : `list` [`lsst.meas.algorithms.Defect`]
    The collection of Defect objects.
</verbatim></para>
<para><verbatim>The calibration type used for ingest.</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>abc::ABC</label>
      </node>
      <node id="1">
        <label>lsst.ip.isr.defects.Defects</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>lsst.ip.isr.calibType.IsrCalib</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>abc::ABC</label>
      </node>
      <node id="1">
        <label>lsst.ip.isr.defects.Defects</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>lsst.ip.isr.calibType.IsrCalib</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="python/lsst/ip/isr/defects.py" line="47" column="1" bodyfile="python/lsst/ip/isr/defects.py" bodystart="47" bodyend="682"/>
    <listofallmembers>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aff0afd041f1c5a510d533ce782ad56a0" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__delitem__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ad2153dda3b548da431fc4a75b3b25994" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__eq__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa5ef71cdee1f98d17f461ade7388fbf9" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__getitem__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1af3b5327efb12965f4451ad002e29a97b" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__init__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a529aca40edfb2803bde3569f228fc564" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__iter__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a2e3b7b8f0690235854bdf90343876dcd" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__len__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ab6e5c85f1b52701c51ed19ccb9d8d006" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__setitem__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a6057ae519b20e8423adff0ebdfc41f95" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>__str__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a12bb052d334969bc97f87f5a923cbd24" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_bulk_update</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa4e88ec7ada16d341de7b2d1b0295e77" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_check_value</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a2578fb2dfc21410276efccb86725bfae" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_defects</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a6c02f063099c68c114f4fda8d7ba14d7" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_get_values</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa35111d5f81ef06cdc6f51c9bfbf13f1" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_normalize</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ad3fd0e847836dd1b8af1863dbdf9e71e" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_OBSTYPE</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1ab5cee916a68296083e736b4a6dc69383" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_SCHEMA</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a14fef9387893fb352b85da94d9f9e0a4" prot="private" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>_VERSION</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1af00e5051e7b268b90838cadd467010b0" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>append</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aff3e0b6fe1ea821425ad12154d6cf2d8" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>bulk_update</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a6c463c94abcf7595c495ed7e8a0de7f9" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>copy</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa6380f0000eab0dde1ef6999b51ac4cf" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>fromDict</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1aa5d86d1612e92f555a2f9d842cdf5711" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>fromFootprintList</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a398cd788cf2b2d09efeb2e4de2fb2981" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>fromMask</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a8b85ede5ec52b0e945cb11477d235d0e" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>fromTable</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a3749c1cbe8b060b05c3d2e62107c85cb" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>insert</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a1cd39fe836483c58f720b96e9aba9740" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>maskPixels</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a093b18d842374ce8f5295bdd804ec278" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>readLsstDefectsFile</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1acb09e5498f75a4b373501b095e8ad044" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>toDict</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a0bcbbdc645ffa726852ac99578374f15" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>toFitsRegionTable</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a589aa3c22a9e50b73564c10e460f8afa" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>toTable</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1defects_1_1_defects_1a505f582c6033ccb919df1c05ab2dbb78" prot="public" virt="non-virtual"><scope>lsst::ip::isr::defects::Defects</scope><name>transpose</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
