<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="linearize_8py" kind="file" language="Python">
    <compoundname>linearize.py</compoundname>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer" prot="public">lsst::ip::isr::linearize::Linearizer</innerclass>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" prot="public">lsst::ip::isr::linearize::LinearizeBase</innerclass>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_lookup_table" prot="public">lsst::ip::isr::linearize::LinearizeLookupTable</innerclass>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_polynomial" prot="public">lsst::ip::isr::linearize::LinearizePolynomial</innerclass>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_squared" prot="public">lsst::ip::isr::linearize::LinearizeSquared</innerclass>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_spline" prot="public">lsst::ip::isr::linearize::LinearizeSpline</innerclass>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_proportional" prot="public">lsst::ip::isr::linearize::LinearizeProportional</innerclass>
    <innerclass refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_none" prot="public">lsst::ip::isr::linearize::LinearizeNone</innerclass>
    <innernamespace refid="namespacelsst">lsst</innernamespace>
    <innernamespace refid="namespacelsst_1_1ip">lsst::ip</innernamespace>
    <innernamespace refid="namespacelsst_1_1ip_1_1isr">lsst::ip::isr</innernamespace>
    <innernamespace refid="namespacelsst_1_1ip_1_1isr_1_1linearize">lsst::ip::isr::linearize</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacelsst_1_1ip_1_1isr_1_1linearize" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LSST<sp/>Data<sp/>Management<sp/>System</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2016<sp/>AURA/LSST.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LSST<sp/>Project<sp/>(http://www.lsst.org/).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>LSST<sp/>License<sp/>Statement<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>see<sp/>&lt;http://www.lsstcorp.org/LegalNotices/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">__all__<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;Linearizer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LinearizeBase&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LinearizeLookupTable&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LinearizeSquared&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LinearizeProportional&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LinearizePolynomial&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LinearizeSpline&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LinearizeNone&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>abc</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>astropy.table<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Table</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1afw_1_1math" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.math</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>afwMath</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>lsst.pipe.base<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Struct</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1geom" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/geom/g3f8e1907dc+7442544851/doc/geom.tag">lsst.geom</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Box2I,<sp/>Point2I,<sp/>Extent2I</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.applyLookupTable<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>applyLookupTable</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.calibType<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>IsrCalib</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer" kindref="compound">Linearizer</ref>(<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib" kindref="compound">IsrCalib</ref>):</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Parameter<sp/>set<sp/>for<sp/>linearization.</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>These<sp/>parameters<sp/>are<sp/>included<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>`<ref refid="classlsst_1_1afw_1_1camera_geom_1_1_amplifier" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.cameraGeom.Amplifier</ref>`,<sp/>but</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>should<sp/>be<sp/>accessible<sp/>externally<sp/>to<sp/>allow<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>testing.</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>table<sp/>:<sp/>`numpy.array`,<sp/>optional</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lookup<sp/>table;<sp/>a<sp/>2-dimensional<sp/>array<sp/>of<sp/>floats:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>one<sp/>row<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>each<sp/>row<sp/>index<sp/>(value<sp/>of<sp/>coef[0]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>amplifier)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>one<sp/>column<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>each<sp/>image<sp/>value</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>To<sp/>avoid<sp/>copying<sp/>the<sp/>table<sp/>the<sp/>last<sp/>index<sp/>should<sp/>vary<sp/>fastest</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(numpy<sp/>default<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>order)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>detector<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1camera_geom_1_1_detector" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.cameraGeom.Detector</ref>`,<sp/>optional</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detector<sp/>object.<sp/><sp/>Passed<sp/>to<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1aa4a68997772b1898843219a8d078e228" kindref="member">fromDetector</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ab439cf73c3ef86db0154126a42725a10" kindref="member">fromDetector</ref>()<sp/>on<sp/>init.</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>log<sp/>:<sp/>`logging.Logger`,<sp/>optional</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages.</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`,<sp/>optional</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Other<sp/>keyword<sp/>arguments<sp/>to<sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"><sp/>to<sp/>the<sp/>parent<sp/>init.</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>supplied<sp/>table<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>2D,<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>table<sp/>has<sp/>fewer</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns<sp/>than<sp/>rows<sp/>(indicating<sp/>that<sp/>the<sp/>indices<sp/>are<sp/>swapped).</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>The<sp/>linearizer<sp/>attributes<sp/>stored<sp/>are:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>hasLinearity<sp/>:<sp/>`bool`</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Whether<sp/>a<sp/>linearity<sp/>correction<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>defined<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>this<sp/>detector.</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>override<sp/>:<sp/>`bool`</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Whether<sp/>the<sp/>detector<sp/>parameters<sp/>should<sp/>be<sp/>overridden.</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>ampNames<sp/>:<sp/>`list`<sp/>[`str`]</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>amplifier<sp/>names<sp/>to<sp/>correct.</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>linearityCoeffs<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`numpy.array`]</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coefficients<sp/>to<sp/>use<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>correction.<sp/><sp/>Indexed<sp/>by<sp/>amplifier</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.<sp/><sp/>The<sp/>format<sp/>of<sp/>the<sp/>array<sp/>depends<sp/>on<sp/>the<sp/>type<sp/>of</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correction<sp/>to<sp/>apply.</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>linearityType<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`str`]</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>of<sp/>correction<sp/>to<sp/>use,<sp/>indexed<sp/>by<sp/>amplifier<sp/>names.</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>linearityBBox<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`<ref refid="classlsst_1_1geom_1_1_box2_i" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/geom/g3f8e1907dc+7442544851/doc/geom.tag">lsst.geom.Box2I</ref>`]</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bounding<sp/>box<sp/>the<sp/>correction<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>valid<sp/>over,<sp/>indexed<sp/>by</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplifier<sp/>names.</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>fitParams<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`numpy.array`],<sp/>optional</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Linearity<sp/>fit<sp/>parameters<sp/>used<sp/>to<sp/>construct<sp/>the<sp/>correction</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficients,<sp/>indexed<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>above.</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>fitParamsErr<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`numpy.array`],<sp/>optional</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>values<sp/>of<sp/>the<sp/>linearity<sp/>fit<sp/>parameters<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>construct<sp/>the<sp/>correction<sp/>coefficients,<sp/>indexed<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>above.</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>fitChiSq<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`float`],<sp/>optional</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chi-squared<sp/>value<sp/>of<sp/>the<sp/>linearity<sp/>fit,<sp/>indexed<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>above.</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>fitResiduals<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`numpy.array`],<sp/>optional</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Residuals<sp/>of<sp/>the<sp/>fit,<sp/>indexed<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>above.<sp/>Used<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculating<sp/>photdiode<sp/>corrections</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>linearFit<sp/>:<sp/>The<sp/>linear<sp/>fit<sp/>to<sp/>the<sp/>low<sp/>flux<sp/>region<sp/>of<sp/>the<sp/>curve.</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[intercept,<sp/>slope].</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>tableData<sp/>:<sp/>`numpy.array`,<sp/>optional</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lookup<sp/>table<sp/>data<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>linearity<sp/>correction.</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_OBSTYPE<sp/>=<sp/>&quot;LINEARIZER&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>_SCHEMA<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Gen3<sp/>Linearizer&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>_VERSION<sp/>=<sp/>1.1</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae0aa7730409f6d77a8c2fcde09719748" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae0aa7730409f6d77a8c2fcde09719748" kindref="member">__init__</ref>(self,<sp/>table=None,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="108" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6e589f2cc9d97a09a8c4b858948a1f2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6e589f2cc9d97a09a8c4b858948a1f2a" kindref="member">hasLinearity</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a34cdc50aeb6e67ecd5b3ff49adfd2bc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a34cdc50aeb6e67ecd5b3ff49adfd2bc7" kindref="member">override</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a407b363e8794613dd8e74f7c027cdd03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a407b363e8794613dd8e74f7c027cdd03" kindref="member">ampNames</ref><sp/>=<sp/>list()</highlight></codeline>
<codeline lineno="112" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="113" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="114" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="115" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eb7667ee78d195f932667677474a9f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eb7667ee78d195f932667677474a9f2" kindref="member">fitParams</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="116" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a2d414924d4f7d9ccdcfd245fe52a2478" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a2d414924d4f7d9ccdcfd245fe52a2478" kindref="member">fitParamsErr</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="117" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac6e16cb534e4cd19adc3c4dc85ec9a2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac6e16cb534e4cd19adc3c4dc85ec9a2d" kindref="member">fitChiSq</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="118" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1af904c9b26ef5dc58a723d40353d20ddc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1af904c9b26ef5dc58a723d40353d20ddc" kindref="member">fitResiduals</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="119" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a65ec95ac3c0b416675bc65444e732584" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a65ec95ac3c0b416675bc65444e732584" kindref="member">linearFit</ref><sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="120" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>table<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(table.shape)<sp/>!=<sp/>2:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;table<sp/>shape<sp/>=<sp/>%s;<sp/>must<sp/>have<sp/>two<sp/>dimensions&quot;</highlight><highlight class="normal"><sp/>%<sp/>(table.shape,))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>table.shape[1]<sp/>&lt;<sp/>table.shape[0]:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;table<sp/>shape<sp/>=<sp/>%s;<sp/>indices<sp/>are<sp/>switched&quot;</highlight><highlight class="normal"><sp/>%<sp/>(table.shape,))</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref><sp/>=<sp/>np.array(table,<sp/>order=</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super().<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae0aa7730409f6d77a8c2fcde09719748" kindref="member">__init__</ref>(**kwargs)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1ad3476abba40729c58801cd853baa64f7" kindref="member">requiredAttributes</ref><ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1aafa57ec8ed72627506866d39e7903637" kindref="member">requiredAttributes</ref><ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a3bd634ef75e3710c93d50f7c1829961f" kindref="member">requiredAttributes</ref>.update([</highlight><highlight class="stringliteral">&apos;hasLinearity&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;override&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ampNames&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearityCoeffs&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;linearityType&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;linearityBBox&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitParams&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;fitParamsErr&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;fitChiSq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitResiduals&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;linearFit&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;tableData&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac104da4e9864ee2158139e640685b237" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac104da4e9864ee2158139e640685b237" kindref="member">updateMetadata</ref>(self,<sp/>setDate=False,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Update<sp/>metadata<sp/>keywords<sp/>with<sp/>new<sp/>values.</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>calls<sp/>the<sp/>base<sp/></highlight><highlight class="keyword">class</highlight><highlight class="stringliteral">&apos;s<sp/>method<sp/>after<sp/>ensuring<sp/>the<sp/>required</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>keywords<sp/>will<sp/>be<sp/>saved.</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setDate<sp/>:<sp/>`bool`,<sp/>optional</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update<sp/>the<sp/>CALIBDATE<sp/>fields<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>metadata<sp/>to<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.<sp/>Defaults<sp/>to<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Other<sp/>keyword<sp/>parameters<sp/>to<sp/>set<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>metadata.</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs[&apos;HAS_LINEARITY&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6e589f2cc9d97a09a8c4b858948a1f2a" kindref="member">hasLinearity</ref></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs[</highlight><highlight class="stringliteral">&apos;OVERRIDE&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a34cdc50aeb6e67ecd5b3ff49adfd2bc7" kindref="member">override</ref></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs[</highlight><highlight class="stringliteral">&apos;HAS_TABLE&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super().<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac104da4e9864ee2158139e640685b237" kindref="member">updateMetadata</ref>(setDate=setDate,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ab439cf73c3ef86db0154126a42725a10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ab439cf73c3ef86db0154126a42725a10" kindref="member">fromDetector</ref>(self,<sp/>detector):</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Read<sp/>linearity<sp/>parameters<sp/>from<sp/>a<sp/>detector.</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detector<sp/>:<sp/>`lsst.afw.cameraGeom.detector`</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>detector<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>parameters<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib<sp/>:<sp/>`<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer" kindref="compound">lsst.ip.isr.Linearizer</ref>`</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>calibration<sp/>constructed<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>the<sp/>detector.</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a8133fc3d4ddd7d9ded66402f810f4509" kindref="member">_detectorName</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a21b69643438fee8f39e25d4c8b401071" kindref="member">_detectorName</ref><sp/>=<sp/>detector.getName()</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a0ea3e170a2ebd7b288a6191b96e7fe0a" kindref="member">_detectorSerial</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6088bf14c2ae8cbf307fe5f04432c8d8" kindref="member">_detectorSerial</ref><sp/>=<sp/>detector.getSerial()</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a97f2f0d2c3de7c039afc341db5bccd91" kindref="member">_detectorId</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1adb5e4a42760ef225723cb9faece89f23" kindref="member">_detectorId</ref><sp/>=<sp/>detector.getId()</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6e589f2cc9d97a09a8c4b858948a1f2a" kindref="member">hasLinearity</ref><sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Do<sp/>not<sp/>translate<sp/>Threshold,<sp/>Maximum,<sp/>Units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>amp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>detector.getAmplifiers():</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampName<sp/>=<sp/>amp.getName()</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a407b363e8794613dd8e74f7c027cdd03" kindref="member">ampNames</ref>.append(ampName)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>[ampName]<sp/>=<sp/>amp.getLinearityType()</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName]<sp/>=<sp/>amp.getLinearityCoeffs()</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref>[ampName]<sp/>=<sp/>amp.getBBox()</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afb41f1cce2d7012d033b2de37c6e98b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afb41f1cce2d7012d033b2de37c6e98b4" kindref="member">fromDict</ref>(cls,<sp/>dictionary):</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Construct<sp/>a<sp/>calibration<sp/>from<sp/>a<sp/>dictionary<sp/>of<sp/>properties</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>properties</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib<sp/>:<sp/>`lsst.ip.isr.Linearity`</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructed<sp/>calibration.</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>supplied<sp/>dictionary<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>different</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration.</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib<sp/>=<sp/>cls()</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>calib._OBSTYPE<sp/>!=<sp/>dictionary[</highlight><highlight class="stringliteral">&apos;metadata&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;OBSTYPE&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(f</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>linearity<sp/>supplied.<sp/><sp/>Expected<sp/>{calib._OBSTYPE},<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;found<sp/>{dictionary[&apos;metadata&apos;][&apos;OBSTYPE&apos;]}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.setMetadata(dictionary[</highlight><highlight class="stringliteral">&apos;metadata&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.hasLinearity<sp/>=<sp/>dictionary.get(</highlight><highlight class="stringliteral">&apos;hasLinearity&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary[</highlight><highlight class="stringliteral">&apos;metadata&apos;</highlight><highlight class="normal">].get(</highlight><highlight class="stringliteral">&apos;HAS_LINEARITY&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.override<sp/>=<sp/>dictionary.get(</highlight><highlight class="stringliteral">&apos;override&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>calib.hasLinearity:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ampName<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>dictionary[</highlight><highlight class="stringliteral">&apos;amplifiers&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amp<sp/>=<sp/>dictionary[</highlight><highlight class="stringliteral">&apos;amplifiers&apos;</highlight><highlight class="normal">][ampName]</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.ampNames.append(ampName)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.linearityCoeffs[ampName]<sp/>=<sp/>np.array(amp.get(</highlight><highlight class="stringliteral">&apos;linearityCoeffs&apos;</highlight><highlight class="normal">,<sp/>[0.0]))</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.linearityType[ampName]<sp/>=<sp/>amp.get(</highlight><highlight class="stringliteral">&apos;linearityType&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;None&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.linearityBBox[ampName]<sp/>=<sp/>amp.get(</highlight><highlight class="stringliteral">&apos;linearityBBox&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.fitParams[ampName]<sp/>=<sp/>np.array(amp.get(</highlight><highlight class="stringliteral">&apos;fitParams&apos;</highlight><highlight class="normal">,<sp/>[0.0]))</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.fitParamsErr[ampName]<sp/>=<sp/>np.array(amp.get(</highlight><highlight class="stringliteral">&apos;fitParamsErr&apos;</highlight><highlight class="normal">,<sp/>[0.0]))</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.fitChiSq[ampName]<sp/>=<sp/>amp.get(</highlight><highlight class="stringliteral">&apos;fitChiSq&apos;</highlight><highlight class="normal">,<sp/>np.nan)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.fitResiduals[ampName]<sp/>=<sp/>np.array(amp.get(</highlight><highlight class="stringliteral">&apos;fitResiduals&apos;</highlight><highlight class="normal">,<sp/>[0.0]))</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.linearFit[ampName]<sp/>=<sp/>np.array(amp.get(</highlight><highlight class="stringliteral">&apos;linearFit&apos;</highlight><highlight class="normal">,<sp/>[0.0]))</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.tableData<sp/>=<sp/>dictionary.get(</highlight><highlight class="stringliteral">&apos;tableData&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>calib.tableData:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calib.tableData<sp/>=<sp/>np.array(calib.tableData)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calib</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a07615c1dadabee58e29f98e13b2cf408" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a07615c1dadabee58e29f98e13b2cf408" kindref="member">toDict</ref>(self):</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Return<sp/>linearity<sp/>parameters<sp/>as<sp/>a<sp/>dict.</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDict<sp/>:<sp/>`dict`:</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a800537ed1777875f9f9fd973a83c3809" kindref="member">updateMetadata</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac104da4e9864ee2158139e640685b237" kindref="member">updateMetadata</ref>()</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDict<sp/>=<sp/>{&apos;metadata&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a5aa43aac89d3efd55adb897b148fddc0" kindref="member">getMetadata</ref>(),</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;detectorName&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a8133fc3d4ddd7d9ded66402f810f4509" kindref="member">_detectorName</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a21b69643438fee8f39e25d4c8b401071" kindref="member">_detectorName</ref>,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;detectorSerial&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a0ea3e170a2ebd7b288a6191b96e7fe0a" kindref="member">_detectorSerial</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6088bf14c2ae8cbf307fe5f04432c8d8" kindref="member">_detectorSerial</ref>,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;detectorId&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a97f2f0d2c3de7c039afc341db5bccd91" kindref="member">_detectorId</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1adb5e4a42760ef225723cb9faece89f23" kindref="member">_detectorId</ref>,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;hasTable&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;amplifiers&apos;</highlight><highlight class="normal">:<sp/>dict(),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ampName<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDict[</highlight><highlight class="stringliteral">&apos;amplifiers&apos;</highlight><highlight class="normal">][ampName]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;linearityType&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>[ampName],</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearityCoeffs&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName].tolist(),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearityBBox&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref>[ampName],</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitParams&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eb7667ee78d195f932667677474a9f2" kindref="member">fitParams</ref>[ampName].tolist(),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitParamsErr&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a2d414924d4f7d9ccdcfd245fe52a2478" kindref="member">fitParamsErr</ref>[ampName].tolist(),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitChiSq&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac6e16cb534e4cd19adc3c4dc85ec9a2d" kindref="member">fitChiSq</ref>[ampName],</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitResiduals&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1af904c9b26ef5dc58a723d40353d20ddc" kindref="member">fitResiduals</ref>[ampName].tolist(),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearFit&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a65ec95ac3c0b416675bc65444e732584" kindref="member">linearFit</ref>[ampName].tolist()}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDict[</highlight><highlight class="stringliteral">&apos;tableData&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref>.tolist()</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outDict</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@classmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eafe7bba57e9a30503911fbcdc3f0bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eafe7bba57e9a30503911fbcdc3f0bd" kindref="member">fromTable</ref>(cls,<sp/>tableList):</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Read<sp/>linearity<sp/>from<sp/>a<sp/>FITS<sp/>file.</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>uses<sp/>the<sp/>`fromDict`<sp/>method<sp/>to<sp/>create<sp/>the</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration,<sp/>after<sp/>constructing<sp/>an<sp/>appropriate<sp/>dictionary<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>input<sp/>tables.</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableList<sp/>:<sp/>`list`<sp/>[`astropy.table.Table`]</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afwTable<sp/>read<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>input<sp/>file<sp/>name.</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearity<sp/>:<sp/>`~<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer" kindref="compound">lsst.ip.isr.linearize.Linearizer</ref>``</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Linearity<sp/>parameters.</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>method<sp/>reads<sp/>a<sp/>FITS<sp/>file<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>2<sp/>extensions.<sp/>The<sp/>metadata<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>the<sp/>header<sp/>of<sp/>extension<sp/>1,<sp/>which<sp/>must<sp/>exist.<sp/><sp/>Then<sp/>the<sp/>table</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>loaded,<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/><sp/>the<sp/>[</highlight><highlight class="stringliteral">&apos;AMPLIFIER_NAME&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;TYPE&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;COEFFS&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;BBOX_X0&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;BBOX_Y0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;BBOX_DX&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;BBOX_DY&apos;</highlight><highlight class="normal">]<sp/>columns<sp/>are<sp/>read<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>used<sp/>to<sp/>set<sp/>each</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>by<sp/>looping<sp/>over<sp/>rows.</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extension<sp/>2<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>then<sp/>attempted<sp/>to<sp/>read<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>block<sp/>(which<sp/>only</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exists<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>lookup<sp/>tables).<sp/>It<sp/>has<sp/>a<sp/>column<sp/>named<sp/></highlight><highlight class="stringliteral">&apos;LOOKUP_VALUES&apos;</highlight><highlight class="normal"><sp/>that</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contains<sp/>a<sp/>vector<sp/>of<sp/>the<sp/>lookup<sp/>entries<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>each<sp/>row.</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeffTable<sp/>=<sp/>tableList[0]</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metadata<sp/>=<sp/>coeffTable.meta</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDict<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDict[&apos;metadata&apos;</highlight><highlight class="normal">]<sp/>=<sp/>metadata</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDict[</highlight><highlight class="stringliteral">&apos;hasLinearity&apos;</highlight><highlight class="normal">]<sp/>=<sp/>metadata.get(</highlight><highlight class="stringliteral">&apos;HAS_LINEARITY&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDict[</highlight><highlight class="stringliteral">&apos;amplifiers&apos;</highlight><highlight class="normal">]<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>record<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coeffTable:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampName<sp/>=<sp/>record[</highlight><highlight class="stringliteral">&apos;AMPLIFIER_NAME&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitParams<sp/>=<sp/>record[</highlight><highlight class="stringliteral">&apos;FIT_PARAMS&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;FIT_PARAMS&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>record.columns<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>np.array([0.0])</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitParamsErr<sp/>=<sp/>record[</highlight><highlight class="stringliteral">&apos;FIT_PARAMS_ERR&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;FIT_PARAMS_ERR&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>record.columns<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>np.array([0.0])</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitChiSq<sp/>=<sp/>record[</highlight><highlight class="stringliteral">&apos;RED_CHI_SQ&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;RED_CHI_SQ&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>record.columns<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>np.nan</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitResiduals<sp/>=<sp/>record[</highlight><highlight class="stringliteral">&apos;FIT_RES&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;FIT_RES&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>record.columns<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>np.array([0.0])</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearFit<sp/>=<sp/>record[</highlight><highlight class="stringliteral">&apos;LIN_FIT&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;LIN_FIT&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>record.columns<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>np.array([0.0])</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDict[</highlight><highlight class="stringliteral">&apos;amplifiers&apos;</highlight><highlight class="normal">][ampName]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearityType&apos;</highlight><highlight class="normal">:<sp/>record[</highlight><highlight class="stringliteral">&apos;TYPE&apos;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearityCoeffs&apos;</highlight><highlight class="normal">:<sp/>record[</highlight><highlight class="stringliteral">&apos;COEFFS&apos;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearityBBox&apos;</highlight><highlight class="normal">:<sp/><ref refid="classlsst_1_1geom_1_1_box2_i" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/geom/g3f8e1907dc+7442544851/doc/geom.tag">Box2I</ref>(Point2I(record[</highlight><highlight class="stringliteral">&apos;BBOX_X0&apos;</highlight><highlight class="normal">],<sp/>record[</highlight><highlight class="stringliteral">&apos;BBOX_Y0&apos;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extent2I(record[</highlight><highlight class="stringliteral">&apos;BBOX_DX&apos;</highlight><highlight class="normal">],<sp/>record[</highlight><highlight class="stringliteral">&apos;BBOX_DY&apos;</highlight><highlight class="normal">])),</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitParams&apos;</highlight><highlight class="normal">:<sp/>fitParams,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitParamsErr&apos;</highlight><highlight class="normal">:<sp/>fitParamsErr,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitChiSq&apos;</highlight><highlight class="normal">:<sp/>fitChiSq,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fitResiduals&apos;</highlight><highlight class="normal">:<sp/>fitResiduals,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;linearFit&apos;</highlight><highlight class="normal">:<sp/>linearFit,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(tableList)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableData<sp/>=<sp/>tableList[1]</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDict[</highlight><highlight class="stringliteral">&apos;tableData&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[record[</highlight><highlight class="stringliteral">&apos;LOOKUP_VALUES&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>record<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>tableData]</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls().<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afb41f1cce2d7012d033b2de37c6e98b4" kindref="member">fromDict</ref>(inDict)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afea3e860672de822d9f47febf0402698" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afea3e860672de822d9f47febf0402698" kindref="member">toTable</ref>(self):</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Construct<sp/>a<sp/>list<sp/>of<sp/>tables<sp/>containing<sp/>the<sp/>information<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration.</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>list<sp/>of<sp/>tables<sp/>should<sp/>create<sp/>an<sp/>identical<sp/>calibration</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>being<sp/>passed<sp/>to<sp/>this<sp/></highlight><highlight class="keyword">class</highlight><highlight class="stringliteral">&apos;s<sp/>fromTable<sp/>method.</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableList<sp/>:<sp/>`list`<sp/>[`astropy.table.Table`]</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>tables<sp/>containing<sp/>the<sp/>linearity<sp/>calibration</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>information.</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableList<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a800537ed1777875f9f9fd973a83c3809" kindref="member">updateMetadata</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac104da4e9864ee2158139e640685b237" kindref="member">updateMetadata</ref>()</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catalog<sp/>=<sp/>Table([{&apos;AMPLIFIER_NAME&apos;</highlight><highlight class="normal">:<sp/>ampName,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;TYPE&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>[ampName],</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;COEFFS&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName],</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;BBOX_X0&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref>[ampName].getMinX(),</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;BBOX_Y0&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref>[ampName].getMinY(),</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;BBOX_DX&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref>[ampName].getWidth(),</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;BBOX_DY&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref>[ampName].getHeight(),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;FIT_PARAMS&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eb7667ee78d195f932667677474a9f2" kindref="member">fitParams</ref>[ampName],</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;FIT_PARAMS_ERR&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a2d414924d4f7d9ccdcfd245fe52a2478" kindref="member">fitParamsErr</ref>[ampName],</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;RED_CHI_SQ&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac6e16cb534e4cd19adc3c4dc85ec9a2d" kindref="member">fitChiSq</ref>[ampName],</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;FIT_RES&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1af904c9b26ef5dc58a723d40353d20ddc" kindref="member">fitResiduals</ref>[ampName],</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;LIN_FIT&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a65ec95ac3c0b416675bc65444e732584" kindref="member">linearFit</ref>[ampName],</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ampName<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a407b363e8794613dd8e74f7c027cdd03" kindref="member">ampNames</ref>])</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catalog.meta<sp/>=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a5aa43aac89d3efd55adb897b148fddc0" kindref="member">getMetadata</ref>().<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a07615c1dadabee58e29f98e13b2cf408" kindref="member">toDict</ref>()</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableList.append(catalog)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catalog<sp/>=<sp/>Table([{</highlight><highlight class="stringliteral">&apos;LOOKUP_VALUES&apos;</highlight><highlight class="normal">:<sp/>value}<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref>])</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableList.append(catalog)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return(tableList)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a1500f9ae31b84b574481937b71edd3bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a1500f9ae31b84b574481937b71edd3bb" kindref="member">getLinearityTypeByName</ref>(self,<sp/>linearityTypeName):</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Determine<sp/>the<sp/>linearity<sp/>class<sp/>to<sp/>use<sp/>from<sp/>the<sp/>type<sp/>name.</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearityTypeName<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>name<sp/>of<sp/>the<sp/>linearity<sp/>type<sp/>that<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>needed.</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearityType<sp/>:<sp/>`~<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">lsst.ip.isr.linearize.LinearizeBase</ref>`</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>appropriate<sp/>linearity<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">to<sp/>use.<sp/><sp/>If<sp/>no<sp/>matching<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>found,<sp/>`</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">`<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>returned.</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[LinearizeLookupTable,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinearizeSquared,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinearizePolynomial,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinearizeProportional,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinearizeSpline,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinearizeNone]:</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t.LinearityType<sp/>==<sp/>linearityTypeName:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a26004523c92f710282c06f26ed35b220" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a26004523c92f710282c06f26ed35b220" kindref="member">validate</ref>(self,<sp/>detector=None,<sp/>amplifier=None):</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Validate<sp/>linearity<sp/>for<sp/>a<sp/>detector/amplifier.</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detector<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1camera_geom_1_1_detector" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.cameraGeom.Detector</ref>`,<sp/>optional</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detector<sp/>to<sp/>validate,<sp/>along<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>its<sp/>amplifiers.</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplifier<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1camera_geom_1_1_amplifier" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.cameraGeom.Amplifier</ref>`,<sp/>optional</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Single<sp/>amplifier<sp/>to<sp/>validate.</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>there<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>a<sp/>mismatch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>linearity<sp/>parameters,<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>cameraGeom<sp/>parameters<sp/>are<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>being<sp/>overridden.</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplifiersToCheck<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>detector:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a8133fc3d4ddd7d9ded66402f810f4509" kindref="member">_detectorName</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a21b69643438fee8f39e25d4c8b401071" kindref="member">_detectorName</ref><sp/>!=<sp/>detector.getName():</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Detector<sp/>names<sp/>don&apos;t<sp/>match:<sp/>%s<sp/>!=<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a8133fc3d4ddd7d9ded66402f810f4509" kindref="member">_detectorName</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a21b69643438fee8f39e25d4c8b401071" kindref="member">_detectorName</ref>,<sp/>detector.getName()))</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>int(self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a97f2f0d2c3de7c039afc341db5bccd91" kindref="member">_detectorId</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1adb5e4a42760ef225723cb9faece89f23" kindref="member">_detectorId</ref>)<sp/>!=<sp/>int(detector.getId()):</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Detector<sp/>IDs<sp/>don&apos;t<sp/>match:<sp/>%s<sp/>!=<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int(self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a97f2f0d2c3de7c039afc341db5bccd91" kindref="member">_detectorId</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1adb5e4a42760ef225723cb9faece89f23" kindref="member">_detectorId</ref>),<sp/>int(detector.getId())))</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>DM-38778:<sp/>This<sp/>check<sp/>fails<sp/>on<sp/>LATISS<sp/>due<sp/>to<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>in<sp/>the<sp/>camera<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>self._detectorSerial<sp/>!=<sp/>detector.getSerial():</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>RuntimeError(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Detector<sp/>serial<sp/>numbers<sp/>don&apos;t<sp/>match:<sp/>%s<sp/>!=<sp/>%s&quot;<sp/>%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self._detectorSerial,<sp/>detector.getSerial()))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(detector.getAmplifiers())<sp/>!=<sp/>len(self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>.keys()):</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Detector<sp/>number<sp/>of<sp/>amps<sp/>=<sp/>%s<sp/>does<sp/>not<sp/>match<sp/>saved<sp/>value<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(len(detector.getAmplifiers()),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>.keys())))</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplifiersToCheck.extend(detector.getAmplifiers())</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>amplifier:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplifiersToCheck.extend(amplifier)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>amp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>amplifiersToCheck:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampName<sp/>=<sp/>amp.getName()</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ampName<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>.keys():</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Amplifier<sp/>%s<sp/>is<sp/>not<sp/>in<sp/>linearity<sp/>data&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ampName,<sp/>))</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>amp.getLinearityType()<sp/>!=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>[ampName]:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a34cdc50aeb6e67ecd5b3ff49adfd2bc7" kindref="member">override</ref>:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1a64908430e0e0c48dde22a7b41d8bc2" kindref="member">log</ref>.warning(</highlight><highlight class="stringliteral">&quot;Overriding<sp/>amplifier<sp/>defined<sp/>linearityType<sp/>(%s)<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>[ampName],<sp/>ampName)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Amplifier<sp/>%s<sp/>type<sp/>%s<sp/>does<sp/>not<sp/>match<sp/>saved<sp/>value<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ampName,<sp/>amp.getLinearityType(),<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>[ampName]))</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amp.getLinearityCoeffs().shape<sp/>!=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName].shape<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.allclose(amp.getLinearityCoeffs(),<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName],<sp/>equal_nan=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a34cdc50aeb6e67ecd5b3ff49adfd2bc7" kindref="member">override</ref>:</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1a64908430e0e0c48dde22a7b41d8bc2" kindref="member">log</ref>.warning(</highlight><highlight class="stringliteral">&quot;Overriding<sp/>amplifier<sp/>defined<sp/>linearityCoeffs<sp/>(%s)<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName],<sp/>ampName)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Amplifier<sp/>%s<sp/>coeffs<sp/>%s<sp/>does<sp/>not<sp/>match<sp/>saved<sp/>value<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ampName,<sp/>amp.getLinearityCoeffs(),<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName]))</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a7996239d322183ebab7b1b71e08d596c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a7996239d322183ebab7b1b71e08d596c" kindref="member">applyLinearity</ref>(self,<sp/>image,<sp/>detector=None,<sp/>log=None):</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Apply<sp/>the<sp/>linearity<sp/>to<sp/>an<sp/>image.</highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>linearity<sp/>parameters<sp/>are<sp/>populated,<sp/>use<sp/>those,</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherwise<sp/>use<sp/>the<sp/>values<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>the<sp/>detector.</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`~lsst.afw.image.image`</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>correct.</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detector<sp/>:<sp/>`~lsst.afw.cameraGeom.detector`</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detector<sp/>to<sp/>use<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>linearity<sp/>parameters<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>already</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populated.</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log<sp/>:<sp/>`~logging.Logger`,<sp/>optional</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log<sp/>object<sp/>to<sp/>use<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>logging.</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>log<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log<sp/>=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1a64908430e0e0c48dde22a7b41d8bc2" kindref="member">log</ref></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>detector<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6e589f2cc9d97a09a8c4b858948a1f2a" kindref="member">hasLinearity</ref>:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1aa4a68997772b1898843219a8d078e228" kindref="member">fromDetector</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ab439cf73c3ef86db0154126a42725a10" kindref="member">fromDetector</ref>(detector)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a21399d7c477e8126bb3e93736125eacf" kindref="member">validate</ref><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a26004523c92f710282c06f26ed35b220" kindref="member">validate</ref>(detector)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAmps<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numLinearized<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOutOfRange<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ampName<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>.keys():</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearizer<sp/>=<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a1500f9ae31b84b574481937b71edd3bb" kindref="member">getLinearityTypeByName</ref>(self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" kindref="member">linearityType</ref>[ampName])</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAmps<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>linearizer<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampView<sp/>=<sp/>image.Factory(image,<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" kindref="member">linearityBBox</ref>[ampName])</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success,<sp/>outOfRange<sp/>=<sp/>linearizer()(ampView,<sp/>**{</highlight><highlight class="stringliteral">&apos;coeffs&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" kindref="member">linearityCoeffs</ref>[ampName],</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;table&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" kindref="member">tableData</ref>,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;log&apos;</highlight><highlight class="normal">:<sp/>self.<ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1a64908430e0e0c48dde22a7b41d8bc2" kindref="member">log</ref>})</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOutOfRange<sp/>+=<sp/>outOfRange</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>success:</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numLinearized<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>log<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.warning(</highlight><highlight class="stringliteral">&quot;Amplifier<sp/>%s<sp/>did<sp/>not<sp/>linearize.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampName)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Struct(</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAmps=numAmps,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numLinearized=numLinearized,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOutOfRange=numOutOfRange</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">LinearizeBase</ref>(metaclass=abc.ABCMeta):</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Abstract<sp/>base<sp/>class<sp/>functor<sp/>for<sp/>correcting<sp/>non-linearity.</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Subclasses<sp/>must<sp/>define<sp/>``__call__``<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>set<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">variable</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>LinearityType<sp/>to<sp/>a<sp/>string<sp/>that<sp/>will<sp/>be<sp/>used<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>linearity<sp/>type<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>the<sp/>cameraGeom.Amplifier.linearityType<sp/>field.</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>All<sp/>linearity<sp/>corrections<sp/>should<sp/>be<sp/>defined<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>terms<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>additive<sp/>correction,<sp/>such<sp/>that:</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>corrected_value<sp/>=<sp/>uncorrected_value<sp/>+<sp/>f(uncorrected_value)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="510" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base_1afa9d483bd88e84ef109ede0984a10be7" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LinearityType<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>linearity<sp/>type,<sp/>a<sp/>string<sp/>used<sp/>for<sp/>AmpInfoCatalogs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@abc.abstractmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base_1a35a6c652513da5918c41f9b7ea91764d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base_1a35a6c652513da5918c41f9b7ea91764d" kindref="member">__call__</ref>(self,<sp/>image,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>non-linearity.</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>be<sp/>corrected</highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>parameter<sp/>keywords:</highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``coeffs``</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coefficient<sp/>vector<sp/>(`list`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`numpy.array`).</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``table``</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lookup<sp/>table<sp/>data<sp/>(`numpy.array`).</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``log``</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages<sp/>(`logging.Logger`).</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>:<sp/>`bool`</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`</highlight><highlight class="keyword">True</highlight><highlight class="normal">`,<sp/>a<sp/>correction<sp/>was<sp/>applied<sp/>successfully.</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuntimeError:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>linearity<sp/>type<sp/>listed<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detector<sp/>does<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>match<sp/>the<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">type.</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_lookup_table" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_lookup_table" kindref="compound">LinearizeLookupTable</ref>(<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">LinearizeBase</ref>):</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>non-linearity<sp/>with<sp/>a<sp/>persisted<sp/>lookup<sp/>table.</highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>lookup<sp/>table<sp/>consists<sp/>of<sp/>entries<sp/>such<sp/>that<sp/>given</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;coefficients&quot;</highlight><highlight class="normal"><sp/>c0,<sp/>c1:</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>each<sp/>i,j<sp/>of<sp/>image:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowInd<sp/>=<sp/>int(c0)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colInd<sp/>=<sp/>int(c1<sp/>+<sp/>uncorrImage[i,j])</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corrImage[i,j]<sp/>=<sp/>uncorrImage[i,j]<sp/>+<sp/>table[rowInd,<sp/>colInd]</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>c0:<sp/>row<sp/>index;<sp/>used<sp/>to<sp/>identify<sp/>which<sp/>row<sp/>of<sp/>the<sp/>table<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(typically<sp/>one<sp/>per<sp/>amplifier,<sp/>though<sp/>one<sp/>can<sp/>have<sp/>multiple</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplifiers<sp/>use<sp/>the<sp/>same<sp/>table)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>c1:<sp/>column<sp/>index<sp/>offset;<sp/>added<sp/>to<sp/>the<sp/>uncorrected<sp/>image<sp/>value</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>truncation;<sp/>this<sp/>supports<sp/>tables<sp/>that<sp/>can<sp/>handle</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>negative<sp/>image<sp/>values;<sp/>also,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>c1<sp/>ends<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>.5<sp/>then</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>nearest<sp/>index<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>used<sp/>instead<sp/>of<sp/>truncating<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>smaller<sp/>index</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="564" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_lookup_table_1a777461328e738d691f4d2a116b02deb1" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LinearityType<sp/>=<sp/>&quot;LookupTable&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_lookup_table_1a8656a54c7da82ae9ceebc9c1205bbf69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_lookup_table_1a8656a54c7da82ae9ceebc9c1205bbf69" kindref="member">__call__</ref>(self,<sp/>image,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>for<sp/>non-linearity.</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="569"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="572"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>be<sp/>corrected</highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>parameter<sp/>keywords:</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``coeffs``</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Columnation<sp/>vector<sp/>(`list`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`numpy.array`).</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``table``</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lookup<sp/>table<sp/>data<sp/>(`numpy.array`).</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``log``</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages<sp/>(`logging.Logger`).</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>:<sp/>`tuple`<sp/>[`bool`,<sp/>`int`]</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>a<sp/>correction<sp/>was<sp/>applied<sp/>successfully.<sp/><sp/>The</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>indicates<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>were</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncorrectable<sp/>by<sp/>being<sp/>out<sp/>of<sp/>range.</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuntimeError:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>requested<sp/>row<sp/>index<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>out<sp/>of<sp/>the<sp/>table</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds.</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="596"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOutOfRange<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="597"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowInd,<sp/>colIndOffset<sp/>=<sp/>kwargs[&apos;coeffs&apos;</highlight><highlight class="normal">][0:2]</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table<sp/>=<sp/>kwargs[</highlight><highlight class="stringliteral">&apos;table&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log<sp/>=<sp/>kwargs[</highlight><highlight class="stringliteral">&apos;log&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numTableRows<sp/>=<sp/>table.shape[0]</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowInd<sp/>=<sp/>int(rowInd)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>rowInd<sp/>&lt;<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>rowInd<sp/>&gt;<sp/>numTableRows:</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;LinearizeLookupTable<sp/>rowInd=%s<sp/>not<sp/>in<sp/>range[0,<sp/>%s)&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rowInd,<sp/>numTableRows))</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableRow<sp/>=<sp/>np.array(table[rowInd,<sp/>:],<sp/>dtype=image.getArray().dtype)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOutOfRange<sp/>+=<sp/><ref refid="namespaceapply_lookup_table" kindref="compound">applyLookupTable</ref>(image,<sp/>tableRow,<sp/>colIndOffset)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>numOutOfRange<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>log<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.warning(</highlight><highlight class="stringliteral">&quot;%s<sp/>pixels<sp/>were<sp/>out<sp/>of<sp/>range<sp/>of<sp/>the<sp/>linearization<sp/>table&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOutOfRange)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>numOutOfRange<sp/>&lt;<sp/>image.getArray().size:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>numOutOfRange</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>numOutOfRange</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_polynomial" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_polynomial" kindref="compound">LinearizePolynomial</ref>(<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">LinearizeBase</ref>):</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>non-linearity<sp/>with<sp/>a<sp/>polynomial<sp/>mode.</highlight></codeline>
<codeline lineno="622"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="623"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::</highlight></codeline>
<codeline lineno="624"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="625"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corrImage<sp/>=<sp/>uncorrImage<sp/>+<sp/>sum_i<sp/>c_i<sp/>uncorrImage^(2<sp/>+<sp/>i)</highlight></codeline>
<codeline lineno="626"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="627"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/>``c_i``<sp/>are<sp/>the<sp/>linearity<sp/>coefficients<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>each<sp/>amplifier.</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>Lower<sp/>order<sp/>coefficients<sp/>are<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>included<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>they<sp/>duplicate<sp/>other</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>calibration<sp/>parameters:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>``k0``</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>coefficient<sp/>multiplied<sp/>by<sp/>``uncorrImage**0``<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>equivalent<sp/>to</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bias<sp/>level.<sp/><sp/>Irrelevant<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>correcting<sp/>non-linearity.</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>``k1``</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>coefficient<sp/>multiplied<sp/>by<sp/>``uncorrImage**1``<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>proportional</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>gain.<sp/><sp/>Not<sp/>necessary<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>correcting<sp/>non-linearity.</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="638" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_polynomial_1a54eb833525f1f1fe32c23cd0806ed70d" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LinearityType<sp/>=<sp/>&quot;Polynomial&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_polynomial_1a881b85adb25570ddbd5c5142856d3d31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_polynomial_1a881b85adb25570ddbd5c5142856d3d31" kindref="member">__call__</ref>(self,<sp/>image,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>non-linearity.</highlight></codeline>
<codeline lineno="642"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="643"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="644"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="645"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="646"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>be<sp/>corrected</highlight></codeline>
<codeline lineno="647"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="648"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>parameter<sp/>keywords:</highlight></codeline>
<codeline lineno="649"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="650"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``coeffs``</highlight></codeline>
<codeline lineno="651"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coefficient<sp/>vector<sp/>(`list`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`numpy.array`).</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>order<sp/>of<sp/>the<sp/>polynomial<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>n,<sp/>this<sp/>list</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>have<sp/>a<sp/>length<sp/>of<sp/>n-1<sp/>(</highlight><highlight class="stringliteral">&quot;k0&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal"><sp/>are</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>needed<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>correction).</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``log``</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages<sp/>(`logging.Logger`).</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>:<sp/>`tuple`<sp/>[`bool`,<sp/>`int`]</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>a<sp/>correction<sp/>was<sp/>applied<sp/>successfully.<sp/><sp/>The</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>indicates<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>were</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncorrectable<sp/>by<sp/>being<sp/>out<sp/>of<sp/>range.</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="665"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>np.any(np.isfinite(kwargs[</highlight><highlight class="stringliteral">&apos;coeffs&apos;</highlight><highlight class="normal">])):</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>np.any(kwargs[</highlight><highlight class="stringliteral">&apos;coeffs&apos;</highlight><highlight class="normal">]):</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampArray<sp/>=<sp/>image.getArray()</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correction<sp/>=<sp/>np.zeros_like(ampArray)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>order,<sp/>coeff<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(kwargs[</highlight><highlight class="stringliteral">&apos;coeffs&apos;</highlight><highlight class="normal">],<sp/>start=2):</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correction<sp/>+=<sp/>coeff<sp/>*<sp/>np.power(ampArray,<sp/>order)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampArray<sp/>+=<sp/>correction</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_squared" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_squared" kindref="compound">LinearizeSquared</ref>(<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">LinearizeBase</ref>):</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>non-linearity<sp/>with<sp/>a<sp/>squared<sp/>model.</highlight></codeline>
<codeline lineno="681"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="682"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>corrImage<sp/>=<sp/>uncorrImage<sp/>+<sp/>c0*uncorrImage^2</highlight></codeline>
<codeline lineno="683"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="684"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/>c0<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>linearity<sp/>coefficient<sp/>0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>each<sp/>amplifier.</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="686" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_squared_1a58eb6b75dc1fefc74c4ee83a1e767fc2" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LinearityType<sp/>=<sp/>&quot;Squared&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_squared_1ab0bedf915bc9b2cfa2b62d88755452dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_squared_1ab0bedf915bc9b2cfa2b62d88755452dd" kindref="member">__call__</ref>(self,<sp/>image,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>for<sp/>non-linearity.</highlight></codeline>
<codeline lineno="690"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="691"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="692"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="693"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="694"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>be<sp/>corrected</highlight></codeline>
<codeline lineno="695"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="696"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>parameter<sp/>keywords:</highlight></codeline>
<codeline lineno="697"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="698"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``coeffs``</highlight></codeline>
<codeline lineno="699"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coefficient<sp/>vector<sp/>(`list`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`numpy.array`).</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``log``</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages<sp/>(`logging.Logger`).</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>:<sp/>`tuple`<sp/>[`bool`,<sp/>`int`]</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>a<sp/>correction<sp/>was<sp/>applied<sp/>successfully.<sp/><sp/>The</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>indicates<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>were</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncorrectable<sp/>by<sp/>being<sp/>out<sp/>of<sp/>range.</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="710"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="711"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqCoeff<sp/>=<sp/>kwargs[&apos;coeffs&apos;</highlight><highlight class="normal">][0]</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sqCoeff<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampArr<sp/>=<sp/>image.getArray()</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampArr<sp/>*=<sp/>(1<sp/>+<sp/>sqCoeff*ampArr)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_spline" kindref="compound">LinearizeSpline</ref>(<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">LinearizeBase</ref>):</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>non-linearity<sp/>with<sp/>a<sp/>spline<sp/>model.</highlight></codeline>
<codeline lineno="722"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="723"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>corrImage<sp/>=<sp/>uncorrImage<sp/>-<sp/>Spline(coeffs,<sp/>uncorrImage)</highlight></codeline>
<codeline lineno="724"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="725"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="726"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="727"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="728"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>spline<sp/>fit<sp/>calculates<sp/>a<sp/>correction<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>a<sp/>function<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>linear<sp/>flux<sp/>term.<sp/><sp/>Because<sp/>of<sp/>this,<sp/>the<sp/>correction<sp/>needs</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>to<sp/>be<sp/>subtracted<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>the<sp/>observed<sp/>flux.</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="733" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_spline_1ad24df6739bcb62f1eee28dd94e438256" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LinearityType<sp/>=<sp/>&quot;Spline&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_spline_1a9af66d7cf10ad3133ab37731eb706c9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_spline_1a9af66d7cf10ad3133ab37731eb706c9e" kindref="member">__call__</ref>(self,<sp/>image,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Correct<sp/>for<sp/>non-linearity.</highlight></codeline>
<codeline lineno="737"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="738"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="741"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>be<sp/>corrected</highlight></codeline>
<codeline lineno="742"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="743"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>parameter<sp/>keywords:</highlight></codeline>
<codeline lineno="744"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="745"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``coeffs``</highlight></codeline>
<codeline lineno="746"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coefficient<sp/>vector<sp/>(`list`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`numpy.array`).</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``log``</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages<sp/>(`logging.Logger`).</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>:<sp/>`tuple`<sp/>[`bool`,<sp/>`int`]</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>a<sp/>correction<sp/>was<sp/>applied<sp/>successfully.<sp/><sp/>The</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>indicates<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>were</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncorrectable<sp/>by<sp/>being<sp/>out<sp/>of<sp/>range.</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="757"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splineCoeff<sp/>=<sp/>kwargs[&apos;coeffs&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centers,<sp/>values<sp/>=<sp/>np.split(splineCoeff,<sp/>2)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>spline<sp/>is<sp/>not<sp/>anchored<sp/>at<sp/>zero,<sp/>remove<sp/>the<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>found<sp/>at<sp/>the<sp/>lowest<sp/>flux<sp/>available,<sp/>and<sp/>add<sp/>an<sp/>anchor<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>flux=0.0<sp/>if<sp/>there&apos;s<sp/>no<sp/>entry<sp/>at<sp/>that<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>values[0]<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>values[0]</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>-=<sp/>offset</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>centers[0]<sp/>!=<sp/>0.0:</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centers<sp/>=<sp/>np.concatenate(([0.0],<sp/>centers))</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>=<sp/>np.concatenate(([0.0],<sp/>values))</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp<sp/>=<sp/>afwMath.makeInterpolate(centers.tolist(),<sp/>values.tolist(),</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afwMath.stringToInterpStyle(</highlight><highlight class="stringliteral">&quot;AKIMA_SPLINE&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampArr<sp/>=<sp/>image.getArray()</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>interp.interpolate(ampArr.flatten())</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampArr<sp/>-=<sp/>np.array(delta).reshape(ampArr.shape)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_proportional" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_proportional" kindref="compound">LinearizeProportional</ref>(<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">LinearizeBase</ref>):</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Do<sp/>not<sp/>correct<sp/>non-linearity.</highlight></codeline>
<codeline lineno="781"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="782" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_proportional_1aba11f5752c7433a60152242484870c92" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LinearityType<sp/>=<sp/>&quot;Proportional&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_proportional_1ad846b14dec12fd52510b4f132c1586ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_proportional_1ad846b14dec12fd52510b4f132c1586ae" kindref="member">__call__</ref>(self,<sp/>image,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Do<sp/>not<sp/>correct<sp/>for<sp/>non-linearity.</highlight></codeline>
<codeline lineno="786"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="787"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="788"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="789"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="790"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>be<sp/>corrected</highlight></codeline>
<codeline lineno="791"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="792"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>parameter<sp/>keywords:</highlight></codeline>
<codeline lineno="793"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="794"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``coeffs``</highlight></codeline>
<codeline lineno="795"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coefficient<sp/>vector<sp/>(`list`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`numpy.array`).</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``log``</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages<sp/>(`logging.Logger`).</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>:<sp/>`tuple`<sp/>[`bool`,<sp/>`int`]</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>a<sp/>correction<sp/>was<sp/>applied<sp/>successfully.<sp/><sp/>The</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>indicates<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>were</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncorrectable<sp/>by<sp/>being<sp/>out<sp/>of<sp/>range.</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="806"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_none" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_none" kindref="compound">LinearizeNone</ref>(<ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_base" kindref="compound">LinearizeBase</ref>):</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Do<sp/>not<sp/>correct<sp/>non-linearity.</highlight></codeline>
<codeline lineno="811"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="812" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_none_1ac7c95ee7c7992afcd2726e5b6ca7f9f7" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LinearityType<sp/>=<sp/>&quot;None&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814" refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_none_1ab4354cc625be0b26bcd9877c2f37eeb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearize_none_1ab4354cc625be0b26bcd9877c2f37eeb8" kindref="member">__call__</ref>(self,<sp/>image,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Do<sp/>not<sp/>correct<sp/>for<sp/>non-linearity.</highlight></codeline>
<codeline lineno="816"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="817"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="818"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="819"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="820"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>be<sp/>corrected</highlight></codeline>
<codeline lineno="821"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs<sp/>:<sp/>`dict`</highlight></codeline>
<codeline lineno="822"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>of<sp/>parameter<sp/>keywords:</highlight></codeline>
<codeline lineno="823"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="824"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``coeffs``</highlight></codeline>
<codeline lineno="825"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coefficient<sp/>vector<sp/>(`list`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`numpy.array`).</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``log``</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages<sp/>(`logging.Logger`).</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>:<sp/>`tuple`<sp/>[`bool`,<sp/>`int`]</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>a<sp/>correction<sp/>was<sp/>applied<sp/>successfully.<sp/><sp/>The</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>indicates<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>were</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncorrectable<sp/>by<sp/>being<sp/>out<sp/>of<sp/>range.</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="836"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
    </programlisting>
    <location file="python/lsst/ip/isr/linearize.py"/>
  </compounddef>
</doxygen>
