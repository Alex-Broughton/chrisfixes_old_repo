<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance" kind="class" language="Python" prot="public">
    <compoundname>lsst::ip::isr::calibType::IsrProvenance</compoundname>
    <basecompoundref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib" prot="public" virt="non-virtual">lsst.ip.isr.calibType.IsrCalib</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a26121fefee3c5dd45838e7389197ef3d" prot="private" static="yes" mutable="no">
        <type>string</type>
        <definition>string lsst::ip::isr.calibType.IsrProvenance::_OBSTYPE</definition>
        <argsstring></argsstring>
        <name>_OBSTYPE</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance._OBSTYPE</qualifiedname>
        <initializer>=  &quot;IsrProvenance&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="705" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="705" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a9b27242e04383959352b5e60c2eb3211" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.calibType.IsrProvenance::calibType</definition>
        <argsstring></argsstring>
        <name>calibType</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.calibType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="709" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a1511f3065b330bf70464156db2e5b25f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.calibType.IsrProvenance::dimensions</definition>
        <argsstring></argsstring>
        <name>dimensions</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.dimensions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="710" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a4d831ffcb8b651d8a52d3a6ba4a0abb8" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.calibType.IsrProvenance::dataIdList</definition>
        <argsstring></argsstring>
        <name>dataIdList</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.dataIdList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="711" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="711" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a113b1b5d3fc3be06a715519b989b6deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.__init__</definition>
        <argsstring>(self, calibType=&quot;unknown&quot;, **kwargs)</argsstring>
        <name>__init__</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.__init__</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a8b0c7d628ed5e5b429f66ec5b2b4f25b">__init__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a9b27242e04383959352b5e60c2eb3211" kindref="member">calibType</ref></type>
          <defname>calibType</defname>
          <defval>&quot;unknown&quot;</defval>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="707" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="708" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a63576065c50dcbae25459e18a049fc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.__str__</definition>
        <argsstring>(self)</argsstring>
        <name>__str__</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.__str__</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a0a4c5fe4f28180e3d63b49553d7a99af">__str__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="717" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="717" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a6d138e4604232e690628834af33157cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.__eq__</definition>
        <argsstring>(self, other)</argsstring>
        <name>__eq__</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.__eq__</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a04d9cc62ad2ccb747e13ed5a5a728b8b">__eq__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>other</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Calibration equivalence.

Running ``calib.log.setLevel(0)`` enables debug statements to
identify problematic fields.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="720" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a564f6ea21ca8cbb2394708d643fd032f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.updateMetadata</definition>
        <argsstring>(self, setDate=False, **kwargs)</argsstring>
        <name>updateMetadata</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.updateMetadata</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a800537ed1777875f9f9fd973a83c3809">updateMetadata</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>setDate</type>
          <defname>setDate</defname>
          <defval>False</defval>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Update calibration metadata.

Parameters
----------
setDate : `bool`, optional
    Update the ``CALIBDATE`` fields in the metadata to the current
    time. Defaults to False.
kwargs : `dict` or `collections.abc.Mapping`, optional
    Other keyword parameters to set in the metadata.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="723" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="723" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1af31bde205304d237ba1ecda3720671f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.fromDataIds</definition>
        <argsstring>(self, dataIdList)</argsstring>
        <name>fromDataIds</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.fromDataIds</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a4d831ffcb8b651d8a52d3a6ba4a0abb8" kindref="member">dataIdList</ref></type>
          <defname>dataIdList</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Update provenance from dataId List.

Parameters
----------
dataIdList : `list` [`lsst.daf.butler.DataId`]
    List of dataIds used in generating this calibration.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="737" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="737" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a756e716ca6a51aa01eb1cbbddcc9ebfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.fromTable</definition>
        <argsstring>(cls, tableList)</argsstring>
        <name>fromTable</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.fromTable</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1403d6fec5026193600341be1a426533">fromTable</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>tableList</type>
          <defname>tableList</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct provenance from table list.

Parameters
----------
tableList : `list` [`lsst.afw.table.Table`]
    List of tables to construct the provenance from.

Returns
-------
provenance : `lsst.ip.isr.IsrProvenance`
    The provenance defined in the tables.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="752" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="752" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a1869e1c7ff04ad469d13b47b106a5561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.fromDict</definition>
        <argsstring>(cls, dictionary)</argsstring>
        <name>fromDict</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.fromDict</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a817599a7eef2221ba3908296dab05347">fromDict</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>dictionary</type>
          <defname>dictionary</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct provenance from a dictionary.

Parameters
----------
dictionary : `dict`
    Dictionary of provenance parameters.

Returns
-------
provenance : `lsst.ip.isr.IsrProvenance`
    The provenance defined in the tables.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="788" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="788" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1ad2aaad409a3888aa95a31d012974bff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.toDict</definition>
        <argsstring>(self)</argsstring>
        <name>toDict</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.toDict</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1aab4a381103b94dbea2acb727184db72f">toDict</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Return a dictionary containing the provenance information.

Returns
-------
dictionary : `dict`
    Dictionary of provenance.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="817" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="817" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a71fd0bf7f4ed41ed2f51fe2b379b57c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.calibType.IsrProvenance.toTable</definition>
        <argsstring>(self)</argsstring>
        <name>toTable</name>
        <qualifiedname>lsst::ip::isr.calibType.IsrProvenance.toTable</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a247f0c08c122d6c0da72f764b5e4c466">toTable</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Return a list of tables containing the provenance.

This seems inefficient and slow, so this may not be the best
way to store the data.

Returns
-------
tableList : `list` [`lsst.afw.table.Table`]
    List of tables containing the provenance information
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/calibType.py" line="841" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="841" bodyend="861"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Class for the provenance of data used to construct calibration.

Provenance is not really a calibration, but we would like to
record this when constructing the calibration, and it provides an
example of the base calibration class.

Parameters
----------
instrument : `str`, optional
    Name of the instrument the data was taken with.
calibType : `str`, optional
    Type of calibration this provenance was generated for.
detectorName : `str`, optional
    Name of the detector this calibration is for.
detectorSerial : `str`, optional
    Identifier for the detector.</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>abc::ABC</label>
      </node>
      <node id="1">
        <label>lsst.ip.isr.calibType.IsrProvenance</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>lsst.ip.isr.calibType.IsrCalib</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>abc::ABC</label>
      </node>
      <node id="1">
        <label>lsst.ip.isr.calibType.IsrProvenance</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>lsst.ip.isr.calibType.IsrCalib</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="python/lsst/ip/isr/calibType.py" line="686" column="1" bodyfile="python/lsst/ip/isr/calibType.py" bodystart="686" bodyend="861"/>
    <listofallmembers>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a6d138e4604232e690628834af33157cc" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>__eq__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a113b1b5d3fc3be06a715519b989b6deb" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>__init__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a63576065c50dcbae25459e18a049fc8d" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>__str__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a26121fefee3c5dd45838e7389197ef3d" prot="private" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>_OBSTYPE</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a9b27242e04383959352b5e60c2eb3211" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>calibType</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a4d831ffcb8b651d8a52d3a6ba4a0abb8" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>dataIdList</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a1511f3065b330bf70464156db2e5b25f" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>dimensions</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1af31bde205304d237ba1ecda3720671f4" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>fromDataIds</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a1869e1c7ff04ad469d13b47b106a5561" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>fromDict</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a756e716ca6a51aa01eb1cbbddcc9ebfb" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>fromTable</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1ad2aaad409a3888aa95a31d012974bff0" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>toDict</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a71fd0bf7f4ed41ed2f51fe2b379b57c8" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>toTable</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_provenance_1a564f6ea21ca8cbb2394708d643fd032f" prot="public" virt="non-virtual"><scope>lsst::ip::isr::calibType::IsrProvenance</scope><name>updateMetadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
