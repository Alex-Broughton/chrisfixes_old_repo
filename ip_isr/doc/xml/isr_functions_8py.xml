<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="isr_functions_8py" kind="file" language="Python">
    <compoundname>isrFunctions.py</compoundname>
    <innernamespace refid="namespacelsst">lsst</innernamespace>
    <innernamespace refid="namespacelsst_1_1ip">lsst::ip</innernamespace>
    <innernamespace refid="namespacelsst_1_1ip_1_1isr">lsst::ip::isr</innernamespace>
    <innernamespace refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions">lsst::ip::isr::isrFunctions</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LSST<sp/>Data<sp/>Management<sp/>System</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2008,<sp/>2009,<sp/>2010<sp/>LSST<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LSST<sp/>Project<sp/>(http://www.lsst.org/).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>LSST<sp/>License<sp/>Statement<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>see<sp/>&lt;http://www.lsstcorp.org/LegalNotices/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">__all__<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;applyGains&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;attachTransmissionCurve&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;biasCorrection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;brighterFatterCorrection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;checkFilter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;countMaskedPixels&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;createPsf&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;darkCorrection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;flatCorrection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fluxConservingBrighterFatterCorrection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gainContext&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;getPhysicalFilter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;growMasks&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;illuminationCorrection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;interpolateDefectList&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;interpolateFromMask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;makeThresholdMask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;saturationCorrection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;setBadRegions&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;transferFlux&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;transposeMaskedImage&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;trimToMatchCalibBBox&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;updateVariance&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;widenSaturationTrails&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48"><highlight class="normal">]</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1geom" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/geom/g3f8e1907dc+7442544851/doc/geom.tag">lsst.geom</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1afw_1_1image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>afwImage</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1afw_1_1detection" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.detection</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>afwDetection</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1afw_1_1math" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.math</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>afwMath</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1meas_1_1algorithms" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/meas_algorithms/gf28172b03b+14260db065/doc/meas_algorithms.tag">lsst.meas.algorithms</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>measAlg</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1afw_1_1camera_geom" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.cameraGeom</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>camGeom</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacelsst_1_1meas_1_1algorithms_1_1detection" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/meas_algorithms/gf28172b03b+14260db065/doc/meas_algorithms.tag">lsst.meas.algorithms.detection</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>SourceDetectionTask</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>contextlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>contextmanager</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.defects<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Defects</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a9308e20b72c5e5ce6310fd3780b3cb38" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a9308e20b72c5e5ce6310fd3780b3cb38" kindref="member">createPsf</ref>(fwhm):</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Make<sp/>a<sp/>double<sp/>Gaussian<sp/>PSF.</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fwhm<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FWHM<sp/>of<sp/>double<sp/>Gaussian<sp/>smoothing<sp/>kernel.</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>psf<sp/>:<sp/>`<ref refid="classlsst_1_1meas_1_1algorithms_1_1_double_gaussian_psf" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/meas_algorithms/gf28172b03b+14260db065/doc/meas_algorithms.tag">lsst.meas.algorithms.DoubleGaussianPsf</ref>`</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>created<sp/>smoothing<sp/>kernel.</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ksize<sp/>=<sp/>4*int(fwhm)<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>measAlg.DoubleGaussianPsf(ksize,<sp/>ksize,<sp/>fwhm/(2*math.sqrt(2*math.log(2))))</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ad9a59b7ad1bed0e1048bd1e4ca6dfb5f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ad9a59b7ad1bed0e1048bd1e4ca6dfb5f" kindref="member">transposeMaskedImage</ref>(maskedImage):</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Make<sp/>a<sp/>transposed<sp/>copy<sp/>of<sp/>a<sp/>masked<sp/>image.</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>transposed<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>transposed<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>image.</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>transposed<sp/>=<sp/>maskedImage.Factory(<ref refid="classlsst_1_1geom_1_1_extent" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/geom/g3f8e1907dc+7442544851/doc/geom.tag">lsst.geom.Extent2I</ref>(maskedImage.getHeight(),<sp/>maskedImage.getWidth()))</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>transposed.getImage().getArray()[:]<sp/>=<sp/>maskedImage.getImage().getArray().T</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>transposed.getMask().getArray()[:]<sp/>=<sp/>maskedImage.getMask().getArray().T</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>transposed.getVariance().getArray()[:]<sp/>=<sp/>maskedImage.getVariance().getArray().T</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transposed</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a3da23947a7ecd2ef895d6cb23bd8c36f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a3da23947a7ecd2ef895d6cb23bd8c36f" kindref="member">interpolateDefectList</ref>(maskedImage,<sp/>defectList,<sp/>fwhm,<sp/>fallbackValue=None):</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Interpolate<sp/>over<sp/>defects<sp/>specified<sp/>in<sp/>a<sp/>defect<sp/>list.</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>defectList<sp/>:<sp/>`lsst.meas.algorithms.Defects`</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>defects<sp/>to<sp/>interpolate<sp/>over.</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fwhm<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FWHM<sp/>of<sp/>double<sp/>Gaussian<sp/>smoothing<sp/>kernel.</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fallbackValue<sp/>:<sp/>scalar,<sp/>optional</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fallback<sp/>value<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>an<sp/>interpolated<sp/>value<sp/>cannot<sp/>be<sp/>determined.</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>then<sp/>the<sp/>clipped<sp/>mean<sp/>of<sp/>the<sp/>image<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>used.</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>psf<sp/>=<sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a9308e20b72c5e5ce6310fd3780b3cb38" kindref="member">createPsf</ref>(fwhm)</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>fallbackValue<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fallbackValue<sp/>=<sp/>afwMath.makeStatistics(maskedImage.getImage(),<sp/>afwMath.MEANCLIP).getValue()</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;INTRP&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>maskedImage.getMask().getMaskPlaneDict():</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage.getMask().addMaskPlane(</highlight><highlight class="stringliteral">&apos;INTRP&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>measAlg.interpolateOverDefects(maskedImage,<sp/>psf,<sp/>defectList,<sp/>fallbackValue,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maskedImage</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a9e6fabc7749219c7be18eb6fe3420dd1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">makeThresholdMask(maskedImage,<sp/>threshold,<sp/>growFootprints=1,<sp/>maskName=&apos;SAT&apos;):</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Mask<sp/>pixels<sp/>based<sp/>on<sp/>threshold<sp/>detection.</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.<sp/><sp/>Only<sp/>the<sp/>mask<sp/>plane<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>updated.</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>threshold<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detection<sp/>threshold.</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>growFootprints<sp/>:<sp/>scalar,<sp/>optional</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>pixels<sp/>to<sp/>grow<sp/>footprints<sp/>of<sp/>detected<sp/>regions.</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>maskName<sp/>:<sp/>str,<sp/>optional</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>plane<sp/>name,<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>list<sp/>of<sp/>names<sp/>to<sp/>convert</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>defectList<sp/>:<sp/>`lsst.meas.algorithms.Defects`</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Defect<sp/>list<sp/>constructed<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pixels<sp/>above<sp/>the<sp/>threshold.</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>saturated<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>thresh<sp/>=<sp/>afwDetection.Threshold(threshold)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>=<sp/>afwDetection.FootprintSet(maskedImage,<sp/>thresh)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>growFootprints<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>=<sp/>afwDetection.FootprintSet(fs,<sp/>rGrow=growFootprints,<sp/>isotropic=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>fpList<sp/>=<sp/>fs.getFootprints()</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>set<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>maskedImage.getMask()</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmask<sp/>=<sp/>mask.getPlaneBitMask(maskName)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>afwDetection.setMaskFromFootprintList(mask,<sp/>fpList,<sp/>bitmask)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Defects.fromFootprintList(fpList)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a30095386969ceb03c705b1e6fa22c70d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a30095386969ceb03c705b1e6fa22c70d" kindref="member">growMasks</ref>(mask,<sp/>radius=0,<sp/>maskNameList=[&apos;BAD&apos;],<sp/>maskValue=&quot;BAD&quot;):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Grow<sp/>a<sp/>mask<sp/>by<sp/>an<sp/>amount<sp/>and<sp/>add<sp/>to<sp/>the<sp/>requested<sp/>plane.</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>mask<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_mask" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Mask</ref>`</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>image<sp/>to<sp/>process.</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>radius<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amount<sp/>to<sp/>grow<sp/>the<sp/>mask.</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskNameList<sp/>:<sp/>`str`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>`list`<sp/>[`str`]</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>names<sp/>that<sp/>should<sp/>be<sp/>grown.</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>maskValue<sp/>:<sp/>`str`</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>plane<sp/>to<sp/>assign<sp/>the<sp/>newly<sp/>masked<sp/>pixels<sp/>to.</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>radius<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thresh<sp/>=<sp/>afwDetection.Threshold(mask.getPlaneBitMask(maskNameList),<sp/>afwDetection.Threshold.BITMASK)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpSet<sp/>=<sp/>afwDetection.FootprintSet(mask,<sp/>thresh)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpSet<sp/>=<sp/>afwDetection.FootprintSet(fpSet,<sp/>rGrow=radius,<sp/>isotropic=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpSet.setMask(mask,<sp/>maskValue)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ad1e338da868ef16756b6c221e64691ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ad1e338da868ef16756b6c221e64691ad" kindref="member">interpolateFromMask</ref>(maskedImage,<sp/>fwhm,<sp/>growSaturatedFootprints=1,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskNameList=[&apos;SAT&apos;],<sp/>fallbackValue=None):</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Interpolate<sp/>over<sp/>defects<sp/>identified<sp/>by<sp/>a<sp/>particular<sp/>set<sp/>of<sp/>mask<sp/>planes.</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fwhm<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FWHM<sp/>of<sp/>double<sp/>Gaussian<sp/>smoothing<sp/>kernel.</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>growSaturatedFootprints<sp/>:<sp/>scalar,<sp/>optional</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>pixels<sp/>to<sp/>grow<sp/>footprints<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>saturated<sp/>pixels.</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>maskNameList<sp/>:<sp/>`List`<sp/>of<sp/>`str`,<sp/>optional</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>plane<sp/>name.</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>fallbackValue<sp/>:<sp/>scalar,<sp/>optional</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>of<sp/>last<sp/>resort<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>interpolation.</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>maskedImage.getMask()</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>growSaturatedFootprints<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;SAT&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>maskNameList:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>we<sp/>are<sp/>interpolating<sp/>over<sp/>an<sp/>area<sp/>larger<sp/>than<sp/>the<sp/>original<sp/>masked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>region,<sp/>we<sp/>need<sp/>to<sp/>expand<sp/>the<sp/>original<sp/>mask<sp/>bit<sp/>to<sp/>the<sp/>full<sp/>area<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>explain<sp/>why<sp/>we<sp/>interpolated<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a30095386969ceb03c705b1e6fa22c70d" kindref="member">growMasks</ref>(mask,<sp/>radius=growSaturatedFootprints,<sp/>maskNameList=[</highlight><highlight class="stringliteral">&apos;SAT&apos;</highlight><highlight class="normal">],<sp/>maskValue=</highlight><highlight class="stringliteral">&quot;SAT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>thresh<sp/>=<sp/>afwDetection.Threshold(mask.getPlaneBitMask(maskNameList),<sp/>afwDetection.Threshold.BITMASK)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>fpSet<sp/>=<sp/>afwDetection.FootprintSet(mask,<sp/>thresh)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>defectList<sp/>=<sp/>Defects.fromFootprintList(fpSet.getFootprints())</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a3da23947a7ecd2ef895d6cb23bd8c36f" kindref="member">interpolateDefectList</ref>(maskedImage,<sp/>defectList,<sp/>fwhm,<sp/>fallbackValue=fallbackValue)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maskedImage</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a37ab3d18909c2c12013cf5c16b28ca85" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a37ab3d18909c2c12013cf5c16b28ca85" kindref="member">saturationCorrection</ref>(maskedImage,<sp/>saturation,<sp/>fwhm,<sp/>growFootprints=1,<sp/>interpolate=True,<sp/>maskName=&apos;SAT&apos;,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fallbackValue=None):</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Mark<sp/>saturated<sp/>pixels<sp/>and<sp/>optionally<sp/>interpolate<sp/>over<sp/>them</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>saturation<sp/><sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Saturation<sp/>level<sp/>used<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>the<sp/>detection<sp/>threshold.</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>fwhm<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FWHM<sp/>of<sp/>double<sp/>Gaussian<sp/>smoothing<sp/>kernel.</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>growFootprints<sp/>:<sp/>scalar,<sp/>optional</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>pixels<sp/>to<sp/>grow<sp/>footprints<sp/>of<sp/>detected<sp/>regions.</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>interpolate<sp/>:<sp/>Bool,<sp/>optional</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>saturated<sp/>pixels<sp/>are<sp/>interpolated<sp/>over.</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>maskName<sp/>:<sp/>str,<sp/>optional</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>plane<sp/>name.</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>fallbackValue<sp/>:<sp/>scalar,<sp/>optional</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>of<sp/>last<sp/>resort<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>interpolation.</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>defectList<sp/>=<sp/>makeThresholdMask(</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage=maskedImage,</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threshold=saturation,</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growFootprints=growFootprints,</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskName=maskName,</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>interpolate:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a3da23947a7ecd2ef895d6cb23bd8c36f" kindref="member">interpolateDefectList</ref>(maskedImage,<sp/>defectList,<sp/>fwhm,<sp/>fallbackValue=fallbackValue)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maskedImage</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ab0bcdeb1e2dd956b34e4d96c3743d6e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ab0bcdeb1e2dd956b34e4d96c3743d6e3" kindref="member">trimToMatchCalibBBox</ref>(rawMaskedImage,<sp/>calibMaskedImage):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Compute<sp/>number<sp/>of<sp/>edge<sp/>trim<sp/>pixels<sp/>to<sp/>match<sp/>the<sp/>calibration<sp/>data.</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Use<sp/>the<sp/>dimension<sp/>difference<sp/>between<sp/>the<sp/>raw<sp/>exposure<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>calibration<sp/>exposure<sp/>to<sp/>compute<sp/>the<sp/>edge<sp/>trim<sp/>pixels.<sp/><sp/>This<sp/>trim</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>applied<sp/>symmetrically,<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>the<sp/>same<sp/>number<sp/>of<sp/>pixels<sp/>masked<sp/>on</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>each<sp/>side.</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>rawMaskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>trim.</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>calibMaskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calibration<sp/>image<sp/>to<sp/>draw<sp/>new<sp/>bounding<sp/>box<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>replacementMaskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``rawMaskedImage``<sp/>trimmed<sp/>to<sp/>the<sp/>appropriate<sp/>size.</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>``rawMaskedImage``<sp/>cannot<sp/>be<sp/>symmetrically<sp/>trimmed<sp/>to</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>``calibMaskedImage``.</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nx,<sp/>ny<sp/>=<sp/>rawMaskedImage.getBBox().getDimensions()<sp/>-<sp/>calibMaskedImage.getBBox().getDimensions()</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nx<sp/>!=<sp/>ny:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Raw<sp/>and<sp/>calib<sp/>maskedImages<sp/>are<sp/>trimmed<sp/>differently<sp/>in<sp/>X<sp/>and<sp/>Y.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nx<sp/>%<sp/>2<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Calibration<sp/>maskedImage<sp/>is<sp/>trimmed<sp/>unevenly<sp/>in<sp/>X.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nx<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Calibration<sp/>maskedImage<sp/>is<sp/>larger<sp/>than<sp/>raw<sp/>data.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>nEdge<sp/>=<sp/>nx//2</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nEdge<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacementMaskedImage<sp/>=<sp/>rawMaskedImage[nEdge:-nEdge,<sp/>nEdge:-nEdge,<sp/>afwImage.LOCAL]</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceDetectionTask.setEdgeBits(</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawMaskedImage,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacementMaskedImage.getBBox(),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawMaskedImage.getMask().getPlaneBitMask(</highlight><highlight class="stringliteral">&quot;EDGE&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacementMaskedImage<sp/>=<sp/>rawMaskedImage</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>replacementMaskedImage</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a1e15ff015a0ebbf57114e8cd3d20d5ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a1e15ff015a0ebbf57114e8cd3d20d5ea" kindref="member">biasCorrection</ref>(maskedImage,<sp/>biasMaskedImage,<sp/>trimToFit=False):</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Apply<sp/>bias<sp/>correction<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.<sp/><sp/>The<sp/>image<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>modified<sp/>by<sp/>this<sp/>method.</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>biasMaskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bias<sp/>image<sp/>of<sp/>the<sp/>same<sp/>size<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>``maskedImage``</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>trimToFit<sp/>:<sp/>`Bool`,<sp/>optional</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>raw<sp/>data<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>symmetrically<sp/>trimmed<sp/>to<sp/>match</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>size.</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>``maskedImage``<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>``biasMaskedImage``<sp/>do<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>have</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>size.</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>trimToFit:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage<sp/>=<sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ab0bcdeb1e2dd956b34e4d96c3743d6e3" kindref="member">trimToMatchCalibBBox</ref>(maskedImage,<sp/>biasMaskedImage)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>maskedImage.getBBox(afwImage.LOCAL)<sp/>!=<sp/>biasMaskedImage.getBBox(afwImage.LOCAL):</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;maskedImage<sp/>bbox<sp/>%s<sp/>!=<sp/>biasMaskedImage<sp/>bbox<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(maskedImage.getBBox(afwImage.LOCAL),<sp/>biasMaskedImage.getBBox(afwImage.LOCAL)))</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>maskedImage<sp/>-=<sp/>biasMaskedImage</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a37a205858f440f4bc245ec87cf1dc38a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a37a205858f440f4bc245ec87cf1dc38a" kindref="member">darkCorrection</ref>(maskedImage,<sp/>darkMaskedImage,<sp/>expScale,<sp/>darkScale,<sp/>invert=False,<sp/>trimToFit=False):</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Apply<sp/>dark<sp/>correction<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.<sp/><sp/>The<sp/>image<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>modified<sp/>by<sp/>this<sp/>method.</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>darkMaskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dark<sp/>image<sp/>of<sp/>the<sp/>same<sp/>size<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>``maskedImage``.</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>expScale<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dark<sp/>exposure<sp/>time<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>``maskedImage``.</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>darkScale<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dark<sp/>exposure<sp/>time<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>``darkMaskedImage``.</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>invert<sp/>:<sp/>`Bool`,<sp/>optional</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>re-add<sp/>the<sp/>dark<sp/>to<sp/>an<sp/>already<sp/>corrected<sp/>image.</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>trimToFit<sp/>:<sp/>`Bool`,<sp/>optional</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>raw<sp/>data<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>symmetrically<sp/>trimmed<sp/>to<sp/>match</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>size.</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>``maskedImage``<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>``darkMaskedImage``<sp/>do<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>have</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>size.</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>The<sp/>dark<sp/>correction<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>applied<sp/>by<sp/>calculating:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage<sp/>-=<sp/>dark<sp/>*<sp/>expScaling<sp/>/<sp/>darkScaling</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>trimToFit:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage<sp/>=<sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ab0bcdeb1e2dd956b34e4d96c3743d6e3" kindref="member">trimToMatchCalibBBox</ref>(maskedImage,<sp/>darkMaskedImage)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>maskedImage.getBBox(afwImage.LOCAL)<sp/>!=<sp/>darkMaskedImage.getBBox(afwImage.LOCAL):</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;maskedImage<sp/>bbox<sp/>%s<sp/>!=<sp/>darkMaskedImage<sp/>bbox<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(maskedImage.getBBox(afwImage.LOCAL),<sp/>darkMaskedImage.getBBox(afwImage.LOCAL)))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>expScale<sp/>/<sp/>darkScale</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>invert:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage.scaledMinus(scale,<sp/>darkMaskedImage)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage.scaledPlus(scale,<sp/>darkMaskedImage)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ac190b76df1f722c0b3a9bcf738bdc62e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ac190b76df1f722c0b3a9bcf738bdc62e" kindref="member">updateVariance</ref>(maskedImage,<sp/>gain,<sp/>readNoise):</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Set<sp/>the<sp/>variance<sp/>plane<sp/>based<sp/>on<sp/>the<sp/>image<sp/>plane.</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.<sp/><sp/>The<sp/>variance<sp/>plane<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>modified.</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>gain<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>amplifier<sp/>gain<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>electrons/ADU.</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>readNoise<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>amplifier<sp/>read<sp/>nmoise<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ADU/pixel.</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>=<sp/>maskedImage.getVariance()</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var[:]<sp/>=<sp/>maskedImage.getImage()</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>/=<sp/>gain</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>readNoise**2</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="390" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ae01e57d680a6f89c73f01e9ccf822963" refkind="member"><highlight class="stringliteral"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ae01e57d680a6f89c73f01e9ccf822963" kindref="member">flatCorrection</ref>(maskedImage,<sp/>flatMaskedImage,<sp/>scalingType,<sp/>userScale=1.0,<sp/>invert=False,<sp/>trimToFit=False):</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Apply<sp/>flat<sp/>correction<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.<sp/><sp/>The<sp/>image<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>modified.</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>flatMaskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flat<sp/>image<sp/>of<sp/>the<sp/>same<sp/>size<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>``maskedImage``</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>scalingType<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flat<sp/>scale<sp/>computation<sp/>method.<sp/><sp/>Allowed<sp/>values<sp/>are<sp/></highlight><highlight class="stringliteral">&apos;MEAN&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MEDIAN&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;USER&apos;</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>userScale<sp/>:<sp/>scalar,<sp/>optional</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scale<sp/>to<sp/>use<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>``scalingType=</highlight><highlight class="stringliteral">&apos;USER&apos;</highlight><highlight class="normal">``.</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>invert<sp/>:<sp/>`Bool`,<sp/>optional</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>unflatten<sp/>an<sp/>already<sp/>flattened<sp/>image.</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>trimToFit<sp/>:<sp/>`Bool`,<sp/>optional</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>raw<sp/>data<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>symmetrically<sp/>trimmed<sp/>to<sp/>match</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>size.</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>``maskedImage``<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>``flatMaskedImage``<sp/>do<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>have</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>size<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>``scalingType``<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>an<sp/>allowed<sp/>value.</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>trimToFit:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage<sp/>=<sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ab0bcdeb1e2dd956b34e4d96c3743d6e3" kindref="member">trimToMatchCalibBBox</ref>(maskedImage,<sp/>flatMaskedImage)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>maskedImage.getBBox(afwImage.LOCAL)<sp/>!=<sp/>flatMaskedImage.getBBox(afwImage.LOCAL):</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;maskedImage<sp/>bbox<sp/>%s<sp/>!=<sp/>flatMaskedImage<sp/>bbox<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(maskedImage.getBBox(afwImage.LOCAL),<sp/>flatMaskedImage.getBBox(afwImage.LOCAL)))</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Figure<sp/>out<sp/>scale<sp/>from<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ideally<sp/>the<sp/>flats<sp/>are<sp/>normalized<sp/>by<sp/>the<sp/>calibration<sp/>product<sp/>pipeline,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>but<sp/>this<sp/>allows<sp/>some<sp/>flexibility<sp/>in<sp/>the<sp/>case<sp/>that<sp/>the<sp/>flat<sp/>is<sp/>created<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>some<sp/>other<sp/>mechanism.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>scalingType<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;MEAN&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;MEDIAN&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalingType<sp/>=<sp/>afwMath.stringToStatisticsProperty(scalingType)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flatScale<sp/>=<sp/>afwMath.makeStatistics(flatMaskedImage.image,<sp/>scalingType).getValue()</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>scalingType<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;USER&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flatScale<sp/>=<sp/>userScale</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&apos;%s<sp/>:<sp/>%s<sp/>not<sp/>implemented&apos;</highlight><highlight class="normal"><sp/>%<sp/>(</highlight><highlight class="stringliteral">&quot;flatCorrection&quot;</highlight><highlight class="normal">,<sp/>scalingType))</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>invert:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage.scaledDivides(1.0/flatScale,<sp/>flatMaskedImage)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage.scaledMultiplies(1.0/flatScale,<sp/>flatMaskedImage)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a4f1beae07a4d7e91b76549c7616b7477" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a4f1beae07a4d7e91b76549c7616b7477" kindref="member">illuminationCorrection</ref>(maskedImage,<sp/>illumMaskedImage,<sp/>illumScale,<sp/>trimToFit=True):</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Apply<sp/>illumination<sp/>correction<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>process.<sp/><sp/>The<sp/>image<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>modified.</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>illumMaskedImage<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Illumination<sp/>correction<sp/>image<sp/>of<sp/>the<sp/>same<sp/>size<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>``maskedImage``.</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>illumScale<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scale<sp/>factor<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>illumination<sp/>correction.</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>trimToFit<sp/>:<sp/>`Bool`,<sp/>optional</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>raw<sp/>data<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>symmetrically<sp/>trimmed<sp/>to<sp/>match</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>size.</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>``maskedImage``<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>``illumMaskedImage``<sp/>do<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>have</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>size.</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>trimToFit:</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskedImage<sp/>=<sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ab0bcdeb1e2dd956b34e4d96c3743d6e3" kindref="member">trimToMatchCalibBBox</ref>(maskedImage,<sp/>illumMaskedImage)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>maskedImage.getBBox(afwImage.LOCAL)<sp/>!=<sp/>illumMaskedImage.getBBox(afwImage.LOCAL):</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;maskedImage<sp/>bbox<sp/>%s<sp/>!=<sp/>illumMaskedImage<sp/>bbox<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(maskedImage.getBBox(afwImage.LOCAL),<sp/>illumMaskedImage.getBBox(afwImage.LOCAL)))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>maskedImage.scaledDivides(1.0/illumScale,<sp/>illumMaskedImage)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a6c3e2c188a3f6a0eb683179524b84540" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a6c3e2c188a3f6a0eb683179524b84540" kindref="member">brighterFatterCorrection</ref>(exposure,<sp/>kernel,<sp/>maxIter,<sp/>threshold,<sp/>applyGain,<sp/>gains=None):</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Apply<sp/>brighter<sp/>fatter<sp/>correction<sp/>in<sp/>place<sp/>for<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>exposure<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/>to<sp/>have<sp/>brighter-fatter<sp/>correction<sp/>applied.<sp/><sp/>Modified</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>this<sp/>method.</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>kernel<sp/>:<sp/>`numpy.ndarray`</highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brighter-fatter<sp/>kernel<sp/>to<sp/>apply.</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maxIter<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>correction<sp/>iterations<sp/>to<sp/>run.</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>threshold<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convergence<sp/>threshold<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>terms<sp/>of<sp/>the<sp/>sum<sp/>of<sp/>absolute</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deviations<sp/>between<sp/>an<sp/>iteration<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>previous<sp/>one.</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>applyGain<sp/>:<sp/>`Bool`</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>then<sp/>the<sp/>exposure<sp/>values<sp/>are<sp/>scaled<sp/>by<sp/>the<sp/>gain<sp/>prior</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>correction.</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>gains<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`float`]</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dictionary,<sp/>keyed<sp/>by<sp/>amplifier<sp/>name,<sp/>of<sp/>the<sp/>gains<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>gains<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>the<sp/>nominal<sp/>gains<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>amplifier<sp/>object<sp/>are<sp/>used.</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>:<sp/>`float`</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Final<sp/>difference<sp/>between<sp/>iterations<sp/>achieved<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>correction.</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>iteration<sp/>:<sp/>`int`</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>iterations<sp/>used<sp/>to<sp/>calculate<sp/>correction.</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>This<sp/>correction<sp/>takes<sp/>a<sp/>kernel<sp/>that<sp/>has<sp/>been<sp/>derived<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>flat</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>field<sp/>images<sp/>to<sp/>redistribute<sp/>the<sp/>charge.<sp/><sp/>The<sp/>gradient<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>the<sp/>deflection<sp/>field<sp/>due<sp/>to<sp/>the<sp/>accumulated<sp/>charge.</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>Given<sp/>the<sp/>original<sp/>image<sp/>I(x)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>kernel<sp/>K(x)<sp/>we<sp/>can<sp/>compute</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>the<sp/>corrected<sp/>image<sp/>Ic(x)<sp/>using<sp/>the<sp/>following<sp/>equation:</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>Ic(x)<sp/>=<sp/>I(x)<sp/>+<sp/>0.5*d/dx(I(x)*d/dx(int(<sp/>dy*K(x-y)*I(y))))</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>To<sp/>evaluate<sp/>the<sp/>derivative<sp/>term<sp/>we<sp/>expand<sp/>it<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>follows:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>0.5<sp/>*<sp/>(<sp/>d/dx(I(x))*d/dx(int(dy*K(x-y)*I(y)))</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>I(x)*d^2/dx^2(int(dy*<sp/>K(x-y)*I(y)))<sp/>)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>Because<sp/>we<sp/>use<sp/>the<sp/>measured<sp/>counts<sp/>instead<sp/>of<sp/>the<sp/>incident<sp/>counts</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>we<sp/>apply<sp/>the<sp/>correction<sp/>iteratively<sp/>to<sp/>reconstruct<sp/>the<sp/>original</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>counts<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>correction.<sp/><sp/>We<sp/>stop<sp/>iterating<sp/>when<sp/>the<sp/>summed</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>difference<sp/>between<sp/>the<sp/>current<sp/>corrected<sp/>image<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>one<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>the<sp/>previous<sp/>iteration<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>below<sp/>the<sp/>threshold.<sp/><sp/>We<sp/>do<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>require</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>convergence<sp/>because<sp/>the<sp/>number<sp/>of<sp/>iterations<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>too<sp/>large<sp/>a</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>computational<sp/>cost.<sp/><sp/>How<sp/>we<sp/>define<sp/>the<sp/>threshold<sp/>still<sp/>needs<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>evaluated,<sp/>the<sp/>current<sp/>default<sp/>was<sp/>shown<sp/>to<sp/>work<sp/>reasonably<sp/>well</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>on<sp/>a<sp/>small<sp/>set<sp/>of<sp/>images.<sp/><sp/>For<sp/>more<sp/>information<sp/>on<sp/>the<sp/>method<sp/>see</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>DocuShare<sp/>Document-19407.</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>The<sp/>edges<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>defined<sp/>by<sp/>the<sp/>kernel<sp/>are<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>corrected<sp/>because<sp/>they</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>have<sp/>spurious<sp/>values<sp/>due<sp/>to<sp/>the<sp/>convolution.</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>image<sp/>=<sp/>exposure.getMaskedImage().getImage()</highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>image<sp/>needs<sp/>to<sp/>be<sp/>units<sp/>of<sp/>electrons/holes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>gainContext(exposure,<sp/>image,<sp/>applyGain,<sp/>gains):</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kLx<sp/>=<sp/>numpy.shape(kernel)[0]</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kLy<sp/>=<sp/>numpy.shape(kernel)[1]</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernelImage<sp/>=<sp/>afwImage.ImageD(kLx,<sp/>kLy)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernelImage.getArray()[:,<sp/>:]<sp/>=<sp/>kernel</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempImage<sp/>=<sp/>image.clone()</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nanIndex<sp/>=<sp/>numpy.isnan(tempImage.getArray())</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempImage.getArray()[nanIndex]<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outImage<sp/>=<sp/>afwImage.ImageF(image.getDimensions())</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr<sp/>=<sp/>numpy.zeros_like(image.getArray())</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_image<sp/>=<sp/>numpy.zeros_like(image.getArray())</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convCntrl<sp/>=<sp/>afwMath.ConvolutionControl(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>1)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixedKernel<sp/>=<sp/>afwMath.FixedKernel(kernelImage)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Define<sp/>boundary<sp/>by<sp/>convolution<sp/>region.<sp/><sp/>The<sp/>region<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>correction<sp/>will<sp/>be<sp/>calculated<sp/>for<sp/>is<sp/>one<sp/>fewer<sp/>in<sp/>each<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>because<sp/>of<sp/>the<sp/>second<sp/>derivative<sp/>terms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>these<sp/>need<sp/>to<sp/>use<sp/>integer<sp/>math,<sp/>as<sp/>we&apos;re<sp/>using<sp/>start:end<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>numpy<sp/>index<sp/>ranges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startX<sp/>=<sp/>kLx//2</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endX<sp/>=<sp/>-kLx//2</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startY<sp/>=<sp/>kLy//2</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endY<sp/>=<sp/>-kLy//2</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>iteration<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(maxIter):</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afwMath.convolve(outImage,<sp/>tempImage,<sp/>fixedKernel,<sp/>convCntrl)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray<sp/>=<sp/>tempImage.getArray()</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outArray<sp/>=<sp/>outImage.getArray()</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>numpy.errstate(invalid=</highlight><highlight class="stringliteral">&quot;ignore&quot;</highlight><highlight class="normal">,<sp/>over=</highlight><highlight class="stringliteral">&quot;ignore&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>First<sp/>derivative<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradTmp<sp/>=<sp/>numpy.gradient(tmpArray[startY:endY,<sp/>startX:endX])</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradOut<sp/>=<sp/>numpy.gradient(outArray[startY:endY,<sp/>startX:endX])</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>(gradTmp[0]*gradOut[0]<sp/>+<sp/>gradTmp[1]*gradOut[1])[1:-1,<sp/>1:-1]</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Second<sp/>derivative<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffOut20<sp/>=<sp/>numpy.diff(outArray,<sp/>2,<sp/>0)[startY:endY,<sp/>startX<sp/>+<sp/>1:endX<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffOut21<sp/>=<sp/>numpy.diff(outArray,<sp/>2,<sp/>1)[startY<sp/>+<sp/>1:endY<sp/>-<sp/>1,<sp/>startX:endX]</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second<sp/>=<sp/>tmpArray[startY<sp/>+<sp/>1:endY<sp/>-<sp/>1,<sp/>startX<sp/>+<sp/>1:endX<sp/>-<sp/>1]*(diffOut20<sp/>+<sp/>diffOut21)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr[startY<sp/>+<sp/>1:endY<sp/>-<sp/>1,<sp/>startX<sp/>+<sp/>1:endX<sp/>-<sp/>1]<sp/>=<sp/>0.5*(first<sp/>+<sp/>second)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray[:,<sp/>:]<sp/>=<sp/>image.getArray()[:,<sp/>:]</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray[nanIndex]<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray[startY:endY,<sp/>startX:endX]<sp/>+=<sp/>corr[startY:endY,<sp/>startX:endX]</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>iteration<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>numpy.sum(numpy.abs(prev_image<sp/>-<sp/>tmpArray))</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>diff<sp/>&lt;<sp/>threshold:</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_image[:,<sp/>:]<sp/>=<sp/>tmpArray[:,<sp/>:]</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.getArray()[startY<sp/>+<sp/>1:endY<sp/>-<sp/>1,<sp/>startX<sp/>+<sp/>1:endX<sp/>-<sp/>1]<sp/>+=<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr[startY<sp/>+<sp/>1:endY<sp/>-<sp/>1,<sp/>startX<sp/>+<sp/>1:endX<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff,<sp/>iteration</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ad396d96de11e9d7247b0b95e5e0964a5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ad396d96de11e9d7247b0b95e5e0964a5" kindref="member">transferFlux</ref>(cFunc,<sp/>fStep,<sp/>correctionMode=True):</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Take<sp/>the<sp/>input<sp/>convolved<sp/>deflection<sp/>potential<sp/>and<sp/>the<sp/>flux<sp/>array</highlight></codeline>
<codeline lineno="599"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>compute<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>apply<sp/>the<sp/>flux<sp/>transfer<sp/>into<sp/>the<sp/>correction<sp/>array.</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>cFunc:<sp/>`numpy.array`</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deflection<sp/>potential,<sp/>being<sp/>the<sp/>convolution<sp/>of<sp/>the<sp/>flux<sp/>F<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>the</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel<sp/>K.</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>fStep:<sp/>`numpy.array`</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>of<sp/>flux<sp/>values<sp/>which<sp/>act<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>the<sp/>source<sp/>of<sp/>the<sp/>flux<sp/>transfer.</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>correctionMode:<sp/>`bool`</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Defines<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>applying<sp/>correction<sp/>(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>generating<sp/>sims<sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">).</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>corr:</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BFE<sp/>correction<sp/>array</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="616"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="617"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>cFunc.shape<sp/>!=<sp/>fStep.shape:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(f</highlight><highlight class="stringliteral">&apos;transferFlux:<sp/>array<sp/>shapes<sp/>do<sp/>not<sp/>match:<sp/>{cFunc.shape},<sp/>{fStep.shape}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>set<sp/>the<sp/>sign<sp/>of<sp/>the<sp/>correction<sp/>and<sp/>set<sp/>its<sp/>value<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>time<sp/>averaged<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>correctionMode:</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>negative<sp/>sign<sp/>if<sp/>applying<sp/>BFE<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor<sp/>=<sp/>-0.5</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>positive<sp/>sign<sp/>if<sp/>generating<sp/>BFE<sp/>simulations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor<sp/>=<sp/>0.5</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initialise<sp/>the<sp/>BFE<sp/>correction<sp/>image<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>corr<sp/>=<sp/>numpy.zeros_like(cFunc)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Generate<sp/>a<sp/>2D<sp/>mesh<sp/>of<sp/>x,y<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>yDim,<sp/>xDim<sp/>=<sp/>cFunc.shape</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>numpy.arange(yDim,<sp/>dtype=int)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>numpy.arange(xDim,<sp/>dtype=int)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>xc,<sp/>yc<sp/>=<sp/>numpy.meshgrid(x,<sp/>y)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>process<sp/>each<sp/>axis<sp/>in<sp/>turn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ax<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[0,<sp/>1]:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>gradient<sp/>of<sp/>phi<sp/>on<sp/>right/upper<sp/>edge<sp/>of<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>numpy.diff(cFunc,<sp/>axis=ax)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>expand<sp/>array<sp/>back<sp/>to<sp/>full<sp/>size<sp/>with<sp/>zero<sp/>gradient<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gx<sp/>=<sp/>numpy.zeros_like(cFunc)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yDiff,<sp/>xDiff<sp/>=<sp/>diff.shape</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gx[:yDiff,<sp/>:xDiff]<sp/>+=<sp/>diff</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>select<sp/>pixels<sp/>with<sp/>either<sp/>positive<sp/>gradients<sp/>on<sp/>the<sp/>right<sp/>edge,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>flux<sp/>flowing<sp/>to<sp/>the<sp/>right/up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>or<sp/>negative<sp/>gradients,<sp/>flux<sp/>flowing<sp/>to<sp/>the<sp/>left/down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>sel<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate([gx<sp/>&gt;<sp/>0,<sp/>gx<sp/>&lt;<sp/>0]):</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSelPixels<sp/>=<sp/>xc[sel]</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ySelPixels<sp/>=<sp/>yc[sel]</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>add<sp/>the<sp/>flux<sp/>into<sp/>the<sp/>pixel<sp/>to<sp/>the<sp/>right<sp/>or<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>depending<sp/>on<sp/>which<sp/>axis<sp/>we<sp/>are<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ax<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xPix<sp/>=<sp/>xSelPixels</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yPix<sp/>=<sp/>ySelPixels+1</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xPix<sp/>=<sp/>xSelPixels+1</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yPix<sp/>=<sp/>ySelPixels</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>define<sp/>flux<sp/>as<sp/>the<sp/>either<sp/>current<sp/>pixel<sp/>value<sp/>or<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>above/right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>depending<sp/>on<sp/>whether<sp/>positive<sp/>or<sp/>negative<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>positive<sp/>gradients,<sp/>flux<sp/>flowing<sp/>to<sp/>higher<sp/>coordinate<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flux<sp/>=<sp/>factor<sp/>*<sp/>fStep[sel]*gx[sel]</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>negative<sp/>gradients,<sp/>flux<sp/>flowing<sp/>to<sp/>lower<sp/>coordinate<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flux<sp/>=<sp/>factor<sp/>*<sp/>fStep[yPix,<sp/>xPix]*gx[sel]</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>change<sp/>the<sp/>fluxes<sp/>of<sp/>the<sp/>donor<sp/>and<sp/>receiving<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>such<sp/>that<sp/>flux<sp/>is<sp/>conserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr[sel]<sp/>-=<sp/>flux</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr[yPix,<sp/>xPix]<sp/>+=<sp/>flux</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>return<sp/>correction<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>corr</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a55ab08c7bf0d38771cb5b4f1dcffb86b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a55ab08c7bf0d38771cb5b4f1dcffb86b" kindref="member">fluxConservingBrighterFatterCorrection</ref>(exposure,<sp/>kernel,<sp/>maxIter,<sp/>threshold,<sp/>applyGain,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gains=None,<sp/>correctionMode=True):</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Apply<sp/>brighter<sp/>fatter<sp/>correction<sp/>in<sp/>place<sp/>for<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="684"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="685"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>version<sp/>presents<sp/>a<sp/>modified<sp/>version<sp/>of<sp/>the<sp/>algorithm</highlight></codeline>
<codeline lineno="686"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>found<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>``lsst.ip.isr.isrFunctions.brighterFatterCorrection``</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>which<sp/>conserves<sp/>the<sp/>image<sp/>flux,<sp/>resulting<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>improved</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>correction<sp/>of<sp/>the<sp/>cores<sp/>of<sp/>stars.<sp/>The<sp/>convolution<sp/>has<sp/>also<sp/>been</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>modified<sp/>to<sp/>mitigate<sp/>edge<sp/>effects.</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>exposure<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/>to<sp/>have<sp/>brighter-fatter<sp/>correction<sp/>applied.<sp/><sp/>Modified</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>this<sp/>method.</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel<sp/>:<sp/>`numpy.ndarray`</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brighter-fatter<sp/>kernel<sp/>to<sp/>apply.</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>maxIter<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>correction<sp/>iterations<sp/>to<sp/>run.</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>threshold<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convergence<sp/>threshold<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>terms<sp/>of<sp/>the<sp/>sum<sp/>of<sp/>absolute</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deviations<sp/>between<sp/>an<sp/>iteration<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>previous<sp/>one.</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>applyGain<sp/>:<sp/>`Bool`</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>then<sp/>the<sp/>exposure<sp/>values<sp/>are<sp/>scaled<sp/>by<sp/>the<sp/>gain<sp/>prior</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>correction.</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>gains<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`float`]</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dictionary,<sp/>keyed<sp/>by<sp/>amplifier<sp/>name,<sp/>of<sp/>the<sp/>gains<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>gains<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>the<sp/>nominal<sp/>gains<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>amplifier<sp/>object<sp/>are<sp/>used.</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>correctionMode<sp/>:<sp/>`Bool`</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/>(default)<sp/>the<sp/>function<sp/>applies<sp/>correction<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>BFE.<sp/><sp/>If<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>code<sp/>can<sp/>instead<sp/>be<sp/>used<sp/>to<sp/>generate<sp/>a<sp/>simulation<sp/>of<sp/>BFE<sp/>(sign</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>change<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>direction<sp/>of<sp/>the<sp/>effect)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>:<sp/>`float`</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Final<sp/>difference<sp/>between<sp/>iterations<sp/>achieved<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>correction.</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>iteration<sp/>:<sp/>`int`</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>iterations<sp/>used<sp/>to<sp/>calculate<sp/>correction.</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>Modified<sp/>version<sp/>of<sp/>``lsst.ip.isr.isrFunctions.brighterFatterCorrection``.</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>This<sp/>correction<sp/>takes<sp/>a<sp/>kernel<sp/>that<sp/>has<sp/>been<sp/>derived<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>flat</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>field<sp/>images<sp/>to<sp/>redistribute<sp/>the<sp/>charge.<sp/><sp/>The<sp/>gradient<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>the<sp/>deflection<sp/>field<sp/>due<sp/>to<sp/>the<sp/>accumulated<sp/>charge.</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>Given<sp/>the<sp/>original<sp/>image<sp/>I(x)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>kernel<sp/>K(x)<sp/>we<sp/>can<sp/>compute</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>the<sp/>corrected<sp/>image<sp/>Ic(x)<sp/>using<sp/>the<sp/>following<sp/>equation:</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>Ic(x)<sp/>=<sp/>I(x)<sp/>+<sp/>0.5*d/dx(I(x)*d/dx(int(<sp/>dy*K(x-y)*I(y))))</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>Improved<sp/>algorithm<sp/>at<sp/>this<sp/>step<sp/>applies<sp/>the<sp/>divergence<sp/>theorem<sp/>to</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>obtain<sp/>a<sp/>pixelised<sp/>correction.</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>Because<sp/>we<sp/>use<sp/>the<sp/>measured<sp/>counts<sp/>instead<sp/>of<sp/>the<sp/>incident<sp/>counts</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>we<sp/>apply<sp/>the<sp/>correction<sp/>iteratively<sp/>to<sp/>reconstruct<sp/>the<sp/>original</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>counts<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>correction.<sp/><sp/>We<sp/>stop<sp/>iterating<sp/>when<sp/>the<sp/>summed</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>difference<sp/>between<sp/>the<sp/>current<sp/>corrected<sp/>image<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>one<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>the<sp/>previous<sp/>iteration<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>below<sp/>the<sp/>threshold.<sp/><sp/>We<sp/>do<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>require</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>convergence<sp/>because<sp/>the<sp/>number<sp/>of<sp/>iterations<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>too<sp/>large<sp/>a</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>computational<sp/>cost.<sp/><sp/>How<sp/>we<sp/>define<sp/>the<sp/>threshold<sp/>still<sp/>needs<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>evaluated,<sp/>the<sp/>current<sp/>default<sp/>was<sp/>shown<sp/>to<sp/>work<sp/>reasonably<sp/>well</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>on<sp/>a<sp/>small<sp/>set<sp/>of<sp/>images.</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>Edges<sp/>are<sp/>handled<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>convolution<sp/>by<sp/>padding.<sp/><sp/>This<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>still<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>physical<sp/>model<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>edge,<sp/>but<sp/>avoids<sp/>discontinuity<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>correction.</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>Author<sp/>of<sp/>modified<sp/>version:<sp/>Lance.Miller</highlight><highlight class="preprocessor">@physics.ox.ac.uk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>(see<sp/>DM-38555).</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="753"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>image<sp/>=<sp/>exposure.getMaskedImage().getImage()</highlight></codeline>
<codeline lineno="754"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="755"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>image<sp/>needs<sp/>to<sp/>be<sp/>units<sp/>of<sp/>electrons/holes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>gainContext(exposure,<sp/>image,<sp/>applyGain,<sp/>gains):</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>kernel<sp/>and<sp/>its<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kLy,<sp/>kLx<sp/>=<sp/>kernel.shape</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernelImage<sp/>=<sp/>afwImage.ImageD(kLx,<sp/>kLy)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernelImage.getArray()[:,<sp/>:]<sp/>=<sp/>kernel</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempImage<sp/>=<sp/>image.clone()</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nanIndex<sp/>=<sp/>numpy.isnan(tempImage.getArray())</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempImage.getArray()[nanIndex]<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outImage<sp/>=<sp/>afwImage.ImageF(image.getDimensions())</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr<sp/>=<sp/>numpy.zeros_like(image.getArray())</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevImage<sp/>=<sp/>numpy.zeros_like(image.getArray())</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convCntrl<sp/>=<sp/>afwMath.ConvolutionControl(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>1)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixedKernel<sp/>=<sp/>afwMath.FixedKernel(kernelImage)</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>set<sp/>the<sp/>padding<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ensure<sp/>we<sp/>pad<sp/>by<sp/>an<sp/>even<sp/>amount<sp/>larger<sp/>than<sp/>the<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kLy<sp/>=<sp/>2<sp/>*<sp/>((1+kLy)//2)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kLx<sp/>=<sp/>2<sp/>*<sp/>((1+kLx)//2)</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>deflection<sp/>potential<sp/>only<sp/>depends<sp/>on<sp/>the<sp/>gradient<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>convolution,<sp/>so<sp/>we<sp/>can<sp/>subtract<sp/>the<sp/>mean,<sp/>which<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>allows<sp/>us<sp/>to<sp/>pad<sp/>the<sp/>image<sp/>with<sp/>zeros<sp/>and<sp/>avoid<sp/>wrap-around<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>(although<sp/>still<sp/>not<sp/>handling<sp/>the<sp/>image<sp/>edges<sp/>with<sp/>a<sp/>physical<sp/>model)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>wouldn&apos;t<sp/>be<sp/>great<sp/>if<sp/>there<sp/>were<sp/>a<sp/>strong<sp/>image<sp/>gradient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imYdimension,<sp/>imXdimension<sp/>=<sp/>tempImage.array.shape</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imean<sp/>=<sp/>numpy.mean(tempImage.getArray()[~nanIndex])</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>subtract<sp/>mean<sp/>from<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempImage<sp/>-=<sp/>imean</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempImage.array[nanIndex]<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padArray<sp/>=<sp/>numpy.pad(tempImage.getArray(),<sp/>((0,<sp/>kLy),<sp/>(0,<sp/>kLx)))</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outImage<sp/>=<sp/>afwImage.ImageF(numpy.pad(outImage.getArray(),<sp/>((0,<sp/>kLy),<sp/>(0,<sp/>kLx))))</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Convert<sp/>array<sp/>to<sp/>afw<sp/>image<sp/>so<sp/>afwMath.convolve<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padImage<sp/>=<sp/>afwImage.ImageF(padArray.shape[1],<sp/>padArray.shape[0])</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padImage.array[:]<sp/>=<sp/>padArray</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>iteration<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(maxIter):</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>deflection<sp/>potential,<sp/>convolution<sp/>of<sp/>flux<sp/>with<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>using<sp/>padded<sp/>counts<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afwMath.convolve(outImage,<sp/>padImage,<sp/>fixedKernel,<sp/>convCntrl)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray<sp/>=<sp/>tempImage.getArray()</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outArray<sp/>=<sp/>outImage.getArray()</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>trim<sp/>convolution<sp/>output<sp/>back<sp/>to<sp/>original<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outArray<sp/>=<sp/>outArray[:imYdimension,<sp/>:imXdimension]</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>generate<sp/>the<sp/>correction<sp/>array,<sp/>with<sp/>correctionMode<sp/>set<sp/>as<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr[...]<sp/>=<sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ad396d96de11e9d7247b0b95e5e0964a5" kindref="member">transferFlux</ref>(outArray,<sp/>tmpArray,<sp/>correctionMode=correctionMode)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>the<sp/>arrays<sp/>for<sp/>the<sp/>next<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray[:,<sp/>:]<sp/>=<sp/>image.getArray()[:,<sp/>:]</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray<sp/>+=<sp/>corr</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray[nanIndex]<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>padded<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>subtract<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpArray<sp/>-=<sp/>imean</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempImage.array[nanIndex]<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padArray<sp/>=<sp/>numpy.pad(tempImage.getArray(),<sp/>((0,<sp/>kLy),<sp/>(0,<sp/>kLx)))</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>iteration<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>numpy.sum(numpy.abs(prevImage<sp/>-<sp/>tmpArray))</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>diff<sp/>&lt;<sp/>threshold:</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevImage[:,<sp/>:]<sp/>=<sp/>tmpArray[:,<sp/>:]</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.getArray()[:]<sp/>+=<sp/>corr[:]</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff,<sp/>iteration</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">@contextmanager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a68f9aea92c7714bdcbedb80be2eea463" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">gainContext(exp,<sp/>image,<sp/>apply,<sp/>gains=None):</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Context<sp/>manager<sp/>that<sp/>applies<sp/>and<sp/>removes<sp/>gain.</highlight></codeline>
<codeline lineno="833"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="834"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="835"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="836"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>exp<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="837"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/>to<sp/>apply/remove<sp/>gain.</highlight></codeline>
<codeline lineno="838"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>image<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Image</ref>`</highlight></codeline>
<codeline lineno="839"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image<sp/>to<sp/>apply/remove<sp/>gain.</highlight></codeline>
<codeline lineno="840"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>apply<sp/>:<sp/>`Bool`</highlight></codeline>
<codeline lineno="841"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>apply<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>remove<sp/>the<sp/>amplifier<sp/>gain.</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>gains<sp/>:<sp/>`dict`<sp/>[`str`,<sp/>`float`]</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dictionary,<sp/>keyed<sp/>by<sp/>amplifier<sp/>name,<sp/>of<sp/>the<sp/>gains<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>gains<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>the<sp/>nominal<sp/>gains<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>amplifier<sp/>object<sp/>are<sp/>used.</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>Yields</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>exp<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>the<sp/>gain<sp/>applied.</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="851"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>check<sp/>we<sp/>have<sp/>all<sp/>of<sp/>them<sp/>if<sp/>provided<sp/>because<sp/>mixing<sp/>and<sp/>matching<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>be<sp/>a<sp/>real<sp/>mess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gains<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>apply<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampNames<sp/>=<sp/>[amp.getName()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>amp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>exp.getDetector()]</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ampName<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ampNames:</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ampName<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>gains.keys():</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(f</highlight><highlight class="stringliteral">&quot;Gains<sp/>provided<sp/>to<sp/>gain<sp/>context,<sp/>but<sp/>no<sp/>entry<sp/>found<sp/>for<sp/>amp<sp/>{ampName}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>apply:</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccd<sp/>=<sp/>exp.getDetector()</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>amp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ccd:</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>=<sp/>image.Factory(image,<sp/>amp.getBBox())</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gains:</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gain<sp/>=<sp/>gains[amp.getName()]</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gain<sp/>=<sp/>amp.getGain()</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>*=<sp/>gain</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>exp</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>apply:</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccd<sp/>=<sp/>exp.getDetector()</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>amp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ccd:</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>=<sp/>image.Factory(image,<sp/>amp.getBBox())</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gains:</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gain<sp/>=<sp/>gains[amp.getName()]</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gain<sp/>=<sp/>amp.getGain()</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>/=<sp/>gain</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ae76982bb89eecf98e9a74970ceb5ce00" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1ae76982bb89eecf98e9a74970ceb5ce00" kindref="member">attachTransmissionCurve</ref>(exposure,<sp/>opticsTransmission=None,<sp/>filterTransmission=None,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensorTransmission=None,<sp/>atmosphereTransmission=None):</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Attach<sp/>a<sp/>TransmissionCurve<sp/>to<sp/>an<sp/>Exposure,<sp/>given<sp/>separate<sp/>curves<sp/>for</highlight></codeline>
<codeline lineno="886"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>different<sp/>components.</highlight></codeline>
<codeline lineno="887"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="888"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="889"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="890"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>exposure<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="891"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/>object<sp/>to<sp/>modify<sp/>by<sp/>attaching<sp/>the<sp/>product<sp/>of<sp/>all<sp/>given</highlight></codeline>
<codeline lineno="892"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``TransmissionCurves``<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>post-assembly<sp/>trimmed<sp/>detector<sp/>coordinates.</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Must<sp/>have<sp/>a<sp/>valid<sp/>``Detector``<sp/>attached<sp/>that<sp/>matches<sp/>the<sp/>detector</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>associated<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>sensorTransmission.</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>opticsTransmission<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_transmission_curve" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.TransmissionCurve</ref>`</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>``TransmissionCurve``<sp/>that<sp/>represents<sp/>the<sp/>throughput<sp/>of<sp/>the<sp/>optics,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>evaluated<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>focal-plane<sp/>coordinates.</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>filterTransmission<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_transmission_curve" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.TransmissionCurve</ref>`</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>``TransmissionCurve``<sp/>that<sp/>represents<sp/>the<sp/>throughput<sp/>of<sp/>the<sp/>filter</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itself,<sp/>to<sp/>be<sp/>evaluated<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>focal-plane<sp/>coordinates.</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>sensorTransmission<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_transmission_curve" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.TransmissionCurve</ref>`</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>``TransmissionCurve``<sp/>that<sp/>represents<sp/>the<sp/>throughput<sp/>of<sp/>the<sp/>sensor</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itself,<sp/>to<sp/>be<sp/>evaluated<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>post-assembly<sp/>trimmed<sp/>detector<sp/>coordinates.</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>atmosphereTransmission<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_transmission_curve" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.TransmissionCurve</ref>`</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>``TransmissionCurve``<sp/>that<sp/>represents<sp/>the<sp/>throughput<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmosphere,<sp/>assumed<sp/>to<sp/>be<sp/>spatially<sp/>constant.</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>combined<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_transmission_curve" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.TransmissionCurve</ref>`</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>TransmissionCurve<sp/>attached<sp/>to<sp/>the<sp/>exposure.</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>All<sp/>``TransmissionCurve``<sp/>arguments<sp/>are<sp/>optional;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>none<sp/>are<sp/>provided,<sp/>the</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>attached<sp/>``TransmissionCurve``<sp/>will<sp/>have<sp/>unit<sp/>transmission<sp/>everywhere.</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="918"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>combined<sp/>=<sp/>afwImage.TransmissionCurve.makeIdentity()</highlight></codeline>
<codeline lineno="919"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>atmosphereTransmission<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combined<sp/>*=<sp/>atmosphereTransmission</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>opticsTransmission<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combined<sp/>*=<sp/>opticsTransmission</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>filterTransmission<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combined<sp/>*=<sp/>filterTransmission</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>detector<sp/>=<sp/>exposure.getDetector()</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>fpToPix<sp/>=<sp/>detector.getTransform(fromSys=camGeom.FOCAL_PLANE,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toSys=camGeom.PIXELS)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>combined<sp/>=<sp/>combined.transformedBy(fpToPix)</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sensorTransmission<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combined<sp/>*=<sp/>sensorTransmission</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>exposure.getInfo().setTransmissionCurve(combined)</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combined</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1aa9f18cd526ed4f855647ce890b552c67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1aa9f18cd526ed4f855647ce890b552c67" kindref="member">applyGains</ref>(exposure,<sp/>normalizeGains=False,<sp/>ptcGains=None):</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Scale<sp/>an<sp/>exposure<sp/>by<sp/>the<sp/>amplifier<sp/>gains.</highlight></codeline>
<codeline lineno="937"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="938"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="939"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="940"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>exposure<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="941"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/>to<sp/>process.<sp/><sp/>The<sp/>image<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>modified.</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>normalizeGains<sp/>:<sp/>`Bool`,<sp/>optional</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>then<sp/>amplifiers<sp/>are<sp/>scaled<sp/>to<sp/>force<sp/>the<sp/>median<sp/>of</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>amplifier<sp/>to<sp/>equal<sp/>the<sp/>median<sp/>of<sp/>those<sp/>medians.</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>ptcGains<sp/>:<sp/>`dict`[`str`],<sp/>optional</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>keyed<sp/>by<sp/>amp<sp/>name<sp/>containing<sp/>the<sp/>PTC<sp/>gains.</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="948"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ccd<sp/>=<sp/>exposure.getDetector()</highlight></codeline>
<codeline lineno="949"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ccdImage<sp/>=<sp/>exposure.getMaskedImage()</highlight></codeline>
<codeline lineno="950"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="951"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>medians<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="952"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>amp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ccd:</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>=<sp/>ccdImage.Factory(ccdImage,<sp/>amp.getBBox())</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ptcGains:</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>*=<sp/>ptcGains[amp.getName()]</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>*=<sp/>amp.getGain()</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>normalizeGains:</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>medians.append(numpy.median(sim.getImage().getArray()))</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>normalizeGains:</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>median<sp/>=<sp/>numpy.median(numpy.array(medians))</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>index,<sp/>amp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(ccd):</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>=<sp/>ccdImage.Factory(ccdImage,<sp/>amp.getBBox())</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>medians[index]<sp/>!=<sp/>0.0:</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim<sp/>*=<sp/>median/medians[index]</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1af5547ddf356c6164ceea5306190dc65d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1af5547ddf356c6164ceea5306190dc65d" kindref="member">widenSaturationTrails</ref>(mask):</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Grow<sp/>the<sp/>saturation<sp/>trails<sp/>by<sp/>an<sp/>amount<sp/>dependent<sp/>on<sp/>the<sp/>width<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="972"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>trail.</highlight></codeline>
<codeline lineno="973"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="974"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="975"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="976"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>mask<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_mask" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Mask</ref>`</highlight></codeline>
<codeline lineno="977"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>which<sp/>will<sp/>have<sp/>the<sp/>saturated<sp/>areas<sp/>grown.</highlight></codeline>
<codeline lineno="978"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="979"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="980"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>extraGrowDict<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="981"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>6):</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extraGrowDict[i]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(6,<sp/>8):</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extraGrowDict[i]<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(8,<sp/>10):</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extraGrowDict[i]<sp/>=<sp/>3</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>extraGrowMax<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>extraGrowMax<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>saturatedBit<sp/>=<sp/>mask.getPlaneBitMask(</highlight><highlight class="stringliteral">&quot;SAT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin,<sp/>ymin<sp/>=<sp/>mask.getBBox().getMin()</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>mask.getWidth()</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>thresh<sp/>=<sp/>afwDetection.Threshold(saturatedBit,<sp/>afwDetection.Threshold.BITMASK)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>fpList<sp/>=<sp/>afwDetection.FootprintSet(mask,<sp/>thresh).getFootprints()</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fpList:</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fp.getSpans():</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0,<sp/>x1<sp/>=<sp/>s.getX0(),<sp/>s.getX1()</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extraGrow<sp/>=<sp/>extraGrowDict.get(x1<sp/>-<sp/>x0<sp/>+<sp/>1,<sp/>extraGrowMax)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>extraGrow<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>s.getY()<sp/>-<sp/>ymin</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>-=<sp/>xmin<sp/>+<sp/>extraGrow</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/>xmin<sp/>-<sp/>extraGrow</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x0<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x1<sp/>&gt;=<sp/>width<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>width<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask.array[y,<sp/>x0:x1+1]<sp/>|=<sp/>saturatedBit</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1aa34867352c694fb36fb792678db3115c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1aa34867352c694fb36fb792678db3115c" kindref="member">setBadRegions</ref>(exposure,<sp/>badStatistic=&quot;MEDIAN&quot;):</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Set<sp/>all<sp/>BAD<sp/>areas<sp/>of<sp/>the<sp/>chip<sp/>to<sp/>the<sp/>average<sp/>of<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>exposure</highlight></codeline>
<codeline lineno="1020"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1021"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1022"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1023"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>exposure<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="1024"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/>to<sp/>mask.<sp/><sp/>The<sp/>exposure<sp/>mask<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>modified.</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>badStatistic<sp/>:<sp/>`str`,<sp/>optional</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Statistic<sp/>to<sp/>use<sp/>to<sp/>generate<sp/>the<sp/>replacement<sp/>value<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>the</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>data.<sp/><sp/>Allowed<sp/>values<sp/>are<sp/></highlight><highlight class="stringliteral">&apos;MEDIAN&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;MEANCLIP&apos;</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>badPixelCount<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>bad<sp/>pixels<sp/>masked.</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>badPixelValue<sp/>:<sp/>scalar</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>substituted<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>bad<sp/>pixels.</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>RuntimeError</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raised<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>`badStatistic`<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>an<sp/>allowed<sp/>value.</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1041"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>badStatistic<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEDIAN&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistic<sp/>=<sp/>afwMath.MEDIAN</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>badStatistic<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEANCLIP&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistic<sp/>=<sp/>afwMath.MEANCLIP</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;Impossible<sp/>method<sp/>%s<sp/>of<sp/>bad<sp/>region<sp/>correction&quot;</highlight><highlight class="normal"><sp/>%<sp/>badStatistic)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>mi<sp/>=<sp/>exposure.getMaskedImage()</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>mi.getMask()</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>BAD<sp/>=<sp/>mask.getPlaneBitMask(</highlight><highlight class="stringliteral">&quot;BAD&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>INTRP<sp/>=<sp/>mask.getPlaneBitMask(</highlight><highlight class="stringliteral">&quot;INTRP&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>sctrl<sp/>=<sp/>afwMath.StatisticsControl()</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>sctrl.setAndMask(BAD)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>afwMath.makeStatistics(mi,<sp/>statistic,<sp/>sctrl).getValue()</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>maskArray<sp/>=<sp/>mask.getArray()</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>imageArray<sp/>=<sp/>mi.getImage().getArray()</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>badPixels<sp/>=<sp/>numpy.logical_and((maskArray<sp/>&amp;<sp/>BAD)<sp/>&gt;<sp/>0,<sp/>(maskArray<sp/>&amp;<sp/>INTRP)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>imageArray[:]<sp/>=<sp/>numpy.where(badPixels,<sp/>value,<sp/>imageArray)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>badPixels.sum(),<sp/>value</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a603f151e1e2a485deab5ab1636192bdd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">checkFilter(exposure,<sp/>filterList,<sp/>log):</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Check<sp/>to<sp/>see<sp/>if<sp/>an<sp/>exposure<sp/>is<sp/>in<sp/>a<sp/>filter<sp/>specified<sp/>by<sp/>a<sp/>list.</highlight></codeline>
<codeline lineno="1067"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1068"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>goal<sp/>of<sp/>this<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>to<sp/>provide<sp/>a<sp/>unified<sp/>filter<sp/>checking<sp/>interface</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>all<sp/>filter<sp/>dependent<sp/>stages.</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>exposure<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_exposure" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.Exposure</ref>`</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exposure<sp/>to<sp/>examine.</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>filterList<sp/>:<sp/>`list`<sp/>[`str`]</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>physical_filter<sp/>names<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>log<sp/>:<sp/>`logging.Logger`</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages.</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>:<sp/>`bool`</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>exposure</highlight><highlight class="stringliteral">&apos;s<sp/>filter<sp/>is<sp/>contained<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="1084"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1085"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(filterList)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>thisFilter<sp/>=<sp/>exposure.getFilter()</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>thisFilter<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.warning(</highlight><highlight class="stringliteral">&quot;No<sp/>FilterLabel<sp/>attached<sp/>to<sp/>this<sp/>exposure!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>thisPhysicalFilter<sp/>=<sp/><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1aabb1332b191223c8a8f3caa62c8f3df0" kindref="member">getPhysicalFilter</ref>(thisFilter,<sp/>log)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>thisPhysicalFilter<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>filterList:</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>thisFilter.bandLabel<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>filterList:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>log:</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.warning(</highlight><highlight class="stringliteral">&quot;Physical<sp/>filter<sp/>(%s)<sp/>should<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>band<sp/>%s<sp/>for<sp/>filter<sp/>configurations&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>thisPhysicalFilter,<sp/>thisFilter.bandLabel,<sp/>filterList)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1aabb1332b191223c8a8f3caa62c8f3df0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1aabb1332b191223c8a8f3caa62c8f3df0" kindref="member">getPhysicalFilter</ref>(filterLabel,<sp/>log):</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Get<sp/>the<sp/>physical<sp/>filter<sp/>label<sp/>associated<sp/>with<sp/>the<sp/>given<sp/>filterLabel.</highlight></codeline>
<codeline lineno="1106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>``filterLabel``<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>`</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">`<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>there<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>no<sp/>physicalLabel<sp/>attribute</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>associated<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>the<sp/>given<sp/>``filterLabel``,<sp/>the<sp/>returned<sp/>label<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>filterLabel<sp/>:<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_filter_label" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.FilterLabel</ref>`</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>`<ref refid="classlsst_1_1afw_1_1image_1_1_filter_label" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.FilterLabel</ref>`<sp/>object<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>which<sp/>to<sp/>derive<sp/>the</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical<sp/>filter<sp/>label.</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>log<sp/>:<sp/>`logging.Logger`</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger<sp/>to<sp/>handle<sp/>messages.</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>physicalFilter<sp/>:<sp/>`str`</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>value<sp/>returned<sp/>by<sp/>the<sp/>physicalLabel<sp/>attribute<sp/>of<sp/>``filterLabel``<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>exists,<sp/>otherwise<sp/>set<sp/>to<sp/>\</highlight><highlight class="stringliteral">&quot;Unknown\&quot;.</highlight></codeline>
<codeline lineno="1124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>filterLabel<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physicalFilter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.warning(</highlight><highlight class="stringliteral">&quot;filterLabel<sp/>is<sp/>None.<sp/><sp/>Setting<sp/>physicalFilter<sp/>to<sp/>\&quot;Unknown\&quot;.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physicalFilter<sp/>=<sp/>filterLabel.physicalLabel</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>RuntimeError:</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log.warning(</highlight><highlight class="stringliteral">&quot;filterLabel<sp/>has<sp/>no<sp/>physicalLabel<sp/>attribute.<sp/><sp/>Setting<sp/>physicalFilter<sp/>to<sp/>\&quot;Unknown\&quot;.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physicalFilter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>physicalFilter</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a333a6da67635c4b1563e75a8d3c2930a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelsst_1_1ip_1_1isr_1_1isr_functions_1a333a6da67635c4b1563e75a8d3c2930a" kindref="member">countMaskedPixels</ref>(maskedIm,<sp/>maskPlane):</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Count<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>in<sp/>a<sp/>given<sp/>mask<sp/>plane.</highlight></codeline>
<codeline lineno="1139"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskedIm<sp/>:<sp/>`~<ref refid="classlsst_1_1afw_1_1image_1_1_masked_image" kindref="compound" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">lsst.afw.image.MaskedImage</ref>`</highlight></codeline>
<codeline lineno="1143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Masked<sp/>image<sp/>to<sp/>examine.</highlight></codeline>
<codeline lineno="1144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskPlane<sp/>:<sp/>`str`</highlight></codeline>
<codeline lineno="1145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>mask<sp/>plane<sp/>to<sp/>examine.</highlight></codeline>
<codeline lineno="1146"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nPix<sp/>:<sp/>`int`</highlight></codeline>
<codeline lineno="1150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>pixels<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>the<sp/>requested<sp/>mask<sp/>plane.</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>maskBit<sp/>=<sp/>maskedIm.mask.getPlaneBitMask(maskPlane)</highlight></codeline>
<codeline lineno="1153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nPix<sp/>=<sp/>numpy.where(numpy.bitwise_and(maskedIm.mask.array,<sp/>maskBit))[0].flatten().size</highlight></codeline>
<codeline lineno="1154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nPix</highlight></codeline>
    </programlisting>
    <location file="python/lsst/ip/isr/isrFunctions.py"/>
  </compounddef>
</doxygen>
