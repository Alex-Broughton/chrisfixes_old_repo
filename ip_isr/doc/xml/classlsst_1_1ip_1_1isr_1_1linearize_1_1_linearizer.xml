<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer" kind="class" language="Python" prot="public">
    <compoundname>lsst::ip::isr::linearize::Linearizer</compoundname>
    <basecompoundref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib" prot="public" virt="non-virtual">lsst.ip.isr.calibType.IsrCalib</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a61dd6a345625bb7f150348d9cd446010" prot="private" static="yes" mutable="no">
        <type>string</type>
        <definition>string lsst::ip::isr.linearize.Linearizer::_OBSTYPE</definition>
        <argsstring></argsstring>
        <name>_OBSTYPE</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer._OBSTYPE</qualifiedname>
        <initializer>=  &quot;LINEARIZER&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="103" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a54c7d64534e1beaab7062f1af4e91054" prot="private" static="yes" mutable="no">
        <type>string</type>
        <definition>string lsst::ip::isr.linearize.Linearizer::_SCHEMA</definition>
        <argsstring></argsstring>
        <name>_SCHEMA</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer._SCHEMA</qualifiedname>
        <initializer>=  &apos;Gen3 <ref refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer" kindref="compound">Linearizer</ref>&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="104" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a4ba8b44afd1da72e3c68365ceb0d4655" prot="private" static="yes" mutable="no">
        <type>float</type>
        <definition>float lsst::ip::isr.linearize.Linearizer::_VERSION</definition>
        <argsstring></argsstring>
        <name>_VERSION</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer._VERSION</qualifiedname>
        <initializer>=  1.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="105" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6e589f2cc9d97a09a8c4b858948a1f2a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::hasLinearity</definition>
        <argsstring></argsstring>
        <name>hasLinearity</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.hasLinearity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="108" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a34cdc50aeb6e67ecd5b3ff49adfd2bc7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::override</definition>
        <argsstring></argsstring>
        <name>override</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.override</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="109" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a407b363e8794613dd8e74f7c027cdd03" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::ampNames</definition>
        <argsstring></argsstring>
        <name>ampNames</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.ampNames</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="111" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::linearityCoeffs</definition>
        <argsstring></argsstring>
        <name>linearityCoeffs</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.linearityCoeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="112" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::linearityType</definition>
        <argsstring></argsstring>
        <name>linearityType</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.linearityType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="113" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::linearityBBox</definition>
        <argsstring></argsstring>
        <name>linearityBBox</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.linearityBBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="114" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eb7667ee78d195f932667677474a9f2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::fitParams</definition>
        <argsstring></argsstring>
        <name>fitParams</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.fitParams</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="115" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a2d414924d4f7d9ccdcfd245fe52a2478" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::fitParamsErr</definition>
        <argsstring></argsstring>
        <name>fitParamsErr</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.fitParamsErr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="116" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac6e16cb534e4cd19adc3c4dc85ec9a2d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::fitChiSq</definition>
        <argsstring></argsstring>
        <name>fitChiSq</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.fitChiSq</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="117" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1af904c9b26ef5dc58a723d40353d20ddc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::fitResiduals</definition>
        <argsstring></argsstring>
        <name>fitResiduals</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.fitResiduals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="118" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a65ec95ac3c0b416675bc65444e732584" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::linearFit</definition>
        <argsstring></argsstring>
        <name>linearFit</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.linearFit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="119" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::tableData</definition>
        <argsstring></argsstring>
        <name>tableData</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.tableData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="120" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a21b69643438fee8f39e25d4c8b401071" prot="private" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::_detectorName</definition>
        <argsstring></argsstring>
        <name>_detectorName</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer._detectorName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="168" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6088bf14c2ae8cbf307fe5f04432c8d8" prot="private" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::_detectorSerial</definition>
        <argsstring></argsstring>
        <name>_detectorSerial</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer._detectorSerial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="169" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1adb5e4a42760ef225723cb9faece89f23" prot="private" static="no" mutable="no">
        <type></type>
        <definition>lsst::ip::isr.linearize.Linearizer::_detectorId</definition>
        <argsstring></argsstring>
        <name>_detectorId</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer._detectorId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="170" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae0aa7730409f6d77a8c2fcde09719748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.__init__</definition>
        <argsstring>(self, table=None, **kwargs)</argsstring>
        <name>__init__</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.__init__</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a8b0c7d628ed5e5b429f66ec5b2b4f25b">__init__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>table</type>
          <defname>table</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="107" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="107" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac104da4e9864ee2158139e640685b237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.updateMetadata</definition>
        <argsstring>(self, setDate=False, **kwargs)</argsstring>
        <name>updateMetadata</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.updateMetadata</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a800537ed1777875f9f9fd973a83c3809">updateMetadata</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>setDate</type>
          <defname>setDate</defname>
          <defval>False</defval>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Update metadata keywords with new values.

This calls the base class&apos;s method after ensuring the required
calibration keywords will be saved.

Parameters
----------
setDate : `bool`, optional
    Update the CALIBDATE fields in the metadata to the current
    time. Defaults to False.
kwargs :
    Other keyword parameters to set in the metadata.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="135" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="135" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ab439cf73c3ef86db0154126a42725a10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.fromDetector</definition>
        <argsstring>(self, detector)</argsstring>
        <name>fromDetector</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.fromDetector</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1aa4a68997772b1898843219a8d078e228">fromDetector</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="_detector_collection_8cc_1a6b9c564255ea8f8ae53bf14d81234de7" kindref="member" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">detector</ref></type>
          <defname>detector</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read linearity parameters from a detector.

Parameters
----------
detector : `lsst.afw.cameraGeom.detector`
    Input detector with parameters to use.

Returns
-------
calib : `lsst.ip.isr.Linearizer`
    The calibration constructed from the detector.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="155" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="155" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afb41f1cce2d7012d033b2de37c6e98b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.fromDict</definition>
        <argsstring>(cls, dictionary)</argsstring>
        <name>fromDict</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.fromDict</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a817599a7eef2221ba3908296dab05347">fromDict</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>dictionary</type>
          <defname>dictionary</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct a calibration from a dictionary of properties

Parameters
----------
dictionary : `dict`
    Dictionary of properties

Returns
-------
calib : `lsst.ip.isr.Linearity`
    Constructed calibration.

Raises
------
RuntimeError
    Raised if the supplied dictionary is for a different
    calibration.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="184" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="184" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a07615c1dadabee58e29f98e13b2cf408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.toDict</definition>
        <argsstring>(self)</argsstring>
        <name>toDict</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.toDict</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1aab4a381103b94dbea2acb727184db72f">toDict</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Return linearity parameters as a dict.

Returns
-------
outDict : `dict`:
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="236" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="236" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eafe7bba57e9a30503911fbcdc3f0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.fromTable</definition>
        <argsstring>(cls, tableList)</argsstring>
        <name>fromTable</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.fromTable</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1403d6fec5026193600341be1a426533">fromTable</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>tableList</type>
          <defname>tableList</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read linearity from a FITS file.

This method uses the `fromDict` method to create the
calibration, after constructing an appropriate dictionary from
the input tables.

Parameters
----------
tableList : `list` [`astropy.table.Table`]
    afwTable read from input file name.

Returns
-------
linearity : `~lsst.ip.isr.linearize.Linearizer``
    Linearity parameters.

Notes
-----
The method reads a FITS file with 1 or 2 extensions. The metadata is
read from the header of extension 1, which must exist.  Then the table
is loaded, and  the [&apos;AMPLIFIER_NAME&apos;, &apos;TYPE&apos;, &apos;COEFFS&apos;, &apos;BBOX_X0&apos;,
&apos;BBOX_Y0&apos;, &apos;BBOX_DX&apos;, &apos;BBOX_DY&apos;] columns are read and used to set each
dictionary by looping over rows.
Extension 2 is then attempted to read in the try block (which only
exists for lookup tables). It has a column named &apos;LOOKUP_VALUES&apos; that
contains a vector of the lookup entries in each row.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="267" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="267" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afea3e860672de822d9f47febf0402698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.toTable</definition>
        <argsstring>(self)</argsstring>
        <name>toTable</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.toTable</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a247f0c08c122d6c0da72f764b5e4c466">toTable</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct a list of tables containing the information in this
calibration.

The list of tables should create an identical calibration
after being passed to this class&apos;s fromTable method.

Returns
-------
tableList : `list` [`astropy.table.Table`]
    List of tables containing the linearity calibration
    information.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="330" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="330" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a1500f9ae31b84b574481937b71edd3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.getLinearityTypeByName</definition>
        <argsstring>(self, linearityTypeName)</argsstring>
        <name>getLinearityTypeByName</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.getLinearityTypeByName</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>linearityTypeName</type>
          <defname>linearityTypeName</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Determine the linearity class to use from the type name.

Parameters
----------
linearityTypeName : str
    String name of the linearity type that is needed.

Returns
-------
linearityType : `~lsst.ip.isr.linearize.LinearizeBase`
    The appropriate linearity class to use.  If no matching class
    is found, `None` is returned.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="367" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="367" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a26004523c92f710282c06f26ed35b220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.validate</definition>
        <argsstring>(self, detector=None, amplifier=None)</argsstring>
        <name>validate</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.validate</qualifiedname>
        <reimplements refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a21399d7c477e8126bb3e93736125eacf">validate</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="_detector_collection_8cc_1a6b9c564255ea8f8ae53bf14d81234de7" kindref="member" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">detector</ref></type>
          <defname>detector</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>amplifier</type>
          <defname>amplifier</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Validate linearity for a detector/amplifier.

Parameters
----------
detector : `lsst.afw.cameraGeom.Detector`, optional
    Detector to validate, along with its amplifiers.
amplifier : `lsst.afw.cameraGeom.Amplifier`, optional
    Single amplifier to validate.

Raises
------
RuntimeError
    Raised if there is a mismatch in linearity parameters, and
    the cameraGeom parameters are not being overridden.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="391" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="391" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a7996239d322183ebab7b1b71e08d596c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lsst.ip.isr.linearize.Linearizer.applyLinearity</definition>
        <argsstring>(self, image, detector=None, log=None)</argsstring>
        <name>applyLinearity</name>
        <qualifiedname>lsst::ip::isr.linearize.Linearizer.applyLinearity</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>image</type>
          <defname>image</defname>
        </param>
        <param>
          <type><ref refid="_detector_collection_8cc_1a6b9c564255ea8f8ae53bf14d81234de7" kindref="member" external="/sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/share/eups/Linux64/afw/g2c743f43ab+04f223c4f0/doc/afw.tag">detector</ref></type>
          <defname>detector</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib_1a1a64908430e0e0c48dde22a7b41d8bc2" kindref="member">log</ref></type>
          <defname>log</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Apply the linearity to an image.

If the linearity parameters are populated, use those,
otherwise use the values from the detector.

Parameters
----------
image : `~lsst.afw.image.image`
    Image to correct.
detector : `~lsst.afw.cameraGeom.detector`
    Detector to use for linearity parameters if not already
    populated.
log : `~logging.Logger`, optional
    Log object to use for logging.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="python/lsst/ip/isr/linearize.py" line="451" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="451" bodyend="497"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Parameter set for linearization.

These parameters are included in `lsst.afw.cameraGeom.Amplifier`, but
should be accessible externally to allow for testing.

Parameters
----------
table : `numpy.array`, optional
    Lookup table; a 2-dimensional array of floats:

    - one row for each row index (value of coef[0] in the amplifier)
    - one column for each image value

    To avoid copying the table the last index should vary fastest
    (numpy default &quot;C&quot; order)
detector : `lsst.afw.cameraGeom.Detector`, optional
    Detector object.  Passed to self.fromDetector() on init.
log : `logging.Logger`, optional
    Logger to handle messages.
kwargs : `dict`, optional
    Other keyword arguments to pass to the parent init.

Raises
------
RuntimeError
    Raised if the supplied table is not 2D, or if the table has fewer
    columns than rows (indicating that the indices are swapped).

Notes
-----
The linearizer attributes stored are:

hasLinearity : `bool`
    Whether a linearity correction is defined for this detector.
override : `bool`
    Whether the detector parameters should be overridden.
ampNames : `list` [`str`]
    List of amplifier names to correct.
linearityCoeffs : `dict` [`str`, `numpy.array`]
    Coefficients to use in correction.  Indexed by amplifier
    names.  The format of the array depends on the type of
    correction to apply.
linearityType : `dict` [`str`, `str`]
    Type of correction to use, indexed by amplifier names.
linearityBBox : `dict` [`str`, `lsst.geom.Box2I`]
    Bounding box the correction is valid over, indexed by
    amplifier names.
fitParams : `dict` [`str`, `numpy.array`], optional
    Linearity fit parameters used to construct the correction
    coefficients, indexed as above.
fitParamsErr : `dict` [`str`, `numpy.array`], optional
    Uncertainty values of the linearity fit parameters used to
    construct the correction coefficients, indexed as above.
fitChiSq : `dict` [`str`, `float`], optional
    Chi-squared value of the linearity fit, indexed as above.
fitResiduals : `dict` [`str`, `numpy.array`], optional
    Residuals of the fit, indexed as above. Used for
    calculating photdiode corrections
linearFit : The linear fit to the low flux region of the curve.
    [intercept, slope].
tableData : `numpy.array`, optional
    Lookup table data for the linearity correction.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>abc::ABC</label>
      </node>
      <node id="1">
        <label>lsst.ip.isr.linearize.Linearizer</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>lsst.ip.isr.calibType.IsrCalib</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>abc::ABC</label>
      </node>
      <node id="1">
        <label>lsst.ip.isr.linearize.Linearizer</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>lsst.ip.isr.calibType.IsrCalib</label>
        <link refid="classlsst_1_1ip_1_1isr_1_1calib_type_1_1_isr_calib"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="python/lsst/ip/isr/linearize.py" line="39" column="1" bodyfile="python/lsst/ip/isr/linearize.py" bodystart="39" bodyend="497"/>
    <listofallmembers>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae0aa7730409f6d77a8c2fcde09719748" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>__init__</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1adb5e4a42760ef225723cb9faece89f23" prot="private" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>_detectorId</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a21b69643438fee8f39e25d4c8b401071" prot="private" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>_detectorName</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6088bf14c2ae8cbf307fe5f04432c8d8" prot="private" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>_detectorSerial</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a61dd6a345625bb7f150348d9cd446010" prot="private" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>_OBSTYPE</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a54c7d64534e1beaab7062f1af4e91054" prot="private" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>_SCHEMA</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a4ba8b44afd1da72e3c68365ceb0d4655" prot="private" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>_VERSION</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a407b363e8794613dd8e74f7c027cdd03" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>ampNames</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a7996239d322183ebab7b1b71e08d596c" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>applyLinearity</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac6e16cb534e4cd19adc3c4dc85ec9a2d" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>fitChiSq</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eb7667ee78d195f932667677474a9f2" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>fitParams</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a2d414924d4f7d9ccdcfd245fe52a2478" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>fitParamsErr</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1af904c9b26ef5dc58a723d40353d20ddc" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>fitResiduals</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ab439cf73c3ef86db0154126a42725a10" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>fromDetector</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afb41f1cce2d7012d033b2de37c6e98b4" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>fromDict</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a8eafe7bba57e9a30503911fbcdc3f0bd" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>fromTable</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a1500f9ae31b84b574481937b71edd3bb" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>getLinearityTypeByName</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6e589f2cc9d97a09a8c4b858948a1f2a" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>hasLinearity</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a65ec95ac3c0b416675bc65444e732584" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>linearFit</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a851d6124dfbdf4f510f12de8d784614a" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>linearityBBox</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a6b12fcb836ee3bdf7e993a7ca4aac7bd" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>linearityCoeffs</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a9a3c6e14fc17a2e75bb4c1d4d059792a" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>linearityType</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a34cdc50aeb6e67ecd5b3ff49adfd2bc7" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>override</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ae020e818cf03f08e1359277351079026" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>tableData</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a07615c1dadabee58e29f98e13b2cf408" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>toDict</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1afea3e860672de822d9f47febf0402698" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>toTable</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1ac104da4e9864ee2158139e640685b237" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>updateMetadata</name></member>
      <member refid="classlsst_1_1ip_1_1isr_1_1linearize_1_1_linearizer_1a26004523c92f710282c06f26ed35b220" prot="public" virt="non-virtual"><scope>lsst::ip::isr::linearize::Linearizer</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
