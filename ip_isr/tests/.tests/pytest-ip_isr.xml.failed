========================================================================= test session starts ==========================================================================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr
configfile: setup.cfg
plugins: hypothesis-6.72.0, remotedata-0.4.0, filter-subpackage-0.1.1, astropy-0.10.0, asdf-2.15.0, anyio-3.6.2, astropy-header-0.1.2, session2file-0.1.11, arraydiff-0.3, flake8-1.1.1, mock-3.10.0, xdist-3.2.1, openfiles-0.5.0, typeguard-3.0.2, subtests-0.10.0, doctestplus-0.12.1, profiling-1.7.0, cov-4.0.0
collecting ... 
collecting 30 items                                                                                                                                                    
collected 220 items                                                                                                                                                    
run-last-failure: no previously failed tests, not deselecting items.

doc/conf.py .                                                                                                                                                    [  0%]
python/lsst/__init__.py .                                                                                                                                        [  0%]
python/lsst/ip/__init__.py .                                                                                                                                     [  1%]
python/lsst/ip/isr/__init__.py .                                                                                                                                 [  1%]
python/lsst/ip/isr/ampOffset.py .                                                                                                                                [  2%]
python/lsst/ip/isr/assembleCcdTask.py .                                                                                                                          [  2%]
python/lsst/ip/isr/brighterFatterKernel.py .                                                                                                                     [  3%]
python/lsst/ip/isr/calibType.py .                                                                                                                                [  3%]
python/lsst/ip/isr/crosstalk.py .                                                                                                                                [  4%]
python/lsst/ip/isr/defects.py .                                                                                                                                  [  4%]
python/lsst/ip/isr/deferredCharge.py .                                                                                                                           [  5%]
python/lsst/ip/isr/fringe.py .                                                                                                                                   [  5%]
python/lsst/ip/isr/isrFunctions.py .                                                                                                                             [  5%]
python/lsst/ip/isr/isrMock.py .                                                                                                                                  [  6%]
python/lsst/ip/isr/isrQa.py .                                                                                                                                    [  6%]
python/lsst/ip/isr/isrStatistics.py F                                                                                                                            [  7%]
python/lsst/ip/isr/isrTask.py .                                                                                                                                  [  7%]
python/lsst/ip/isr/linearize.py .                                                                                                                                [  8%]
python/lsst/ip/isr/masking.py .                                                                                                                                  [  8%]
python/lsst/ip/isr/overscan.py .                                                                                                                                 [  9%]
python/lsst/ip/isr/photodiode.py .                                                                                                                               [  9%]
python/lsst/ip/isr/photodiodeCorrection.py .                                                                                                                     [ 10%]
python/lsst/ip/isr/ptcDataset.py .                                                                                                                               [ 10%]
python/lsst/ip/isr/straylight.py .                                                                                                                               [ 10%]
python/lsst/ip/isr/transmissionCurve.py .                                                                                                                        [ 11%]
python/lsst/ip/isr/version.py .                                                                                                                                  [ 11%]
python/lsst/ip/isr/vignette.py .                                                                                                                                 [ 12%]
tests/test_applyLookupTable.py ....                                                                                                                              [ 14%]
tests/test_assembleCcd.py .......                                                                                                                                [ 17%]
tests/test_biasAndDarkCorrection.py ........                                                                                                                     [ 20%]
tests/test_brighterFatter.py ....                                                                                                                                [ 22%]
tests/test_calibType.py ....                                                                                                                                     [ 24%]
tests/test_crosstalk.py .......                                                                                                                                  [ 27%]
tests/test_defect.py ....                                                                                                                                        [ 29%]
tests/test_defects.py ......                                                                                                                                     [ 32%]
tests/test_deferredCharge.py ......                                                                                                                              [ 35%]
tests/test_empiricalVariance.py ...                                                                                                                              [ 36%]
tests/test_flatAndIlluminationCorrection.py .........                                                                                                            [ 40%]
tests/test_fringes.py ........                                                                                                                                   [ 44%]
tests/test_isrFunctions.py ......................                                                                                                                [ 54%]
tests/test_isrMisc.py ......                                                                                                                                     [ 56%]
tests/test_isrMock.py ......                                                                                                                                     [ 59%]
tests/test_isrQa.py ...                                                                                                                                          [ 60%]
tests/test_isrStatistics.py ...                                                                                                                                  [ 62%]
tests/test_isrTask.py ......................                                                                                                                     [ 72%]
tests/test_linearize.py ...                                                                                                                                      [ 73%]
tests/test_linearizeLookupTable.py ......                                                                                                                        [ 76%]
tests/test_linearizeSquared.py .....                                                                                                                             [ 78%]
tests/test_maskNans.py ....                                                                                                                                      [ 80%]
tests/test_overscanCorrection.py ...........                                                                                                                     [ 85%]
tests/test_photodiode.py .....                                                                                                                                   [ 87%]
tests/test_photodiodeCorrection.py ....                                                                                                                          [ 89%]
tests/test_ptcDataset.py ........                                                                                                                                [ 93%]
tests/test_saturationCorrection.py ...                                                                                                                           [ 94%]
tests/test_setValidPolygonIntersect.py ...                                                                                                                       [ 95%]
tests/test_suspectMasking.py .....                                                                                                                               [ 98%]
tests/test_transmissionCurve.py ....                                                                                                                             [100%]

=============================================================================== FAILURES ===============================================================================
_______________________________________________ FLAKE8-check(ignoring E133 E226 E228 N802 N803 N806 N812 N815 N816 W503) _______________________________________________
/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py:245:13: F841 local variable 'gain' is assigned to but never used
/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py:286:42: E261 at least two spaces before inline comment

-------------------------------------------------------------------------- Captured log call ---------------------------------------------------------------------------
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--count, action='store_true', help='Print total number of errors and warnings to standard error and set the exit code to 1 if total is not empty.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--diff, action='store_true', help='Report changes only within line number ranges in the unified diff provided on standard in by the user.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--format, default='default', help='Format errors according to the chosen formatter.', metavar='format')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--ignore, default='E121,E123,E126,E226,E24,E704,W503,W504', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of errors and warnings to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: %(default)s)', metavar='errors')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--extend-ignore, default='', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of errors and warnings to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--select, default='E,F,W,C90', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of errors and warnings to enable. For example, ``--select=E4,E51,W234``. (Default: %(default)s)', metavar='errors')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--extend-select, default='', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of errors and warnings to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--statistics, action='store_true', help='Count errors and warnings.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--enable-extensions, default='', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='Enable plugins and extensions that are otherwise disabled by default')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--bug-report, action=functools.partial(<class 'flake8.main.debug.DebugAction'>, option_manager=<flake8.options.manager.OptionManager object at 0x7f1b43f463e0>), nargs=0, help='Print information necessary when preparing a bug report')".
[35mDEBUG   [0m flake8.options.config:config.py:128 Found local configuration files: ['/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/setup.cfg']
[32mINFO    [0m flake8.plugins.manager:manager.py:260 Loading entry-points for "flake8.extension".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="C90", entry_point="mccabe:McCabeChecker") for plugin "C90".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="F", entry_point="flake8.plugins.pyflakes:FlakesChecker") for plugin "F".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="N8", entry_point="pep8ext_naming:NamingChecker") for plugin "N8".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.ambiguous_identifier", entry_point="pycodestyle:ambiguous_identifier") for plugin "pycodestyle.ambiguous_identifier".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.bare_except", entry_point="pycodestyle:bare_except") for plugin "pycodestyle.bare_except".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.blank_lines", entry_point="pycodestyle:blank_lines") for plugin "pycodestyle.blank_lines".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.break_after_binary_operator", entry_point="pycodestyle:break_after_binary_operator") for plugin "pycodestyle.break_after_binary_operator".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.break_before_binary_operator", entry_point="pycodestyle:break_before_binary_operator") for plugin "pycodestyle.break_before_binary_operator".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.comparison_negative", entry_point="pycodestyle:comparison_negative") for plugin "pycodestyle.comparison_negative".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.comparison_to_singleton", entry_point="pycodestyle:comparison_to_singleton") for plugin "pycodestyle.comparison_to_singleton".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.comparison_type", entry_point="pycodestyle:comparison_type") for plugin "pycodestyle.comparison_type".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.compound_statements", entry_point="pycodestyle:compound_statements") for plugin "pycodestyle.compound_statements".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.continued_indentation", entry_point="pycodestyle:continued_indentation") for plugin "pycodestyle.continued_indentation".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.explicit_line_join", entry_point="pycodestyle:explicit_line_join") for plugin "pycodestyle.explicit_line_join".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.extraneous_whitespace", entry_point="pycodestyle:extraneous_whitespace") for plugin "pycodestyle.extraneous_whitespace".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.imports_on_separate_lines", entry_point="pycodestyle:imports_on_separate_lines") for plugin "pycodestyle.imports_on_separate_lines".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.indentation", entry_point="pycodestyle:indentation") for plugin "pycodestyle.indentation".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.maximum_doc_length", entry_point="pycodestyle:maximum_doc_length") for plugin "pycodestyle.maximum_doc_length".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.maximum_line_length", entry_point="pycodestyle:maximum_line_length") for plugin "pycodestyle.maximum_line_length".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.missing_whitespace", entry_point="pycodestyle:missing_whitespace") for plugin "pycodestyle.missing_whitespace".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.missing_whitespace_after_import_keyword", entry_point="pycodestyle:missing_whitespace_after_import_keyword") for plugin "pycodestyle.missing_whitespace_after_import_keyword".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.missing_whitespace_around_operator", entry_point="pycodestyle:missing_whitespace_around_operator") for plugin "pycodestyle.missing_whitespace_around_operator".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.module_imports_on_top_of_file", entry_point="pycodestyle:module_imports_on_top_of_file") for plugin "pycodestyle.module_imports_on_top_of_file".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.python_3000_async_await_keywords", entry_point="pycodestyle:python_3000_async_await_keywords") for plugin "pycodestyle.python_3000_async_await_keywords".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.python_3000_backticks", entry_point="pycodestyle:python_3000_backticks") for plugin "pycodestyle.python_3000_backticks".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.python_3000_has_key", entry_point="pycodestyle:python_3000_has_key") for plugin "pycodestyle.python_3000_has_key".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.python_3000_invalid_escape_sequence", entry_point="pycodestyle:python_3000_invalid_escape_sequence") for plugin "pycodestyle.python_3000_invalid_escape_sequence".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.python_3000_not_equal", entry_point="pycodestyle:python_3000_not_equal") for plugin "pycodestyle.python_3000_not_equal".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.python_3000_raise_comma", entry_point="pycodestyle:python_3000_raise_comma") for plugin "pycodestyle.python_3000_raise_comma".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.tabs_obsolete", entry_point="pycodestyle:tabs_obsolete") for plugin "pycodestyle.tabs_obsolete".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.tabs_or_spaces", entry_point="pycodestyle:tabs_or_spaces") for plugin "pycodestyle.tabs_or_spaces".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.trailing_blank_lines", entry_point="pycodestyle:trailing_blank_lines") for plugin "pycodestyle.trailing_blank_lines".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.trailing_whitespace", entry_point="pycodestyle:trailing_whitespace") for plugin "pycodestyle.trailing_whitespace".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.whitespace_around_comma", entry_point="pycodestyle:whitespace_around_comma") for plugin "pycodestyle.whitespace_around_comma".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.whitespace_around_keywords", entry_point="pycodestyle:whitespace_around_keywords") for plugin "pycodestyle.whitespace_around_keywords".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.whitespace_around_named_parameter_equals", entry_point="pycodestyle:whitespace_around_named_parameter_equals") for plugin "pycodestyle.whitespace_around_named_parameter_equals".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.whitespace_around_operator", entry_point="pycodestyle:whitespace_around_operator") for plugin "pycodestyle.whitespace_around_operator".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.whitespace_before_comment", entry_point="pycodestyle:whitespace_before_comment") for plugin "pycodestyle.whitespace_before_comment".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pycodestyle.whitespace_before_parameters", entry_point="pycodestyle:whitespace_before_parameters") for plugin "pycodestyle.whitespace_before_parameters".
[32mINFO    [0m flake8.plugins.manager:manager.py:260 Loading entry-points for "flake8.report".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="default", entry_point="flake8.formatting.default:Default") for plugin "default".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="pylint", entry_point="flake8.formatting.default:Pylint") for plugin "pylint".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="quiet-filename", entry_point="flake8.formatting.default:FilenameOnly") for plugin "quiet-filename".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:285 Loaded Plugin(name="quiet-nothing", entry_point="flake8.formatting.default:Nothing") for plugin "quiet-nothing".
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "C90" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "F" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "N8" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.ambiguous_identifier" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.bare_except" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.blank_lines" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.break_after_binary_operator" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.break_before_binary_operator" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.comparison_negative" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.comparison_to_singleton" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.comparison_type" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.compound_statements" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.continued_indentation" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.explicit_line_join" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.extraneous_whitespace" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.imports_on_separate_lines" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.indentation" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.maximum_doc_length" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.maximum_line_length" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.missing_whitespace" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.missing_whitespace_after_import_keyword" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.missing_whitespace_around_operator" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.module_imports_on_top_of_file" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.python_3000_async_await_keywords" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.python_3000_backticks" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.python_3000_has_key" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.python_3000_invalid_escape_sequence" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.python_3000_not_equal" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.python_3000_raise_comma" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.tabs_obsolete" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.tabs_or_spaces" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.trailing_blank_lines" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.trailing_whitespace" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.whitespace_around_comma" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.whitespace_around_keywords" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.whitespace_around_named_parameter_equals" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.whitespace_around_operator" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.whitespace_before_comment" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pycodestyle.whitespace_before_parameters" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "default" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "pylint" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "quiet-filename" from entry-point.
[32mINFO    [0m flake8.plugins.manager:manager.py:159 Loading plugin "quiet-nothing" from entry-point.
[35mDEBUG   [0m flake8.plugins.manager:manager.py:214 Registering options from plugin "C90" on OptionManager <flake8.options.manager.OptionManager object at 0x7f1b43f463e0>
[33mWARNING [0m flake8.options.manager:manager.py:217 option --max-complexity: please update from optparse string `type=` to argparse callable `type=` -- this will be an error in the future
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
[35mDEBUG   [0m flake8.options.manager:manager.py:433 Removing ['C90'] from the default ignore list
[35mDEBUG   [0m flake8.options.manager:manager.py:438 Attempted to remove C90 from default ignore but it was not a member of the list.
[35mDEBUG   [0m flake8.options.manager:manager.py:461 Extending default select list with ['C90']
[35mDEBUG   [0m flake8.plugins.manager:manager.py:214 Registering options from plugin "F" on OptionManager <flake8.options.manager.OptionManager object at 0x7f1b43f463e0>
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
[35mDEBUG   [0m flake8.options.manager:manager.py:433 Removing ['F'] from the default ignore list
[35mDEBUG   [0m flake8.options.manager:manager.py:438 Attempted to remove F from default ignore but it was not a member of the list.
[35mDEBUG   [0m flake8.options.manager:manager.py:461 Extending default select list with ['F']
[35mDEBUG   [0m flake8.plugins.manager:manager.py:214 Registering options from plugin "N8" on OptionManager <flake8.options.manager.OptionManager object at 0x7f1b43f463e0>
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--ignore-names, default=['setUp', 'tearDown', 'setUpClass', 'tearDownClass', 'setUpModule', 'tearDownModule', 'asyncSetUp', 'asyncTearDown', 'setUpTestData', 'failureException', 'longMessage', 'maxDiff'], type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='List of names or glob patterns the pep8-naming plugin should ignore. (Defaults to %(default)s)')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--classmethod-decorators, default=['classmethod'], type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='List of method decorators pep8-naming plugin should consider classmethods (Defaults to %(default)s)')".
[35mDEBUG   [0m flake8.options.manager:manager.py:424 Registered option "Option(--staticmethod-decorators, default=['staticmethod'], type=functools.partial(<function _flake8_normalize at 0x7f1b676f1090>, comma_separated_list=True, normalize_paths=False), help='List of method decorators pep8-naming plugin should consider staticmethods (Defaults to %(default)s)')".
[35mDEBUG   [0m flake8.options.manager:manager.py:451 Extending default ignore list with ['N818']
[35mDEBUG   [0m flake8.options.manager:manager.py:433 Removing ['N8'] from the default ignore list
[35mDEBUG   [0m flake8.options.manager:manager.py:438 Attempted to remove N8 from default ignore but it was not a member of the list.
[35mDEBUG   [0m flake8.options.manager:manager.py:461 Extending default select list with ['N8']
[35mDEBUG   [0m flake8.options.config:config.py:128 Found local configuration files: ['/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/setup.cfg']
[35mDEBUG   [0m flake8.options.config:config.py:218 Parsing local configuration files.
[35mDEBUG   [0m flake8.options.config:config.py:197 Option "max-line-length" returned value: 110
[35mDEBUG   [0m flake8.options.config:config.py:171 110 has been normalized to 110 for option "max_line_length"
[35mDEBUG   [0m flake8.options.config:config.py:197 Option "max-doc-length" returned value: 79
[35mDEBUG   [0m flake8.options.config:config.py:171 79 has been normalized to 79 for option "max_doc_length"
[35mDEBUG   [0m flake8.options.config:config.py:197 Option "ignore" returned value: 'E133, E226, E228, N802, N803, N806, N812, N815, N816, W503'
[35mDEBUG   [0m flake8.options.config:config.py:171 'E133, E226, E228, N802, N803, N806, N812, N815, N816, W503' has been normalized to ['E133', 'E226', 'E228', 'N802', 'N803', 'N806', 'N812', 'N815', 'N816', 'W503'] for option "ignore"
[35mDEBUG   [0m flake8.options.config:config.py:197 Option "exclude" returned value: '\nassembleCcdTask.py E266\nbin,\ndoc/conf.py,\n**/*/__init__.py,\n**/*/version.py,\ntests/.tests'
[35mDEBUG   [0m flake8.options.config:config.py:171 '\nassembleCcdTask.py E266\nbin,\ndoc/conf.py,\n**/*/__init__.py,\n**/*/version.py,\ntests/.tests' has been normalized to ['assembleCcdTask.py', 'E266', 'bin', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/doc/conf.py', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/**/*/__init__.py', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/**/*/version.py', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/tests/.tests'] for option "exclude"
[35mDEBUG   [0m flake8.options.aggregator:aggregator.py:55 Extended default ignore list: ['N818']
[35mDEBUG   [0m flake8.options.aggregator:aggregator.py:60 Merged default ignore list: ['E123', 'W503', 'E704', 'E226', 'W504', 'N818', 'E121', 'E24', 'E126']
[35mDEBUG   [0m flake8.options.aggregator:aggregator.py:63 Extended default select list: ['C90', 'N8', 'F']
[35mDEBUG   [0m flake8.options.aggregator:aggregator.py:76 Overriding default value of (79) for "max_line_length" with (110)
[35mDEBUG   [0m flake8.options.aggregator:aggregator.py:76 Overriding default value of (None) for "max_doc_length" with (79)
[35mDEBUG   [0m flake8.options.aggregator:aggregator.py:76 Overriding default value of (['E123', 'W503', 'E704', 'E226', 'W504', 'N818', 'E121', 'E24', 'E126']) for "ignore" with (['E133', 'E226', 'E228', 'N802', 'N803', 'N806', 'N812', 'N815', 'N816', 'W503'])
[35mDEBUG   [0m flake8.options.aggregator:aggregator.py:76 Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.eggs', '*.egg']) for "exclude" with (['assembleCcdTask.py', 'E266', 'bin', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/doc/conf.py', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/**/*/__init__.py', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/**/*/version.py', '/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/tests/.tests'])
[35mDEBUG   [0m flake8.plugins.manager:manager.py:193 Providing options to plugin "C90".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:193 Providing options to plugin "F".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:193 Providing options to plugin "N8".
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N801" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N801" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N801" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N818" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N818" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N818" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N802" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N802" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N802" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N807" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N807" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N807" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N803" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N803" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N803" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N804" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N804" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N804" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N805" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N805" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N805" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N811" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N811" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N811" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N812" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N812" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N812" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N813" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N813" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N813" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N814" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N814" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N814" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N817" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N817" to be "Ignored.Implicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N817" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N806" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N806" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N806" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N815" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N815" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N815" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N816" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N816" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N816" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.plugins.manager:manager.py:375 Retrieving plugin for "default".
[35mDEBUG   [0m flake8.plugins.manager:manager.py:370 Checking for "default" in plugin type manager.
[35mDEBUG   [0m flake8.plugins.manager:manager.py:375 Retrieving plugin for "default".
[32mINFO    [0m flake8.checker:checker.py:323 Making checkers
[35mDEBUG   [0m flake8.checker:utils.py:436 "/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py" has not been excluded
[32mINFO    [0m flake8.checker:checker.py:231 Checking 1 files
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'C90', 'parameters': {'tree': True, 'filename': True}, 'parameter_names': ['tree', 'filename'], 'plugin': <class 'mccabe.McCabeChecker'>, 'plugin_name': 'mccabe'} with {'tree': <ast.Module object at 0x7f1b42b45630>}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'F', 'parameters': {'tree': True, 'file_tokens': True, 'filename': True}, 'parameter_names': ['tree', 'file_tokens', 'filename'], 'plugin': <class 'flake8.plugins.pyflakes.FlakesChecker'>, 'plugin_name': 'pyflakes'} with {'tree': <ast.Module object at 0x7f1b42b45630>}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'N8', 'parameters': {'tree': True, 'filename': True}, 'parameter_names': ['tree', 'filename'], 'plugin': <class 'pep8ext_naming.NamingChecker'>, 'plugin_name': 'naming'} with {'tree': <ast.Module object at 0x7f1b42b45630>}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This file is part of ip_isr.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This file is part of ip_isr.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This file is part of ip_isr.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This file is part of ip_isr.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This file is part of ip_isr.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# Developed for the LSST Data Management System.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# Developed for the LSST Data Management System.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# Developed for the LSST Data Management System.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# Developed for the LSST Data Management System.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# Developed for the LSST Data Management System.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This product includes software developed by the LSST Project\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This product includes software developed by the LSST Project\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This product includes software developed by the LSST Project\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This product includes software developed by the LSST Project\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This product includes software developed by the LSST Project\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (https://www.lsst.org).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (https://www.lsst.org).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (https://www.lsst.org).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (https://www.lsst.org).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (https://www.lsst.org).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# See the COPYRIGHT file at the top-level directory of this distribution\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# See the COPYRIGHT file at the top-level directory of this distribution\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# See the COPYRIGHT file at the top-level directory of this distribution\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# See the COPYRIGHT file at the top-level directory of this distribution\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# See the COPYRIGHT file at the top-level directory of this distribution\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# for details of code ownership.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# for details of code ownership.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# for details of code ownership.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# for details of code ownership.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# for details of code ownership.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is free software: you can redistribute it and/or modify\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is free software: you can redistribute it and/or modify\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is free software: you can redistribute it and/or modify\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is free software: you can redistribute it and/or modify\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is free software: you can redistribute it and/or modify\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# it under the terms of the GNU General Public License as published by\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# it under the terms of the GNU General Public License as published by\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# it under the terms of the GNU General Public License as published by\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# it under the terms of the GNU General Public License as published by\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# it under the terms of the GNU General Public License as published by\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# the Free Software Foundation, either version 3 of the License, or\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# the Free Software Foundation, either version 3 of the License, or\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# the Free Software Foundation, either version 3 of the License, or\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# the Free Software Foundation, either version 3 of the License, or\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# the Free Software Foundation, either version 3 of the License, or\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (at your option) any later version.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (at your option) any later version.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (at your option) any later version.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (at your option) any later version.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# (at your option) any later version.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is distributed in the hope that it will be useful,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is distributed in the hope that it will be useful,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is distributed in the hope that it will be useful,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is distributed in the hope that it will be useful,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# This program is distributed in the hope that it will be useful,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# but WITHOUT ANY WARRANTY; without even the implied warranty of\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# but WITHOUT ANY WARRANTY; without even the implied warranty of\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# but WITHOUT ANY WARRANTY; without even the implied warranty of\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# but WITHOUT ANY WARRANTY; without even the implied warranty of\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# but WITHOUT ANY WARRANTY; without even the implied warranty of\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# GNU General Public License for more details.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# GNU General Public License for more details.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# GNU General Public License for more details.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# GNU General Public License for more details.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# GNU General Public License for more details.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '#\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# You should have received a copy of the GNU General Public License\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# You should have received a copy of the GNU General Public License\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# You should have received a copy of the GNU General Public License\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# You should have received a copy of the GNU General Public License\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# You should have received a copy of the GNU General Public License\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '__all__ = ["IsrStatisticsTaskConfig", "IsrStatisticsTask"]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '__all__ = ["IsrStatisticsTaskConfig", "IsrStatisticsTask"]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '__all__ = ["IsrStatisticsTaskConfig", "IsrStatisticsTask"]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '__all__ = ["IsrStatisticsTaskConfig", "IsrStatisticsTask"]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '__all__ = ["IsrStatisticsTaskConfig", "IsrStatisticsTask"]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '__all__ = ["xxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx"]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import numpy as np\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import numpy as np\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import numpy as np\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import numpy as np\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import numpy as np\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "import numpy as np"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import numpy as np'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from scipy.signal.windows import hamming, hann, gaussian\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from scipy.signal.windows import hamming, hann, gaussian\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from scipy.signal.windows import hamming, hann, gaussian\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from scipy.signal.windows import hamming, hann, gaussian\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from scipy.signal.windows import hamming, hann, gaussian\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "from scipy.signal.windows import hamming, hann, gaussian"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from scipy.signal.windows import hamming, hann, gaussian'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.math as afwMath\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.math as afwMath\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.math as afwMath\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.math as afwMath\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.math as afwMath\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "import lsst.afw.math as afwMath"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.math as afwMath'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.image as afwImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.image as afwImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.image as afwImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.image as afwImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.afw.image as afwImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "import lsst.afw.image as afwImage"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.afw.image as afwImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pipe.base as pipeBase\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pipe.base as pipeBase\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pipe.base as pipeBase\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pipe.base as pipeBase\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pipe.base as pipeBase\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "import lsst.pipe.base as pipeBase"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pipe.base as pipeBase'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pex.config as pexConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pex.config as pexConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pex.config as pexConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pex.config as pexConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'import lsst.pex.config as pexConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "import lsst.pex.config as pexConfig"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'import lsst.pex.config as pexConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from lsst.afw.cameraGeom import ReadoutCorner\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from lsst.afw.cameraGeom import ReadoutCorner\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from lsst.afw.cameraGeom import ReadoutCorner\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from lsst.afw.cameraGeom import ReadoutCorner\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'from lsst.afw.cameraGeom import ReadoutCorner\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "from lsst.afw.cameraGeom import ReadoutCorner"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'from lsst.afw.cameraGeom import ReadoutCorner'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "class IsrStatisticsTaskConfig(pexConfig.Config):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTaskConfig(pexConfig.Config):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Image statistics options.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Image statistics options.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Image statistics options.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Image statistics options.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Image statistics options.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doCtiStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doCtiStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doCtiStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doCtiStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doCtiStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure CTI statistics from image and overscans?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure CTI statistics from image and overscans?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure CTI statistics from image and overscans?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure CTI statistics from image and overscans?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure CTI statistics from image and overscans?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doCtiStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doBandingStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doBandingStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doBandingStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doBandingStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doBandingStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure image banding metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure image banding metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure image banding metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure image banding metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure image banding metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doBandingStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing for banding metric.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing for banding metric.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing for banding metric.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing for banding metric.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing for banding metric.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=3, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionLow = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionLow = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionLow = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionLow = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionLow = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from low samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from low samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from low samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from low samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from low samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.1,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.1,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.1,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.1,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.1,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionLow = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.1, check=lambda x: x >= 0.0 and x <= 1.0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionHigh = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionHigh = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionHigh = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionHigh = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingFractionHigh = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from high samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from high samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from high samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from high samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Fraction of values to exclude from high samples.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.9,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.9,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.9,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.9,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0.9,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x >= 0.0 and x <= 1.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingFractionHigh = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0.9, check=lambda x: x >= 0.0 and x <= 1.0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingUseHalfDetector = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingUseHalfDetector = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingUseHalfDetector = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingUseHalfDetector = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    bandingUseHalfDetector = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Use only the first half set of amplifiers.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Use only the first half set of amplifiers.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Use only the first half set of amplifiers.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Use only the first half set of amplifiers.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Use only the first half set of amplifiers.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=True,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=True,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=True,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=True,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=True,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingUseHalfDetector = pexConfig.Field(dtype=float, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=True, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionStatistics = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure projection metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure projection metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure projection metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure projection metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Measure projection metric?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionStatistics = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionKernelSize = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing of projections.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing of projections.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing of projections.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing of projections.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Width of box for boxcar smoothing of projections.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        check=lambda x: x == 0 or x % 2 != 0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionKernelSize = pexConfig.Field(dtype=int, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=0, check=lambda x: x == 0 or x % 2 != 0, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionFft = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionFft = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionFft = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionFft = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    doProjectionFft = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=bool,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Generate FFTs from the image projections?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Generate FFTs from the image projections?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Generate FFTs from the image projections?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Generate FFTs from the image projections?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Generate FFTs from the image projections?",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=False,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'doProjectionFft = pexConfig.Field(dtype=bool, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default=False, )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionFftWindow = pexConfig.ChoiceField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionFftWindow = pexConfig.ChoiceField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionFftWindow = pexConfig.ChoiceField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionFftWindow = pexConfig.ChoiceField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    projectionFftWindow = pexConfig.ChoiceField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Type of windowing to use prior to calculating FFT.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Type of windowing to use prior to calculating FFT.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Type of windowing to use prior to calculating FFT.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Type of windowing to use prior to calculating FFT.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Type of windowing to use prior to calculating FFT.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default="HAMMING",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default="HAMMING",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default="HAMMING",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default="HAMMING",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default="HAMMING",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        allowed={\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        allowed={\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        allowed={\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        allowed={\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        allowed={\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HAMMING": "Hamming window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HAMMING": "Hamming window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HAMMING": "Hamming window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HAMMING": "Hamming window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HAMMING": "Hamming window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HANN": "Hann window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HANN": "Hann window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HANN": "Hann window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HANN": "Hann window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "HANN": "Hann window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "GAUSSIAN": "Gaussian window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "GAUSSIAN": "Gaussian window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "GAUSSIAN": "Gaussian window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "GAUSSIAN": "Gaussian window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "GAUSSIAN": "Gaussian window.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "NONE": "No window."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "NONE": "No window."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "NONE": "No window."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "NONE": "No window."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            "NONE": "No window."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        }\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        }\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        }\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        }\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        }\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionFftWindow = pexConfig.ChoiceField(dtype=str, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", default="xxxxxxx", allowed={"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxxxx", "xxxxxxxx": "xxxxxxxxxxxxxxxx", "xxxx": "xxxxxxxxxx"})'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    stat = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    stat = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    stat = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    stat = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    stat = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        default='MEANCLIP',\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        default='MEANCLIP',\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        default='MEANCLIP',\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        default='MEANCLIP',\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        default='MEANCLIP',\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Statistic name to use to measure regions.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Statistic name to use to measure regions.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Statistic name to use to measure regions.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Statistic name to use to measure regions.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Statistic name to use to measure regions.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "stat = pexConfig.Field(dtype=str, default='xxxxxxxx', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'stat = pexConfig.Field(dtype=str, default=\'xxxxxxxx\', doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nSigmaClip = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nSigmaClip = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nSigmaClip = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nSigmaClip = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nSigmaClip = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=float,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3.0,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping threshold for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping threshold for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping threshold for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping threshold for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping threshold for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nSigmaClip = pexConfig.Field(dtype=float, default=3.0, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nIter = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nIter = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nIter = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nIter = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    nIter = pexConfig.Field(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=int,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=3,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping iterations for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping iterations for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping iterations for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping iterations for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Clipping iterations for background",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nIter = pexConfig.Field(dtype=int, default=3, doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    badMask = pexConfig.ListField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    badMask = pexConfig.ListField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    badMask = pexConfig.ListField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    badMask = pexConfig.ListField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    badMask = pexConfig.ListField(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        dtype=str,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=["BAD", "INTRP", "SAT"],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=["BAD", "INTRP", "SAT"],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=["BAD", "INTRP", "SAT"],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=["BAD", "INTRP", "SAT"],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        default=["BAD", "INTRP", "SAT"],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Mask planes to ignore when identifying source pixels."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Mask planes to ignore when identifying source pixels."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Mask planes to ignore when identifying source pixels."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Mask planes to ignore when identifying source pixels."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        doc="Mask planes to ignore when identifying source pixels."\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'badMask = pexConfig.ListField(dtype=str, default=["xxx", "xxxxx", "xxx"], doc="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTask(pipeBase.Task):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTask(pipeBase.Task):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTask(pipeBase.Task):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTask(pipeBase.Task):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': 'class IsrStatisticsTask(pipeBase.Task):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "class IsrStatisticsTask(pipeBase.Task):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'class IsrStatisticsTask(pipeBase.Task):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure arbitrary statistics on ISR processed exposures.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure arbitrary statistics on ISR processed exposures.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure arbitrary statistics on ISR processed exposures.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure arbitrary statistics on ISR processed exposures.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure arbitrary statistics on ISR processed exposures.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    The goal is to wrap a number of optional measurements that are\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    The goal is to wrap a number of optional measurements that are\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    The goal is to wrap a number of optional measurements that are\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    The goal is to wrap a number of optional measurements that are\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    The goal is to wrap a number of optional measurements that are\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    useful for calibration production and detector stability.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    useful for calibration production and detector stability.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    useful for calibration production and detector stability.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    useful for calibration production and detector stability.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    useful for calibration production and detector stability.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    ConfigClass = IsrStatisticsTaskConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    ConfigClass = IsrStatisticsTaskConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    ConfigClass = IsrStatisticsTaskConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    ConfigClass = IsrStatisticsTaskConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    ConfigClass = IsrStatisticsTaskConfig\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ConfigClass = IsrStatisticsTaskConfig"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ConfigClass = IsrStatisticsTaskConfig'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    _DefaultName = "isrStatistics"\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    _DefaultName = "isrStatistics"\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    _DefaultName = "isrStatistics"\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    _DefaultName = "isrStatistics"\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    _DefaultName = "isrStatistics"\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "_DefaultName = "xxxxxxxxxxxxx""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '_DefaultName = "xxxxxxxxxxxxx"'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def __init__(self, statControl=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def __init__(self, statControl=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def __init__(self, statControl=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def __init__(self, statControl=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def __init__(self, statControl=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "def __init__(self, statControl=None, **kwargs):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def __init__(self, statControl=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        super().__init__(**kwargs)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        super().__init__(**kwargs)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        super().__init__(**kwargs)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        super().__init__(**kwargs)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        super().__init__(**kwargs)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "super().__init__(**kwargs)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'super().__init__(**kwargs)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                     afwImage.Mask.getPlaneBitMask(self.config.badMask))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                     afwImage.Mask.getPlaneBitMask(self.config.badMask))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                     afwImage.Mask.getPlaneBitMask(self.config.badMask))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                     afwImage.Mask.getPlaneBitMask(self.config.badMask))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                     afwImage.Mask.getPlaneBitMask(self.config.badMask))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statControl = afwMath.StatisticsControl(self.config.nSigmaClip, self.config.nIter, afwImage.Mask.getPlaneBitMask(self.config.badMask))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statType = afwMath.stringToStatisticsProperty(self.config.stat)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statType = afwMath.stringToStatisticsProperty(self.config.stat)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statType = afwMath.stringToStatisticsProperty(self.config.stat)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statType = afwMath.stringToStatisticsProperty(self.config.stat)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        self.statType = afwMath.stringToStatisticsProperty(self.config.stat)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "self.statType = afwMath.stringToStatisticsProperty(self.config.stat)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.statType = afwMath.stringToStatisticsProperty(self.config.stat)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to run arbitrary statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to run arbitrary statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to run arbitrary statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to run arbitrary statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to run arbitrary statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        The statistics should be measured by individual methods, and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        The statistics should be measured by individual methods, and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        The statistics should be measured by individual methods, and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        The statistics should be measured by individual methods, and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        The statistics should be measured by individual methods, and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        add to the dictionary in the return struct.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        add to the dictionary in the return struct.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        add to the dictionary in the return struct.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        add to the dictionary in the return struct.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        add to the dictionary in the return struct.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            The exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            The exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            The exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            The exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            The exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ptc : `lsst.ip.isr.PtcDataset`, optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ptc : `lsst.ip.isr.PtcDataset`, optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ptc : `lsst.ip.isr.PtcDataset`, optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ptc : `lsst.ip.isr.PtcDataset`, optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ptc : `lsst.ip.isr.PtcDataset`, optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            A PTC object containing gains to use.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            A PTC object containing gains to use.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            A PTC object containing gains to use.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            A PTC object containing gains to use.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            A PTC object containing gains to use.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscanResults : `list` [`lsst.pipe.base.Struct`], optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscanResults : `list` [`lsst.pipe.base.Struct`], optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscanResults : `list` [`lsst.pipe.base.Struct`], optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscanResults : `list` [`lsst.pipe.base.Struct`], optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscanResults : `list` [`lsst.pipe.base.Struct`], optional\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        resultStruct : `lsst.pipe.base.Struct`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        resultStruct : `lsst.pipe.base.Struct`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        resultStruct : `lsst.pipe.base.Struct`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        resultStruct : `lsst.pipe.base.Struct`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        resultStruct : `lsst.pipe.base.Struct`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Contains the measured statistics as a dict stored in a\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Contains the measured statistics as a dict stored in a\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Contains the measured statistics as a dict stored in a\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Contains the measured statistics as a dict stored in a\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Contains the measured statistics as a dict stored in a\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            field named ``results``.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            field named ``results``.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            field named ``results``.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            field named ``results``.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            field named ``results``.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Raises\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Raises\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Raises\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Raises\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Raises\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        RuntimeError\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        RuntimeError\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        RuntimeError\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        RuntimeError\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        RuntimeError\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Raised if the amplifier gains could not be found.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Raised if the amplifier gains could not be found.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Raised if the amplifier gains could not be found.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Raised if the amplifier gains could not be found.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Raised if the amplifier gains could not be found.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Find gains.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Find gains.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Find gains.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Find gains.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Find gains.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "detector = inputExp.getDetector()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if ptc is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if ptc is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if ptc is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if ptc is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if ptc is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if ptc is not None:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if ptc is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = ptc.gain\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = ptc.gain\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = ptc.gain\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = ptc.gain\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = ptc.gain\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "gains = ptc.gain"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = ptc.gain'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        elif detector is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        elif detector is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        elif detector is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        elif detector is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        elif detector is not None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "elif detector is not None:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif detector is not None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gains = {amp.getName(): amp.getGain() for amp in detector.getAmplifiers()}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "else:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            raise RuntimeError("No source of gains provided.")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            raise RuntimeError("No source of gains provided.")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            raise RuntimeError("No source of gains provided.")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            raise RuntimeError("No source of gains provided.")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            raise RuntimeError("No source of gains provided.")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ctiResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ctiResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ctiResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ctiResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ctiResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ctiResults = None"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doCtiStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doCtiStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doCtiStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doCtiStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doCtiStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if self.config.doCtiStatistics:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doCtiStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ctiResults = self.measureCti(inputExp, overscanResults, gains)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ctiResults = self.measureCti(inputExp, overscanResults, gains)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ctiResults = self.measureCti(inputExp, overscanResults, gains)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ctiResults = self.measureCti(inputExp, overscanResults, gains)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ctiResults = self.measureCti(inputExp, overscanResults, gains)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ctiResults = self.measureCti(inputExp, overscanResults, gains)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ctiResults = self.measureCti(inputExp, overscanResults, gains)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        bandingResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        bandingResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        bandingResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        bandingResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        bandingResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "bandingResults = None"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doBandingStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doBandingStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doBandingStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doBandingStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doBandingStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if self.config.doBandingStatistics:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doBandingStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            bandingResults = self.measureBanding(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            bandingResults = self.measureBanding(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            bandingResults = self.measureBanding(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            bandingResults = self.measureBanding(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            bandingResults = self.measureBanding(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "bandingResults = self.measureBanding(inputExp, overscanResults)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'bandingResults = self.measureBanding(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        projectionResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        projectionResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        projectionResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        projectionResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        projectionResults = None\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "projectionResults = None"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = None'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionStatistics:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if self.config.doProjectionStatistics:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionStatistics:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'projectionResults = self.measureProjectionStatistics(inputExp, overscanResults)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return pipeBase.Struct(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return pipeBase.Struct(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return pipeBase.Struct(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return pipeBase.Struct(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return pipeBase.Struct(\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            results={'CTI': ctiResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            results={'CTI': ctiResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            results={'CTI': ctiResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            results={'CTI': ctiResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            results={'CTI': ctiResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'BANDING': bandingResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'BANDING': bandingResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'BANDING': bandingResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'BANDING': bandingResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'BANDING': bandingResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'PROJECTION': projectionResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'PROJECTION': projectionResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'PROJECTION': projectionResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'PROJECTION': projectionResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                     'PROJECTION': projectionResults,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                     },\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                     },\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                     },\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                     },\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                     },\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        )\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "return pipeBase.Struct(results={'xxx': ctiResults, 'xxxxxxx': bandingResults, 'xxxxxxxxxx': projectionResults, }, )"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureCti(self, inputExp, overscans, gains):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureCti(self, inputExp, overscans, gains):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureCti(self, inputExp, overscans, gains):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureCti(self, inputExp, overscans, gains):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureCti(self, inputExp, overscans, gains):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "def measureCti(self, inputExp, overscans, gains):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureCti(self, inputExp, overscans, gains):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure CTI statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure CTI statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure CTI statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure CTI statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure CTI statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        gains : `dict` [`str` `float`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        gains : `dict` [`str` `float`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        gains : `dict` [`str` `float`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        gains : `dict` [`str` `float`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        gains : `dict` [`str` `float`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of per-amplifier gains, indexed by amplifier name.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of per-amplifier gains, indexed by amplifier name.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of per-amplifier gains, indexed by amplifier name.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of per-amplifier gains, indexed by amplifier name.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of per-amplifier gains, indexed by amplifier name.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "detector = inputExp.getDetector()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        image = inputExp.image\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        image = inputExp.image\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        image = inputExp.image\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        image = inputExp.image\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        image = inputExp.image\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "image = inputExp.image"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'image = inputExp.image'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Ensure we have the same number of overscans as amplifiers.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Ensure we have the same number of overscans as amplifiers.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Ensure we have the same number of overscans as amplifiers.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Ensure we have the same number of overscans as amplifiers.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        # Ensure we have the same number of overscans as amplifiers.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        assert len(overscans) == len(detector.getAmplifiers())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        assert len(overscans) == len(detector.getAmplifiers())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        assert len(overscans) == len(detector.getAmplifiers())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        assert len(overscans) == len(detector.getAmplifiers())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        assert len(overscans) == len(detector.getAmplifiers())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "assert len(overscans) == len(detector.getAmplifiers())"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'assert len(overscans) == len(detector.getAmplifiers())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for ampIter, amp in enumerate(detector.getAmplifiers()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for ampIter, amp in enumerate(detector.getAmplifiers()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for ampIter, amp in enumerate(detector.getAmplifiers()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for ampIter, amp in enumerate(detector.getAmplifiers()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for ampIter, amp in enumerate(detector.getAmplifiers()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "for ampIter, amp in enumerate(detector.getAmplifiers()):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for ampIter, amp in enumerate(detector.getAmplifiers()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gain = gains[amp.getName()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gain = gains[amp.getName()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gain = gains[amp.getName()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gain = gains[amp.getName()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            gain = gains[amp.getName()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "gain = gains[amp.getName()]"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'gain = gains[amp.getName()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            readoutCorner = amp.getReadoutCorner()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            readoutCorner = amp.getReadoutCorner()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            readoutCorner = amp.getReadoutCorner()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            readoutCorner = amp.getReadoutCorner()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            readoutCorner = amp.getReadoutCorner()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "readoutCorner = amp.getReadoutCorner()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'readoutCorner = amp.getReadoutCorner()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Full data region.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Full data region.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Full data region.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Full data region.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Full data region.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            dataRegion = image[amp.getBBox()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            dataRegion = image[amp.getBBox()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            dataRegion = image[amp.getBBox()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            dataRegion = image[amp.getBBox()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            dataRegion = image[amp.getBBox()]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "dataRegion = image[amp.getBBox()]"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'dataRegion = image[amp.getBBox()]'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            ampStats['IMAGE_MEAN'] = afwMath.makeStatistics(dataRegion, self.statType,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            ampStats['IMAGE_MEAN'] = afwMath.makeStatistics(dataRegion, self.statType,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            ampStats['IMAGE_MEAN'] = afwMath.makeStatistics(dataRegion, self.statType,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            ampStats['IMAGE_MEAN'] = afwMath.makeStatistics(dataRegion, self.statType,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            ampStats['IMAGE_MEAN'] = afwMath.makeStatistics(dataRegion, self.statType,\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = afwMath.makeStatistics(dataRegion, self.statType, self.statControl).getValue()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # First and last image columns.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # First and last image columns.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # First and last image columns.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # First and last image columns.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # First and last image columns.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelA = afwMath.makeStatistics(dataRegion.array[:, 0],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelA = afwMath.makeStatistics(dataRegion.array[:, 0],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelA = afwMath.makeStatistics(dataRegion.array[:, 0],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelA = afwMath.makeStatistics(dataRegion.array[:, 0],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelA = afwMath.makeStatistics(dataRegion.array[:, 0],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelA = afwMath.makeStatistics(dataRegion.array[:, 0], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statType,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                            self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pixelZ = afwMath.makeStatistics(dataRegion.array[:, -1], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxx'] = pixelZ"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxx'] = pixelA"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "else:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['FIRST_MEAN'] = pixelA\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxx'] = pixelA"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxx'] = pixelA"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['LAST_MEAN'] = pixelZ\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxx'] = pixelZ"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxx'] = pixelZ"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Measure the columns of the overscan.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Measure the columns of the overscan.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Measure the columns of the overscan.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Measure the columns of the overscan.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            # Measure the columns of the overscan.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if overscans[ampIter] is None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if overscans[ampIter] is None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if overscans[ampIter] is None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if overscans[ampIter] is None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if overscans[ampIter] is None:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if overscans[ampIter] is None:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if overscans[ampIter] is None:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # The amplifier is likely entirely bad, and needs to\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # The amplifier is likely entirely bad, and needs to\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # The amplifier is likely entirely bad, and needs to\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # The amplifier is likely entirely bad, and needs to\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # The amplifier is likely entirely bad, and needs to\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # be skipped.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # be skipped.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # be skipped.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # be skipped.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # be skipped.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                self.log.warn("No overscan information available for ISR statistics for amp %s.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                self.log.warn("No overscan information available for ISR statistics for amp %s.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                self.log.warn("No overscan information available for ISR statistics for amp %s.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                self.log.warn("No overscan information available for ISR statistics for amp %s.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                self.log.warn("No overscan information available for ISR statistics for amp %s.",\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                              amp.getName())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                              amp.getName())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                              amp.getName())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                              amp.getName())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                              amp.getName())\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'self.log.warn("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", amp.getName())'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                nCols = amp.getSerialOverscanBBox().getWidth()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                nCols = amp.getSerialOverscanBBox().getWidth()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                nCols = amp.getSerialOverscanBBox().getWidth()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                nCols = amp.getSerialOverscanBBox().getWidth()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                nCols = amp.getSerialOverscanBBox().getWidth()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "nCols = amp.getSerialOverscanBBox().getWidth()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'nCols = amp.getSerialOverscanBBox().getWidth()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_COLUMNS'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_COLUMNS'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_COLUMNS'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_COLUMNS'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_COLUMNS'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_VALUES'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_VALUES'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_VALUES'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_VALUES'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                ampStats['OVERSCAN_VALUES'] = np.full((nCols, ), np.nan)\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = np.full((nCols, ), np.nan)"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "else:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                overscanImage = overscans[ampIter].overscanImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                overscanImage = overscans[ampIter].overscanImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                overscanImage = overscans[ampIter].overscanImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                overscanImage = overscans[ampIter].overscanImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                overscanImage = overscans[ampIter].overscanImage\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "overscanImage = overscans[ampIter].overscanImage"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanImage = overscans[ampIter].overscanImage'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                columns = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                columns = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                columns = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                columns = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                columns = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "columns = []"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                values = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                values = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                values = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                values = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                values = []\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "values = []"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values = []'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                for column in range(0, overscanImage.getWidth()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                for column in range(0, overscanImage.getWidth()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                for column in range(0, overscanImage.getWidth()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                for column in range(0, overscanImage.getWidth()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                for column in range(0, overscanImage.getWidth()):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "for column in range(0, overscanImage.getWidth()):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for column in range(0, overscanImage.getWidth()):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    osMean = afwMath.makeStatistics(overscanImage.image.array[:, column],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    osMean = afwMath.makeStatistics(overscanImage.image.array[:, column],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    osMean = afwMath.makeStatistics(overscanImage.image.array[:, column],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    osMean = afwMath.makeStatistics(overscanImage.image.array[:, column],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    osMean = afwMath.makeStatistics(overscanImage.image.array[:, column],\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                    self.statType, self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                    self.statType, self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                    self.statType, self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                    self.statType, self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                    self.statType, self.statControl).getValue()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'osMean = afwMath.makeStatistics(overscanImage.image.array[:, column], self.statType, self.statControl).getValue()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    columns.append(column)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    columns.append(column)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    columns.append(column)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    columns.append(column)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    columns.append(column)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "columns.append(column)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'columns.append(column)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    values.append(osMean) # Originally gain * osMean\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    values.append(osMean) # Originally gain * osMean\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    values.append(osMean) # Originally gain * osMean\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    values.append(osMean) # Originally gain * osMean\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    values.append(osMean) # Originally gain * osMean\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "values.append(osMean)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'values.append(osMean)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                # We want these relative to the readout corner.  If that's\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                # on the right side, we need to swap them.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: ""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': ''}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if readoutCorner in (ReadoutCorner.LR, ReadoutCorner.UR):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = list(reversed(columns))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = list(reversed(columns))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = list(reversed(columns))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = list(reversed(columns))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = list(reversed(columns))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = list(reversed(columns))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = list(reversed(values))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = list(reversed(values))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = list(reversed(values))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = list(reversed(values))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = list(reversed(values))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = list(reversed(values))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "else:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = columns\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = columns\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = columns\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = columns\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_COLUMNS'] = columns\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxxxxxxxx'] = columns"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxxx'] = columns"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = values\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = values\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = values\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = values\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                    ampStats['OVERSCAN_VALUES'] = values\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampStats['xxxxxxxxxxxxxxx'] = values"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "ampStats['xxxxxxxxxxxxxxx'] = values"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            outputStats[amp.getName()] = ampStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            outputStats[amp.getName()] = ampStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            outputStats[amp.getName()] = ampStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            outputStats[amp.getName()] = ampStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            outputStats[amp.getName()] = ampStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats[amp.getName()] = ampStats"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats[amp.getName()] = ampStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "return outputStats"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    @staticmethod\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    @staticmethod\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    @staticmethod\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    @staticmethod\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    @staticmethod\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "@staticmethod"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '@staticmethod'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def makeKernel(kernelSize):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def makeKernel(kernelSize):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def makeKernel(kernelSize):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def makeKernel(kernelSize):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def makeKernel(kernelSize):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "def makeKernel(kernelSize):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def makeKernel(kernelSize):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Make a boxcar smoothing kernel.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Make a boxcar smoothing kernel.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Make a boxcar smoothing kernel.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Make a boxcar smoothing kernel.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Make a boxcar smoothing kernel.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernelSize : `int`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernelSize : `int`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernelSize : `int`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernelSize : `int`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernelSize : `int`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Size of the kernel in pixels.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Size of the kernel in pixels.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Size of the kernel in pixels.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Size of the kernel in pixels.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Size of the kernel in pixels.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel : `np.array`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel : `np.array`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel : `np.array`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel : `np.array`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel : `np.array`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Kernel for boxcar smoothing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Kernel for boxcar smoothing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Kernel for boxcar smoothing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Kernel for boxcar smoothing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Kernel for boxcar smoothing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if kernelSize > 0:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if kernelSize > 0:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if kernelSize > 0:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if kernelSize > 0:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if kernelSize > 0:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if kernelSize > 0:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if kernelSize > 0:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.full(kernelSize, 1.0 / kernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.full(kernelSize, 1.0 / kernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.full(kernelSize, 1.0 / kernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.full(kernelSize, 1.0 / kernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.full(kernelSize, 1.0 / kernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "kernel = np.full(kernelSize, 1.0 / kernelSize)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.full(kernelSize, 1.0 / kernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "else:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.array([1.0])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.array([1.0])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.array([1.0])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.array([1.0])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            kernel = np.array([1.0])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "kernel = np.array([1.0])"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = np.array([1.0])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return kernel\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return kernel\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return kernel\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return kernel\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return kernel\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "return kernel"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return kernel'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureBanding(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureBanding(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureBanding(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureBanding(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureBanding(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "def measureBanding(self, inputExp, overscans):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureBanding(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure banding statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure banding statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure banding statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure banding statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure banding statistics.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "detector = inputExp.getDetector()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.bandingKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.bandingKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.bandingKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.bandingKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.bandingKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "kernel = self.makeKernel(self.config.bandingKernelSize)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.bandingKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_BANDING'] = []\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_BANDING'] = []\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_BANDING'] = []\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_BANDING'] = []\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_BANDING'] = []\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxx'] = []"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = []"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp, overscanData in zip(detector.getAmplifiers(), overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp, overscanData in zip(detector.getAmplifiers(), overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp, overscanData in zip(detector.getAmplifiers(), overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp, overscanData in zip(detector.getAmplifiers(), overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp, overscanData in zip(detector.getAmplifiers(), overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "for amp, overscanData in zip(detector.getAmplifiers(), overscans):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp, overscanData in zip(detector.getAmplifiers(), overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanFit = np.array(overscanData.overscanFit)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanFit = np.array(overscanData.overscanFit)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanFit = np.array(overscanData.overscanFit)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanFit = np.array(overscanData.overscanFit)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanFit = np.array(overscanData.overscanFit)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "overscanFit = np.array(overscanData.overscanFit)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanFit = np.array(overscanData.overscanFit)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanArray = overscanData.overscanImage.image.array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanArray = overscanData.overscanImage.image.array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanArray = overscanData.overscanImage.image.array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanArray = overscanData.overscanImage.image.array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            overscanArray = overscanData.overscanImage.image.array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "overscanArray = overscanData.overscanImage.image.array"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'overscanArray = overscanData.overscanImage.image.array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            rawOverscan = np.mean(overscanArray + overscanFit, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            rawOverscan = np.mean(overscanArray + overscanFit, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            rawOverscan = np.mean(overscanArray + overscanFit, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            rawOverscan = np.mean(overscanArray + overscanFit, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            rawOverscan = np.mean(overscanArray + overscanFit, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "rawOverscan = np.mean(overscanArray + overscanFit, axis=1)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'rawOverscan = np.mean(overscanArray + overscanFit, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            smoothedOverscan = np.convolve(rawOverscan, kernel, mode='valid')\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            smoothedOverscan = np.convolve(rawOverscan, kernel, mode='valid')\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            smoothedOverscan = np.convolve(rawOverscan, kernel, mode='valid')\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            smoothedOverscan = np.convolve(rawOverscan, kernel, mode='valid')\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            smoothedOverscan = np.convolve(rawOverscan, kernel, mode='valid')\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "smoothedOverscan = np.convolve(rawOverscan, kernel, mode='xxxxx')"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow,\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                       self.config.bandingFractionHigh])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                       self.config.bandingFractionHigh])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                       self.config.bandingFractionHigh])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                       self.config.bandingFractionHigh])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                                                       self.config.bandingFractionHigh])\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'low, high = np.quantile(smoothedOverscan, [self.config.bandingFractionLow, self.config.bandingFractionHigh])'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_BANDING'].append(float(high - low))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_BANDING'].append(float(high - low))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_BANDING'].append(float(high - low))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_BANDING'].append(float(high - low))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_BANDING'].append(float(high - low))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxx'].append(float(high - low))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'].append(float(high - low))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.bandingUseHalfDetector:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.bandingUseHalfDetector:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.bandingUseHalfDetector:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.bandingUseHalfDetector:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.bandingUseHalfDetector:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if self.config.bandingUseHalfDetector:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.bandingUseHalfDetector:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            fullLength = len(outputStats['AMP_BANDING'])\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            fullLength = len(outputStats['AMP_BANDING'])\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            fullLength = len(outputStats['AMP_BANDING'])\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            fullLength = len(outputStats['AMP_BANDING'])\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            fullLength = len(outputStats['AMP_BANDING'])\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "fullLength = len(outputStats['xxxxxxxxxxx'])"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "fullLength = len(outputStats['xxxxxxxxxxx'])"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING'][0:fullLength//2]))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING'][0:fullLength//2]))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING'][0:fullLength//2]))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING'][0:fullLength//2]))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING'][0:fullLength//2]))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx'][0:fullLength//2]))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "else:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING']))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING']))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING']))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING']))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING']))\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxx'] = float(np.nanmedian(outputStats['xxxxxxxxxxx']))"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "return outputStats"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureProjectionStatistics(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureProjectionStatistics(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureProjectionStatistics(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureProjectionStatistics(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '    def measureProjectionStatistics(self, inputExp, overscans):\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "def measureProjectionStatistics(self, inputExp, overscans):"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'def measureProjectionStatistics(self, inputExp, overscans):'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure metrics from image slicing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure metrics from image slicing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure metrics from image slicing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure metrics from image slicing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '"""Task to measure metrics from image slicing.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Parameters\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        ----------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        inputExp : `lsst.afw.image.Exposure`\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Exposure to measure.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        overscans : `list` [`lsst.pipe.base.Struct`]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            List of overscan results.  Expected fields are:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``imageFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the amplifier image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanFit``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Value or fit subtracted from the overscan image data\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                (scalar or `lsst.afw.image.Image`).\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ``overscanImage``\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                Image of the overscan region with the overscan\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                correction applied (`lsst.afw.image.Image`). This\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                quantity is used to estimate the amplifier read noise\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                empirically.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        Returns\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        -------\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats : `dict` [`str`, [`dict` [`str`,`float]]\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            Dictionary of measurements, keyed by amplifier name and\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            statistics segment.\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        """\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': '"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        outputStats = {}\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'outputStats = {}'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        detector = inputExp.getDetector()\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "detector = inputExp.getDetector()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'detector = inputExp.getDetector()'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.projectionKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.projectionKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.projectionKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.projectionKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        kernel = self.makeKernel(self.config.projectionKernelSize)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "kernel = self.makeKernel(self.config.projectionKernelSize)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'kernel = self.makeKernel(self.config.projectionKernelSize)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_VPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_VPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_VPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_VPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_VPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxxxx'] = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_HPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_HPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_HPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_HPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        outputStats['AMP_HPROJECTION'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxxxx'] = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        convolveMode = 'valid'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        convolveMode = 'valid'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        convolveMode = 'valid'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        convolveMode = 'valid'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "        convolveMode = 'valid'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "convolveMode = 'xxxxx'"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if self.config.doProjectionFft:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'] = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'] = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_REAL'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'] = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HFFT_IMAG'] = {}\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'] = {}"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'] = {}"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            convolveMode = 'same'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            convolveMode = 'same'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            convolveMode = 'same'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            convolveMode = 'same'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            convolveMode = 'same'\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "convolveMode = 'xxxx'"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "convolveMode = 'xxxx'"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp in detector.getAmplifiers():\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp in detector.getAmplifiers():\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp in detector.getAmplifiers():\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp in detector.getAmplifiers():\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        for amp in detector.getAmplifiers():\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "for amp in detector.getAmplifiers():"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'for amp in detector.getAmplifiers():'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampArray = inputExp.image[amp.getBBox()].array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampArray = inputExp.image[amp.getBBox()].array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampArray = inputExp.image[amp.getBBox()].array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampArray = inputExp.image[amp.getBBox()].array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            ampArray = inputExp.image[amp.getBBox()].array\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "ampArray = inputExp.image[amp.getBBox()].array"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'ampArray = inputExp.image[amp.getBBox()].array'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.mean(ampArray, axis=0)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.mean(ampArray, axis=0)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.mean(ampArray, axis=0)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.mean(ampArray, axis=0)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.mean(ampArray, axis=0)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "horizontalProjection = np.mean(ampArray, axis=0)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.mean(ampArray, axis=0)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.mean(ampArray, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.mean(ampArray, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.mean(ampArray, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.mean(ampArray, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.mean(ampArray, axis=1)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "verticalProjection = np.mean(ampArray, axis=1)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.mean(ampArray, axis=1)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalProjection = np.convolve(horizontalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalProjection = np.convolve(verticalProjection, kernel, mode=convolveMode)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HPROJECTION'][amp.getName()] = horizontalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HPROJECTION'][amp.getName()] = horizontalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HPROJECTION'][amp.getName()] = horizontalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HPROJECTION'][amp.getName()] = horizontalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_HPROJECTION'][amp.getName()] = horizontalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = horizontalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VPROJECTION'][amp.getName()] = verticalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VPROJECTION'][amp.getName()] = verticalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VPROJECTION'][amp.getName()] = verticalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VPROJECTION'][amp.getName()] = verticalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "            outputStats['AMP_VPROJECTION'][amp.getName()] = verticalProjection.tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxxxx'][amp.getName()] = verticalProjection.tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '            if self.config.doProjectionFft:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if self.config.doProjectionFft:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.doProjectionFft:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalWindow = np.ones_like(horizontalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalWindow = np.ones_like(horizontalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalWindow = np.ones_like(horizontalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalWindow = np.ones_like(horizontalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalWindow = np.ones_like(horizontalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "horizontalWindow = np.ones_like(horizontalProjection)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = np.ones_like(horizontalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalWindow = np.ones_like(verticalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalWindow = np.ones_like(verticalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalWindow = np.ones_like(verticalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalWindow = np.ones_like(verticalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalWindow = np.ones_like(verticalProjection)\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "verticalWindow = np.ones_like(verticalProjection)"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = np.ones_like(verticalProjection)'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if self.config.projectionFftWindow == "NONE":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if self.config.projectionFftWindow == "NONE":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if self.config.projectionFftWindow == "NONE":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if self.config.projectionFftWindow == "NONE":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                if self.config.projectionFftWindow == "NONE":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "if self.config.projectionFftWindow == "xxxx":"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'if self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    pass\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    pass\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    pass\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    pass\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    pass\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "pass"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'pass'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HAMMING":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HAMMING":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HAMMING":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HAMMING":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HAMMING":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "elif self.config.projectionFftWindow == "xxxxxxx":"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hamming(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hamming(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hamming(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hamming(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hamming(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "horizontalWindow = hamming(len(horizontalProjection))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hamming(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hamming(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hamming(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hamming(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hamming(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hamming(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "verticalWindow = hamming(len(verticalProjection))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hamming(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HANN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HANN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HANN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HANN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "HANN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "elif self.config.projectionFftWindow == "xxxx":"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hann(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hann(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hann(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hann(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = hann(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "horizontalWindow = hann(len(horizontalProjection))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = hann(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hann(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hann(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hann(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hann(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = hann(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "verticalWindow = hann(len(verticalProjection))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = hann(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "GAUSSIAN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "GAUSSIAN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "GAUSSIAN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "GAUSSIAN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                elif self.config.projectionFftWindow == "GAUSSIAN":\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "elif self.config.projectionFftWindow == "xxxxxxxx":"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'elif self.config.projectionFftWindow == "xxxxxxxx":'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = gaussian(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = gaussian(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = gaussian(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = gaussian(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    horizontalWindow = gaussian(len(horizontalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "horizontalWindow = gaussian(len(horizontalProjection))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalWindow = gaussian(len(horizontalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = gaussian(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = gaussian(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = gaussian(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = gaussian(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    verticalWindow = gaussian(len(verticalProjection))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "verticalWindow = gaussian(len(verticalProjection))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalWindow = gaussian(len(verticalProjection))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                else:\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "else:"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'else:'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    raise RuntimeError(f"Invalid window function: {self.config.projectionFftWindow}")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    raise RuntimeError(f"Invalid window function: {self.config.projectionFftWindow}")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    raise RuntimeError(f"Invalid window function: {self.config.projectionFftWindow}")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    raise RuntimeError(f"Invalid window function: {self.config.projectionFftWindow}")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                    raise RuntimeError(f"Invalid window function: {self.config.projectionFftWindow}")\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'raise RuntimeError(f"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'horizontalFFT = np.fft.rfft(np.multiply(horizontalProjection, horizontalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '                verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'verticalFFT = np.fft.rfft(np.multiply(verticalProjection, verticalWindow))'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_REAL'][amp.getName()] = np.real(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_REAL'][amp.getName()] = np.real(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_REAL'][amp.getName()] = np.real(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_REAL'][amp.getName()] = np.real(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_REAL'][amp.getName()] = np.real(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_IMAG'][amp.getName()] = np.imag(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_IMAG'][amp.getName()] = np.imag(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_IMAG'][amp.getName()] = np.imag(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_IMAG'][amp.getName()] = np.imag(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_HFFT_IMAG'][amp.getName()] = np.imag(horizontalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(horizontalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_REAL'][amp.getName()] = np.real(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_REAL'][amp.getName()] = np.real(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_REAL'][amp.getName()] = np.real(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_REAL'][amp.getName()] = np.real(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_REAL'][amp.getName()] = np.real(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.real(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_IMAG'][amp.getName()] = np.imag(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_IMAG'][amp.getName()] = np.imag(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_IMAG'][amp.getName()] = np.imag(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_IMAG'][amp.getName()] = np.imag(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': "                outputStats['AMP_VFFT_IMAG'][amp.getName()] = np.imag(verticalFFT).tolist()\n"}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': "outputStats['xxxxxxxxxxxxx'][amp.getName()] = np.imag(verticalFFT).tolist()"}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_line_length', 'parameters': {'physical_line': True, 'max_line_length': True, 'multiline': True, 'line_number': True, 'noqa': True}, 'parameter_names': ['physical_line', 'max_line_length', 'multiline', 'line_number', 'noqa'], 'plugin': <function maximum_line_length at 0x7f1b45496290>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_obsolete', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function tabs_obsolete at 0x7f1b454960e0>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.tabs_or_spaces', 'parameters': {'physical_line': True, 'indent_char': True}, 'parameter_names': ['physical_line', 'indent_char'], 'plugin': <function tabs_or_spaces at 0x7f1b45496050>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_blank_lines', 'parameters': {'physical_line': True, 'lines': True, 'line_number': True, 'total_lines': True}, 'parameter_names': ['physical_line', 'lines', 'line_number', 'total_lines'], 'plugin': <function trailing_blank_lines at 0x7f1b45496200>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.trailing_whitespace', 'parameters': {'physical_line': True}, 'parameter_names': ['physical_line'], 'plugin': <function trailing_whitespace at 0x7f1b45496170>, 'plugin_name': 'pycodestyle'} with {'physical_line': '        return outputStats\n'}
[35mDEBUG   [0m flake8.checker:checker.py:516 Logical line: "return outputStats"
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.ambiguous_identifier', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function ambiguous_identifier at 0x7f1b454971c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.bare_except', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function bare_except at 0x7f1b45497130>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.blank_lines', 'parameters': {'logical_line': True, 'blank_lines': True, 'indent_level': True, 'line_number': True, 'blank_before': True, 'previous_logical': True, 'previous_unindented_logical_line': True, 'previous_indent_level': True, 'lines': True}, 'parameter_names': ['logical_line', 'blank_lines', 'indent_level', 'line_number', 'blank_before', 'previous_logical', 'previous_unindented_logical_line', 'previous_indent_level', 'lines'], 'plugin': <function blank_lines at 0x7f1b454963b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_after_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_after_binary_operator at 0x7f1b45496ef0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.break_before_binary_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function break_before_binary_operator at 0x7f1b45496e60>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_negative', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function comparison_negative at 0x7f1b45497010>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_to_singleton', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_to_singleton at 0x7f1b45496f80>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.comparison_type', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function comparison_type at 0x7f1b454970a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.compound_statements', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function compound_statements at 0x7f1b45496c20>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.continued_indentation', 'parameters': {'logical_line': True, 'tokens': True, 'indent_level': True, 'hang_closing': True, 'indent_char': True, 'indent_size': True, 'noqa': True, 'verbose': True}, 'parameter_names': ['logical_line', 'tokens', 'indent_level', 'hang_closing', 'indent_char', 'indent_size', 'noqa', 'verbose'], 'plugin': <function continued_indentation at 0x7f1b45496710>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.explicit_line_join', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function explicit_line_join at 0x7f1b45496cb0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.extraneous_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function extraneous_whitespace at 0x7f1b45496440>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.imports_on_separate_lines', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function imports_on_separate_lines at 0x7f1b45496b00>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.indentation', 'parameters': {'logical_line': True, 'previous_logical': True, 'indent_char': True, 'indent_level': True, 'previous_indent_level': True, 'indent_size': True}, 'parameter_names': ['logical_line', 'previous_logical', 'indent_char', 'indent_level', 'previous_indent_level', 'indent_size'], 'plugin': <function indentation at 0x7f1b45496680>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.maximum_doc_length', 'parameters': {'logical_line': True, 'max_doc_length': True, 'noqa': True, 'tokens': True}, 'parameter_names': ['logical_line', 'max_doc_length', 'noqa', 'tokens'], 'plugin': <function maximum_doc_length at 0x7f1b454975b0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace at 0x7f1b454965f0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_after_import_keyword', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function missing_whitespace_after_import_keyword at 0x7f1b45496560>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.missing_whitespace_around_operator', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function missing_whitespace_around_operator at 0x7f1b454968c0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.module_imports_on_top_of_file', 'parameters': {'logical_line': True, 'indent_level': True, 'checker_state': True, 'noqa': True}, 'parameter_names': ['logical_line', 'indent_level', 'checker_state', 'noqa'], 'plugin': <function module_imports_on_top_of_file at 0x7f1b45496b90>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_async_await_keywords', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function python_3000_async_await_keywords at 0x7f1b45497520>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_backticks', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_backticks at 0x7f1b45497400>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_has_key', 'parameters': {'logical_line': True, 'noqa': True}, 'parameter_names': ['logical_line', 'noqa'], 'plugin': <function python_3000_has_key at 0x7f1b45497250>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_invalid_escape_sequence', 'parameters': {'logical_line': True, 'tokens': True, 'noqa': True}, 'parameter_names': ['logical_line', 'tokens', 'noqa'], 'plugin': <function python_3000_invalid_escape_sequence at 0x7f1b45497490>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_not_equal', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_not_equal at 0x7f1b45497370>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.python_3000_raise_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function python_3000_raise_comma at 0x7f1b454972e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_comma', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_comma at 0x7f1b45496950>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_keywords', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_keywords at 0x7f1b454964d0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_named_parameter_equals', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_around_named_parameter_equals at 0x7f1b454969e0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_around_operator', 'parameters': {'logical_line': True}, 'parameter_names': ['logical_line'], 'plugin': <function whitespace_around_operator at 0x7f1b45496830>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_comment', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_comment at 0x7f1b45496a70>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[35mDEBUG   [0m flake8.checker:checker.py:405 Running {'name': 'pycodestyle.whitespace_before_parameters', 'parameters': {'logical_line': True, 'tokens': True}, 'parameter_names': ['logical_line', 'tokens'], 'plugin': <function whitespace_before_parameters at 0x7f1b454967a0>, 'plugin_name': 'pycodestyle'} with {'logical_line': 'return outputStats'}
[32mINFO    [0m flake8.main.application:application.py:276 Finished running
[32mINFO    [0m flake8.main.application:application.py:307 Reporting errors
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N812" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N812" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N812" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N812', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=28, column_number=2, text="lowercase 'lsst.afw.math' imported as non lowercase 'afwMath'", physical_line='import lsst.afw.math as afwMath\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N812', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=29, column_number=2, text="lowercase 'lsst.afw.image' imported as non lowercase 'afwImage'", physical_line='import lsst.afw.image as afwImage\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N812', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=30, column_number=2, text="lowercase 'lsst.pipe.base' imported as non lowercase 'pipeBase'", physical_line='import lsst.pipe.base as pipeBase\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N812', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=31, column_number=2, text="lowercase 'lsst.pex.config' imported as non lowercase 'pexConfig'", physical_line='import lsst.pex.config as pexConfig\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N803" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N803" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N803" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N803', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=133, column_number=25, text="argument name 'statControl' should be lowercase", physical_line='    def __init__(self, statControl=None, **kwargs):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N803', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=139, column_number=20, text="argument name 'inputExp' should be lowercase", physical_line='    def run(self, inputExp, ptc=None, overscanResults=None, **kwargs):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "N802" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "N802" to be "Ignored.Implicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "N802" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N802', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=205, column_number=10, text="function name 'measureCti' should be lowercase", physical_line='    def measureCti(self, inputExp, overscans, gains):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N803', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=205, column_number=27, text="argument name 'inputExp' should be lowercase", physical_line='    def measureCti(self, inputExp, overscans, gains):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "F841" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "F841" to be "Selected.Explicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "F841" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='F841', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=245, column_number=13, text="local variable 'gain' is assigned to but never used", physical_line='            gain = gains[amp.getName()]\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "E261" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "E261" to be "Selected.Explicitly", "Selected.Implicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "E261" will be "Decision.Selected"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='E261', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=286, column_number=42, text='at least two spaces before inline comment', physical_line='                    values.append(osMean) # Originally gain * osMean\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N802', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=302, column_number=10, text="function name 'makeKernel' should be lowercase", physical_line='    def makeKernel(kernelSize):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N803', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=302, column_number=21, text="argument name 'kernelSize' should be lowercase", physical_line='    def makeKernel(kernelSize):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N802', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=321, column_number=10, text="function name 'measureBanding' should be lowercase", physical_line='    def measureBanding(self, inputExp, overscans):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N803', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=321, column_number=31, text="argument name 'inputExp' should be lowercase", physical_line='    def measureBanding(self, inputExp, overscans):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:283 Deciding if "E226" should be reported
[35mDEBUG   [0m flake8.style_guide:style_guide.py:286 The user configured "E226" to be "Selected.Explicitly", "Ignored.Explicitly"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:325 "E226" will be "Decision.Ignored"
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='E226', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=368, column_number=100, text='missing whitespace around arithmetic operator', physical_line="            outputStats['DET_BANDING'] = float(np.nanmedian(outputStats['AMP_BANDING'][0:fullLength//2]))\n") is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N802', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=374, column_number=10, text="function name 'measureProjectionStatistics' should be lowercase", physical_line='    def measureProjectionStatistics(self, inputExp, overscans):\n') is not inline ignored
[35mDEBUG   [0m flake8.style_guide:style_guide.py:91 Violation(code='N803', filename='/sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/python/lsst/ip/isr/isrStatistics.py', line_number=374, column_number=44, text="argument name 'inputExp' should be lowercase", physical_line='    def measureProjectionStatistics(self, inputExp, overscans):\n') is not inline ignored
[32mINFO    [0m flake8.main.application:application.py:311 Found a total of 17 violations and reported 2
=========================================================================== warnings summary ===========================================================================
<frozen importlib._bootstrap>:241
  <frozen importlib._bootstrap>:241: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 88 from C header, got 96 from PyObject

../../../../../../group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numexpr/expressions.py:21
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numexpr/expressions.py:21: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_forbids_neg_powint = LooseVersion(numpy.__version__) >= LooseVersion('1.12.0b1')

doc/conf.py: 1 warning
python/lsst/__init__.py: 1 warning
python/lsst/ip/__init__.py: 1 warning
python/lsst/ip/isr/__init__.py: 1 warning
python/lsst/ip/isr/ampOffset.py: 1 warning
python/lsst/ip/isr/assembleCcdTask.py: 1 warning
python/lsst/ip/isr/brighterFatterKernel.py: 1 warning
python/lsst/ip/isr/calibType.py: 1 warning
python/lsst/ip/isr/crosstalk.py: 1 warning
python/lsst/ip/isr/defects.py: 1 warning
python/lsst/ip/isr/deferredCharge.py: 1 warning
python/lsst/ip/isr/fringe.py: 1 warning
python/lsst/ip/isr/isrFunctions.py: 1 warning
python/lsst/ip/isr/isrMock.py: 1 warning
python/lsst/ip/isr/isrQa.py: 1 warning
python/lsst/ip/isr/isrStatistics.py: 1 warning
python/lsst/ip/isr/isrTask.py: 1 warning
python/lsst/ip/isr/linearize.py: 1 warning
python/lsst/ip/isr/masking.py: 1 warning
python/lsst/ip/isr/overscan.py: 1 warning
python/lsst/ip/isr/photodiode.py: 1 warning
python/lsst/ip/isr/photodiodeCorrection.py: 1 warning
python/lsst/ip/isr/ptcDataset.py: 1 warning
python/lsst/ip/isr/straylight.py: 1 warning
python/lsst/ip/isr/transmissionCurve.py: 1 warning
python/lsst/ip/isr/version.py: 1 warning
python/lsst/ip/isr/vignette.py: 1 warning
tests/test_applyLookupTable.py: 1 warning
tests/test_assembleCcd.py: 1 warning
tests/test_biasAndDarkCorrection.py: 1 warning
tests/test_brighterFatter.py: 1 warning
tests/test_calibType.py: 1 warning
tests/test_crosstalk.py: 1 warning
tests/test_defect.py: 1 warning
tests/test_defects.py: 1 warning
tests/test_deferredCharge.py: 1 warning
tests/test_empiricalVariance.py: 1 warning
tests/test_flatAndIlluminationCorrection.py: 1 warning
tests/test_fringes.py: 1 warning
tests/test_isrFunctions.py: 1 warning
tests/test_isrMisc.py: 1 warning
tests/test_isrMock.py: 1 warning
tests/test_isrQa.py: 1 warning
tests/test_isrStatistics.py: 1 warning
tests/test_isrTask.py: 1 warning
tests/test_linearize.py: 1 warning
tests/test_linearizeLookupTable.py: 1 warning
tests/test_linearizeSquared.py: 1 warning
tests/test_maskNans.py: 1 warning
tests/test_overscanCorrection.py: 1 warning
tests/test_photodiode.py: 1 warning
tests/test_photodiodeCorrection.py: 1 warning
tests/test_ptcDataset.py: 1 warning
tests/test_saturationCorrection.py: 1 warning
tests/test_setValidPolygonIntersect.py: 1 warning
tests/test_suspectMasking.py: 1 warning
tests/test_transmissionCurve.py: 1 warning
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/flake8/plugins/manager.py:261: DeprecationWarning: SelectableGroups dict interface is deprecated. Use select.
    eps = importlib_metadata.entry_points().get(self.namespace, ())

tests/test_isrFunctions.py::IsrFunctionsCases::test_brighterFatterCorrection
tests/test_isrTask.py::IsrTaskUnTrimmedTestCases::test_run_allTrue
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numpy/core/fromnumeric.py:86: RuntimeWarning: overflow encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/test_isrMisc.py::IsrMiscCases::test_vignette_doWrite
  /sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/tests/test_isrMisc.py:57: FutureWarning: Config field doWriteVignettePolygon is deprecated: Vignetted polygon is added to the exposure by default. This option is no longer used, and will be removed after v24.
    config.doWriteVignettePolygon = True

tests/test_isrTask.py::IsrTaskUnTrimmedTestCases::test_maskingCase_negativeVariance
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3432: RuntimeWarning: Mean of empty slice.
    return _methods._mean(a, axis=axis, dtype=dtype,

tests/test_isrTask.py::IsrTaskUnTrimmedTestCases::test_maskingCase_negativeVariance
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numpy/core/_methods.py:190: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/test_isrTask.py::IsrTaskUnTrimmedTestCases::test_maskingCase_negativeVariance
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numpy/core/_methods.py:265: RuntimeWarning: Degrees of freedom <= 0 for slice
    ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/test_isrTask.py::IsrTaskUnTrimmedTestCases::test_maskingCase_negativeVariance
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numpy/core/_methods.py:223: RuntimeWarning: invalid value encountered in divide
    arrmean = um.true_divide(arrmean, div, out=arrmean, casting='unsafe',

tests/test_isrTask.py::IsrTaskUnTrimmedTestCases::test_maskingCase_negativeVariance
  /sdf/group/rubin/sw/conda/envs/lsst-scipipe-6.0.0/lib/python3.10/site-packages/numpy/core/_methods.py:257: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
--------------------------- generated xml file: /sdf/home/a/abrought/alternate_branches/chrisfixes_old/ip_isr/tests/.tests/pytest-ip_isr.xml ---------------------------

---------- coverage: platform linux, python 3.10.10-final-0 ----------
Name                                          Stmts   Miss Branch BrPart  Cover
-------------------------------------------------------------------------------
python/lsst/__init__.py                           2      0      0      0   100%
python/lsst/ip/__init__.py                        2      0      0      0   100%
python/lsst/ip/isr/__init__.py                   23      0      0      0   100%
python/lsst/ip/isr/ampOffset.py                  24      1      2      1    92%
python/lsst/ip/isr/assembleCcdTask.py            60      2     22      3    94%
python/lsst/ip/isr/brighterFatterKernel.py      231     45    126     15    75%
python/lsst/ip/isr/calibType.py                 336     29    122     18    90%
python/lsst/ip/isr/crosstalk.py                 289     50    142     40    74%
python/lsst/ip/isr/defects.py                   256     53     84      7    78%
python/lsst/ip/isr/deferredCharge.py            270     60     94     22    70%
python/lsst/ip/isr/fringe.py                    205     49     52     10    73%
python/lsst/ip/isr/isrFunctions.py              360     43    148     20    83%
python/lsst/ip/isr/isrMock.py                   425     47    132     21    85%
python/lsst/ip/isr/isrQa.py                      35      0      4      1    97%
python/lsst/ip/isr/isrStatistics.py             150     96     50      2    33%
python/lsst/ip/isr/isrTask.py                   899    267    392     71    65%
python/lsst/ip/isr/linearize.py                 232     20     88     16    88%
python/lsst/ip/isr/masking.py                    10      0      0      0   100%
python/lsst/ip/isr/overscan.py                  322     96    119     13    64%
python/lsst/ip/isr/photodiode.py                101     17     24      7    78%
python/lsst/ip/isr/photodiodeCorrection.py       71     13     28      6    73%
python/lsst/ip/isr/ptcDataset.py                285     13     92      7    94%
python/lsst/ip/isr/straylight.py                 24      2      0      0    92%
python/lsst/ip/isr/transmissionCurve.py          88     12     32      7    81%
python/lsst/ip/isr/version.py                     6      0      0      0   100%
python/lsst/ip/isr/vignette.py                   65     19     20      6    66%
tests/test_applyLookupTable.py                   66      2      6      1    96%
tests/test_assembleCcd.py                        30      2      4      1    91%
tests/test_biasAndDarkCorrection.py             106      2     14      1    98%
tests/test_brighterFatter.py                     59      3      8      2    93%
tests/test_calibType.py                          44      3      2      1    91%
tests/test_crosstalk.py                         169     18     24      2    85%
tests/test_defect.py                             72     14     18      4    76%
tests/test_defects.py                           126      5     44      3    95%
tests/test_deferredCharge.py                     85      3      2      1    95%
tests/test_empiricalVariance.py                 103      3      2      1    96%
tests/test_flatAndIlluminationCorrection.py      88      2     16      1    97%
tests/test_fringes.py                           146     15     16      3    86%
tests/test_isrFunctions.py                      167      2     38      2    98%
tests/test_isrMisc.py                            46      2     12      1    95%
tests/test_isrMock.py                            64      2      4      1    96%
tests/test_isrQa.py                              23      2      2      1    88%
tests/test_isrStatistics.py                      34      3      4      1    89%
tests/test_isrTask.py                           328     20     20      1    90%
tests/test_linearize.py                         160      3     44      4    97%
tests/test_linearizeLookupTable.py              144      2     20      1    98%
tests/test_linearizeSquared.py                  104      2     12      1    97%
tests/test_maskNans.py                           47      8      8      4    78%
tests/test_overscanCorrection.py                322      2     96      2    99%
tests/test_photodiode.py                         70      3      2      1    94%
tests/test_photodiodeCorrection.py               53      3      6      1    93%
tests/test_ptcDataset.py                        205      3     40      1    98%
tests/test_saturationCorrection.py               43      2     16      1    95%
tests/test_setValidPolygonIntersect.py           62      2      8      1    96%
tests/test_suspectMasking.py                     81      2      2      1    96%
tests/test_transmissionCurve.py                  37      3      6      1    91%
-------------------------------------------------------------------------------
TOTAL                                          7855   1072   2269    340    82%
Coverage HTML written to dir tests/.tests/pytest-ip_isr.xml-htmlcov
Coverage XML written to file tests/.tests/pytest-ip_isr.xml-cov-ip_isr.xml

========================================================================= slowest 5 durations ==========================================================================
23.28s call     tests/test_fringes.py::FringeTestCase::testPedestal
15.00s call     tests/test_fringes.py::FringeTestCase::testMultiple
8.20s call     tests/test_fringes.py::FringeTestCase::testRun
8.20s call     tests/test_fringes.py::FringeTestCase::testSingle
7.18s call     tests/test_fringes.py::FringeTestCase::test_multiFringes
======================================================================= short test summary info ========================================================================
[31mFAILED[0m python/lsst/ip/isr/isrStatistics.py::[1mflake-8::FLAKE8[0m
======================================================== [31m[1m1 failed[0m, [32m219 passed[0m, [33m67 warnings[0m[31m in 288.07s (0:04:48)[0m[31m ========================================================
